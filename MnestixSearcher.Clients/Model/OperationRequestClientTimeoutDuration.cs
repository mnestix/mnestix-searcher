// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// OperationRequestClientTimeoutDuration
    /// </summary>
    public partial class OperationRequestClientTimeoutDuration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationRequestClientTimeoutDuration" /> class.
        /// </summary>
        /// <param name="sign">sign</param>
        /// <param name="xmlschemaType">xmlschemaType</param>
        /// <param name="months">months</param>
        /// <param name="seconds">seconds</param>
        /// <param name="days">days</param>
        /// <param name="years">years</param>
        /// <param name="hours">hours</param>
        /// <param name="minutes">minutes</param>
        [JsonConstructor]
        public OperationRequestClientTimeoutDuration(Option<int?> sign = default, Option<OperationRequestClientTimeoutDurationXmlschemaType?> xmlschemaType = default, Option<int?> months = default, Option<int?> seconds = default, Option<int?> days = default, Option<int?> years = default, Option<int?> hours = default, Option<int?> minutes = default)
        {
            SignOption = sign;
            XmlschemaTypeOption = xmlschemaType;
            MonthsOption = months;
            SecondsOption = seconds;
            DaysOption = days;
            YearsOption = years;
            HoursOption = hours;
            MinutesOption = minutes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Sign
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SignOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [JsonPropertyName("sign")]
        public int? Sign { get { return this.SignOption; } set { this.SignOption = new(value); } }

        /// <summary>
        /// Used to track the state of XmlschemaType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OperationRequestClientTimeoutDurationXmlschemaType?> XmlschemaTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets XmlschemaType
        /// </summary>
        [JsonPropertyName("xmlschemaType")]
        public OperationRequestClientTimeoutDurationXmlschemaType? XmlschemaType { get { return this.XmlschemaTypeOption; } set { this.XmlschemaTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Months
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MonthsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Months
        /// </summary>
        [JsonPropertyName("months")]
        public int? Months { get { return this.MonthsOption; } set { this.MonthsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Seconds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SecondsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [JsonPropertyName("seconds")]
        public int? Seconds { get { return this.SecondsOption; } set { this.SecondsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Days
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DaysOption { get; private set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [JsonPropertyName("days")]
        public int? Days { get { return this.DaysOption; } set { this.DaysOption = new(value); } }

        /// <summary>
        /// Used to track the state of Years
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YearsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Years
        /// </summary>
        [JsonPropertyName("years")]
        public int? Years { get { return this.YearsOption; } set { this.YearsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HoursOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [JsonPropertyName("hours")]
        public int? Hours { get { return this.HoursOption; } set { this.HoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of Minutes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinutesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [JsonPropertyName("minutes")]
        public int? Minutes { get { return this.MinutesOption; } set { this.MinutesOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OperationRequestClientTimeoutDuration {\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  XmlschemaType: ").Append(XmlschemaType).Append("\n");
            sb.Append("  Months: ").Append(Months).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Years: ").Append(Years).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OperationRequestClientTimeoutDuration" />
    /// </summary>
    public class OperationRequestClientTimeoutDurationJsonConverter : JsonConverter<OperationRequestClientTimeoutDuration>
    {
        /// <summary>
        /// Deserializes json to <see cref="OperationRequestClientTimeoutDuration" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OperationRequestClientTimeoutDuration Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> sign = default;
            Option<OperationRequestClientTimeoutDurationXmlschemaType?> xmlschemaType = default;
            Option<int?> months = default;
            Option<int?> seconds = default;
            Option<int?> days = default;
            Option<int?> years = default;
            Option<int?> hours = default;
            Option<int?> minutes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sign":
                            sign = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "xmlschemaType":
                            xmlschemaType = new Option<OperationRequestClientTimeoutDurationXmlschemaType?>(JsonSerializer.Deserialize<OperationRequestClientTimeoutDurationXmlschemaType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "months":
                            months = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "seconds":
                            seconds = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "days":
                            days = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "years":
                            years = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hours":
                            hours = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "minutes":
                            minutes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sign.IsSet && sign.Value == null)
                throw new ArgumentNullException(nameof(sign), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (xmlschemaType.IsSet && xmlschemaType.Value == null)
                throw new ArgumentNullException(nameof(xmlschemaType), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (months.IsSet && months.Value == null)
                throw new ArgumentNullException(nameof(months), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (seconds.IsSet && seconds.Value == null)
                throw new ArgumentNullException(nameof(seconds), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (days.IsSet && days.Value == null)
                throw new ArgumentNullException(nameof(days), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (years.IsSet && years.Value == null)
                throw new ArgumentNullException(nameof(years), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (hours.IsSet && hours.Value == null)
                throw new ArgumentNullException(nameof(hours), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            if (minutes.IsSet && minutes.Value == null)
                throw new ArgumentNullException(nameof(minutes), "Property is not nullable for class OperationRequestClientTimeoutDuration.");

            return new OperationRequestClientTimeoutDuration(sign, xmlschemaType, months, seconds, days, years, hours, minutes);
        }

        /// <summary>
        /// Serializes a <see cref="OperationRequestClientTimeoutDuration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationRequestClientTimeoutDuration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OperationRequestClientTimeoutDuration operationRequestClientTimeoutDuration, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, operationRequestClientTimeoutDuration, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OperationRequestClientTimeoutDuration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationRequestClientTimeoutDuration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OperationRequestClientTimeoutDuration operationRequestClientTimeoutDuration, JsonSerializerOptions jsonSerializerOptions)
        {
            if (operationRequestClientTimeoutDuration.XmlschemaTypeOption.IsSet && operationRequestClientTimeoutDuration.XmlschemaType == null)
                throw new ArgumentNullException(nameof(operationRequestClientTimeoutDuration.XmlschemaType), "Property is required for class OperationRequestClientTimeoutDuration.");

            if (operationRequestClientTimeoutDuration.SignOption.IsSet)
                writer.WriteNumber("sign", operationRequestClientTimeoutDuration.SignOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.XmlschemaTypeOption.IsSet)
            {
                writer.WritePropertyName("xmlschemaType");
                JsonSerializer.Serialize(writer, operationRequestClientTimeoutDuration.XmlschemaType, jsonSerializerOptions);
            }
            if (operationRequestClientTimeoutDuration.MonthsOption.IsSet)
                writer.WriteNumber("months", operationRequestClientTimeoutDuration.MonthsOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.SecondsOption.IsSet)
                writer.WriteNumber("seconds", operationRequestClientTimeoutDuration.SecondsOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.DaysOption.IsSet)
                writer.WriteNumber("days", operationRequestClientTimeoutDuration.DaysOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.YearsOption.IsSet)
                writer.WriteNumber("years", operationRequestClientTimeoutDuration.YearsOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.HoursOption.IsSet)
                writer.WriteNumber("hours", operationRequestClientTimeoutDuration.HoursOption.Value!.Value);

            if (operationRequestClientTimeoutDuration.MinutesOption.IsSet)
                writer.WriteNumber("minutes", operationRequestClientTimeoutDuration.MinutesOption.Value!.Value);
        }
    }
}
