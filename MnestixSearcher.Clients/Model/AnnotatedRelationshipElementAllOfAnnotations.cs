// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// AnnotatedRelationshipElementAllOfAnnotations
    /// </summary>
    public partial class AnnotatedRelationshipElementAllOfAnnotations : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="blob"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(Blob blob)
        {
            Blob = blob;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="file"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(File file)
        {
            File = file;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="multiLanguageProperty"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(MultiLanguageProperty multiLanguageProperty)
        {
            MultiLanguageProperty = multiLanguageProperty;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="property"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(Property property)
        {
            Property = property;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="range"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(Range range)
        {
            Range = range;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedRelationshipElementAllOfAnnotations" /> class.
        /// </summary>
        /// <param name="referenceElement"></param>
        public AnnotatedRelationshipElementAllOfAnnotations(ReferenceElement referenceElement)
        {
            ReferenceElement = referenceElement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Blob
        /// </summary>
        public Blob? Blob { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        public File? File { get; set; }

        /// <summary>
        /// Gets or Sets MultiLanguageProperty
        /// </summary>
        public MultiLanguageProperty? MultiLanguageProperty { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        public Property? Property { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        public Range? Range { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceElement
        /// </summary>
        public ReferenceElement? ReferenceElement { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnnotatedRelationshipElementAllOfAnnotations {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AnnotatedRelationshipElementAllOfAnnotations" />
    /// </summary>
    public class AnnotatedRelationshipElementAllOfAnnotationsJsonConverter : JsonConverter<AnnotatedRelationshipElementAllOfAnnotations>
    {
        /// <summary>
        /// Deserializes json to <see cref="AnnotatedRelationshipElementAllOfAnnotations" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AnnotatedRelationshipElementAllOfAnnotations Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Blob? blob = default;
            File? file = default;
            MultiLanguageProperty? multiLanguageProperty = default;
            Property? property = default;
            Range? range = default;
            ReferenceElement? referenceElement = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderBlob = utf8JsonReader;
                    ClientUtils.TryDeserialize<Blob?>(ref utf8JsonReaderBlob, jsonSerializerOptions, out blob);

                    Utf8JsonReader utf8JsonReaderFile = utf8JsonReader;
                    ClientUtils.TryDeserialize<File?>(ref utf8JsonReaderFile, jsonSerializerOptions, out file);

                    Utf8JsonReader utf8JsonReaderMultiLanguageProperty = utf8JsonReader;
                    ClientUtils.TryDeserialize<MultiLanguageProperty?>(ref utf8JsonReaderMultiLanguageProperty, jsonSerializerOptions, out multiLanguageProperty);

                    Utf8JsonReader utf8JsonReaderProperty = utf8JsonReader;
                    ClientUtils.TryDeserialize<Property?>(ref utf8JsonReaderProperty, jsonSerializerOptions, out property);

                    Utf8JsonReader utf8JsonReaderRange = utf8JsonReader;
                    ClientUtils.TryDeserialize<Range?>(ref utf8JsonReaderRange, jsonSerializerOptions, out range);

                    Utf8JsonReader utf8JsonReaderReferenceElement = utf8JsonReader;
                    ClientUtils.TryDeserialize<ReferenceElement?>(ref utf8JsonReaderReferenceElement, jsonSerializerOptions, out referenceElement);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (blob != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(blob);

            if (file != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(file);

            if (multiLanguageProperty != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(multiLanguageProperty);

            if (property != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(property);

            if (range != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(range);

            if (referenceElement != null)
                return new AnnotatedRelationshipElementAllOfAnnotations(referenceElement);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="AnnotatedRelationshipElementAllOfAnnotations" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="annotatedRelationshipElementAllOfAnnotations"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AnnotatedRelationshipElementAllOfAnnotations annotatedRelationshipElementAllOfAnnotations, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, annotatedRelationshipElementAllOfAnnotations, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AnnotatedRelationshipElementAllOfAnnotations" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="annotatedRelationshipElementAllOfAnnotations"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AnnotatedRelationshipElementAllOfAnnotations annotatedRelationshipElementAllOfAnnotations, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
