// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Operation request object
    /// </summary>
    public partial class OperationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationRequest" /> class.
        /// </summary>
        /// <param name="inputArguments">inputArguments</param>
        /// <param name="inoutputArguments">inoutputArguments</param>
        /// <param name="clientTimeoutDuration">clientTimeoutDuration</param>
        [JsonConstructor]
        public OperationRequest(Option<List<OperationVariable>?> inputArguments = default, Option<List<OperationVariable>?> inoutputArguments = default, Option<OperationRequestClientTimeoutDuration?> clientTimeoutDuration = default)
        {
            InputArgumentsOption = inputArguments;
            InoutputArgumentsOption = inoutputArguments;
            ClientTimeoutDurationOption = clientTimeoutDuration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InputArguments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OperationVariable>?> InputArgumentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputArguments
        /// </summary>
        [JsonPropertyName("inputArguments")]
        public List<OperationVariable>? InputArguments { get { return this.InputArgumentsOption; } set { this.InputArgumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InoutputArguments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OperationVariable>?> InoutputArgumentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets InoutputArguments
        /// </summary>
        [JsonPropertyName("inoutputArguments")]
        public List<OperationVariable>? InoutputArguments { get { return this.InoutputArgumentsOption; } set { this.InoutputArgumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientTimeoutDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OperationRequestClientTimeoutDuration?> ClientTimeoutDurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClientTimeoutDuration
        /// </summary>
        [JsonPropertyName("clientTimeoutDuration")]
        public OperationRequestClientTimeoutDuration? ClientTimeoutDuration { get { return this.ClientTimeoutDurationOption; } set { this.ClientTimeoutDurationOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OperationRequest {\n");
            sb.Append("  InputArguments: ").Append(InputArguments).Append("\n");
            sb.Append("  InoutputArguments: ").Append(InoutputArguments).Append("\n");
            sb.Append("  ClientTimeoutDuration: ").Append(ClientTimeoutDuration).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OperationRequest" />
    /// </summary>
    public class OperationRequestJsonConverter : JsonConverter<OperationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="OperationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OperationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<OperationVariable>?> inputArguments = default;
            Option<List<OperationVariable>?> inoutputArguments = default;
            Option<OperationRequestClientTimeoutDuration?> clientTimeoutDuration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inputArguments":
                            inputArguments = new Option<List<OperationVariable>?>(JsonSerializer.Deserialize<List<OperationVariable>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inoutputArguments":
                            inoutputArguments = new Option<List<OperationVariable>?>(JsonSerializer.Deserialize<List<OperationVariable>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clientTimeoutDuration":
                            clientTimeoutDuration = new Option<OperationRequestClientTimeoutDuration?>(JsonSerializer.Deserialize<OperationRequestClientTimeoutDuration>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (inputArguments.IsSet && inputArguments.Value == null)
                throw new ArgumentNullException(nameof(inputArguments), "Property is not nullable for class OperationRequest.");

            if (inoutputArguments.IsSet && inoutputArguments.Value == null)
                throw new ArgumentNullException(nameof(inoutputArguments), "Property is not nullable for class OperationRequest.");

            if (clientTimeoutDuration.IsSet && clientTimeoutDuration.Value == null)
                throw new ArgumentNullException(nameof(clientTimeoutDuration), "Property is not nullable for class OperationRequest.");

            return new OperationRequest(inputArguments, inoutputArguments, clientTimeoutDuration);
        }

        /// <summary>
        /// Serializes a <see cref="OperationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OperationRequest operationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, operationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OperationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OperationRequest operationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (operationRequest.InputArgumentsOption.IsSet && operationRequest.InputArguments == null)
                throw new ArgumentNullException(nameof(operationRequest.InputArguments), "Property is required for class OperationRequest.");

            if (operationRequest.InoutputArgumentsOption.IsSet && operationRequest.InoutputArguments == null)
                throw new ArgumentNullException(nameof(operationRequest.InoutputArguments), "Property is required for class OperationRequest.");

            if (operationRequest.ClientTimeoutDurationOption.IsSet && operationRequest.ClientTimeoutDuration == null)
                throw new ArgumentNullException(nameof(operationRequest.ClientTimeoutDuration), "Property is required for class OperationRequest.");

            if (operationRequest.InputArgumentsOption.IsSet)
            {
                writer.WritePropertyName("inputArguments");
                JsonSerializer.Serialize(writer, operationRequest.InputArguments, jsonSerializerOptions);
            }
            if (operationRequest.InoutputArgumentsOption.IsSet)
            {
                writer.WritePropertyName("inoutputArguments");
                JsonSerializer.Serialize(writer, operationRequest.InoutputArguments, jsonSerializerOptions);
            }
            if (operationRequest.ClientTimeoutDurationOption.IsSet)
            {
                writer.WritePropertyName("clientTimeoutDuration");
                JsonSerializer.Serialize(writer, operationRequest.ClientTimeoutDuration, jsonSerializerOptions);
            }
        }
    }
}
