// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// MultiLanguageProperty
    /// </summary>
    public partial class MultiLanguageProperty : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiLanguageProperty" /> class.
        /// </summary>
        /// <param name="embeddedDataSpecifications">embeddedDataSpecifications</param>
        /// <param name="displayName">displayName</param>
        /// <param name="description">description</param>
        /// <param name="category">category</param>
        /// <param name="idShort">idShort</param>
        /// <param name="extensions">extensions</param>
        /// <param name="semanticId">semanticId</param>
        /// <param name="supplementalSemanticIds">supplementalSemanticIds</param>
        /// <param name="qualifiers">qualifiers</param>
        /// <param name="value">value</param>
        /// <param name="valueId">valueId</param>
        [JsonConstructor]
        public MultiLanguageProperty(Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default, Option<List<LangStringNameType>?> displayName = default, Option<List<LangStringTextType>?> description = default, Option<string?> category = default, Option<string?> idShort = default, Option<List<Extension>?> extensions = default, Option<Reference?> semanticId = default, Option<List<Reference>?> supplementalSemanticIds = default, Option<List<Qualifier>?> qualifiers = default, Option<List<LangStringTextType>?> value = default, Option<Reference?> valueId = default)
        {
            EmbeddedDataSpecificationsOption = embeddedDataSpecifications;
            DisplayNameOption = displayName;
            DescriptionOption = description;
            CategoryOption = category;
            IdShortOption = idShort;
            ExtensionsOption = extensions;
            SemanticIdOption = semanticId;
            SupplementalSemanticIdsOption = supplementalSemanticIds;
            QualifiersOption = qualifiers;
            ValueOption = value;
            ValueIdOption = valueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmbeddedDataSpecifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmbeddedDataSpecification>?> EmbeddedDataSpecificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddedDataSpecifications
        /// </summary>
        [JsonPropertyName("embeddedDataSpecifications")]
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get { return this.EmbeddedDataSpecificationsOption; } set { this.EmbeddedDataSpecificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringNameType>?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public List<LangStringNameType>? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringTextType>?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public List<LangStringTextType>? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdShort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdShortOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        [JsonPropertyName("idShort")]
        public string? IdShort { get { return this.IdShortOption; } set { this.IdShortOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extensions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Extension>?> ExtensionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [JsonPropertyName("extensions")]
        public List<Extension>? Extensions { get { return this.ExtensionsOption; } set { this.ExtensionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        [JsonPropertyName("semanticId")]
        public Reference? SemanticId { get { return this.SemanticIdOption; } set { this.SemanticIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalSemanticIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> SupplementalSemanticIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticIds
        /// </summary>
        [JsonPropertyName("supplementalSemanticIds")]
        public List<Reference>? SupplementalSemanticIds { get { return this.SupplementalSemanticIdsOption; } set { this.SupplementalSemanticIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Qualifiers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Qualifier>?> QualifiersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Qualifiers
        /// </summary>
        [JsonPropertyName("qualifiers")]
        public List<Qualifier>? Qualifiers { get { return this.QualifiersOption; } set { this.QualifiersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringTextType>?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public List<LangStringTextType>? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> ValueIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValueId
        /// </summary>
        [JsonPropertyName("valueId")]
        public Reference? ValueId { get { return this.ValueIdOption; } set { this.ValueIdOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiLanguageProperty {\n");
            sb.Append("  EmbeddedDataSpecifications: ").Append(EmbeddedDataSpecifications).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticIds: ").Append(SupplementalSemanticIds).Append("\n");
            sb.Append("  Qualifiers: ").Append(Qualifiers).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueId: ").Append(ValueId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MultiLanguageProperty" />
    /// </summary>
    public class MultiLanguagePropertyJsonConverter : JsonConverter<MultiLanguageProperty>
    {
        /// <summary>
        /// Deserializes json to <see cref="MultiLanguageProperty" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MultiLanguageProperty Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default;
            Option<List<LangStringNameType>?> displayName = default;
            Option<List<LangStringTextType>?> description = default;
            Option<string?> category = default;
            Option<string?> idShort = default;
            Option<List<Extension>?> extensions = default;
            Option<Reference?> semanticId = default;
            Option<List<Reference>?> supplementalSemanticIds = default;
            Option<List<Qualifier>?> qualifiers = default;
            Option<List<LangStringTextType>?> value = default;
            Option<Reference?> valueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "embeddedDataSpecifications":
                            embeddedDataSpecifications = new Option<List<EmbeddedDataSpecification>?>(JsonSerializer.Deserialize<List<EmbeddedDataSpecification>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "displayName":
                            displayName = new Option<List<LangStringNameType>?>(JsonSerializer.Deserialize<List<LangStringNameType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<List<LangStringTextType>?>(JsonSerializer.Deserialize<List<LangStringTextType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idShort":
                            idShort = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extensions":
                            extensions = new Option<List<Extension>?>(JsonSerializer.Deserialize<List<Extension>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticId":
                            semanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplementalSemanticIds":
                            supplementalSemanticIds = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "qualifiers":
                            qualifiers = new Option<List<Qualifier>?>(JsonSerializer.Deserialize<List<Qualifier>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "value":
                            value = new Option<List<LangStringTextType>?>(JsonSerializer.Deserialize<List<LangStringTextType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "valueId":
                            valueId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (embeddedDataSpecifications.IsSet && embeddedDataSpecifications.Value == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecifications), "Property is not nullable for class MultiLanguageProperty.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class MultiLanguageProperty.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class MultiLanguageProperty.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class MultiLanguageProperty.");

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort), "Property is not nullable for class MultiLanguageProperty.");

            if (extensions.IsSet && extensions.Value == null)
                throw new ArgumentNullException(nameof(extensions), "Property is not nullable for class MultiLanguageProperty.");

            if (semanticId.IsSet && semanticId.Value == null)
                throw new ArgumentNullException(nameof(semanticId), "Property is not nullable for class MultiLanguageProperty.");

            if (supplementalSemanticIds.IsSet && supplementalSemanticIds.Value == null)
                throw new ArgumentNullException(nameof(supplementalSemanticIds), "Property is not nullable for class MultiLanguageProperty.");

            if (qualifiers.IsSet && qualifiers.Value == null)
                throw new ArgumentNullException(nameof(qualifiers), "Property is not nullable for class MultiLanguageProperty.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class MultiLanguageProperty.");

            if (valueId.IsSet && valueId.Value == null)
                throw new ArgumentNullException(nameof(valueId), "Property is not nullable for class MultiLanguageProperty.");

            return new MultiLanguageProperty(embeddedDataSpecifications, displayName, description, category, idShort, extensions, semanticId, supplementalSemanticIds, qualifiers, value, valueId);
        }

        /// <summary>
        /// Serializes a <see cref="MultiLanguageProperty" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multiLanguageProperty"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MultiLanguageProperty multiLanguageProperty, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, multiLanguageProperty, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MultiLanguageProperty" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multiLanguageProperty"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MultiLanguageProperty multiLanguageProperty, JsonSerializerOptions jsonSerializerOptions)
        {
            if (multiLanguageProperty.EmbeddedDataSpecificationsOption.IsSet && multiLanguageProperty.EmbeddedDataSpecifications == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.EmbeddedDataSpecifications), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.DisplayNameOption.IsSet && multiLanguageProperty.DisplayName == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.DisplayName), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.DescriptionOption.IsSet && multiLanguageProperty.Description == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.Description), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.CategoryOption.IsSet && multiLanguageProperty.Category == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.Category), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.IdShortOption.IsSet && multiLanguageProperty.IdShort == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.IdShort), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.ExtensionsOption.IsSet && multiLanguageProperty.Extensions == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.Extensions), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.SemanticIdOption.IsSet && multiLanguageProperty.SemanticId == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.SemanticId), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.SupplementalSemanticIdsOption.IsSet && multiLanguageProperty.SupplementalSemanticIds == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.SupplementalSemanticIds), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.QualifiersOption.IsSet && multiLanguageProperty.Qualifiers == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.Qualifiers), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.ValueOption.IsSet && multiLanguageProperty.Value == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.Value), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.ValueIdOption.IsSet && multiLanguageProperty.ValueId == null)
                throw new ArgumentNullException(nameof(multiLanguageProperty.ValueId), "Property is required for class MultiLanguageProperty.");

            if (multiLanguageProperty.EmbeddedDataSpecificationsOption.IsSet)
            {
                writer.WritePropertyName("embeddedDataSpecifications");
                JsonSerializer.Serialize(writer, multiLanguageProperty.EmbeddedDataSpecifications, jsonSerializerOptions);
            }
            if (multiLanguageProperty.DisplayNameOption.IsSet)
            {
                writer.WritePropertyName("displayName");
                JsonSerializer.Serialize(writer, multiLanguageProperty.DisplayName, jsonSerializerOptions);
            }
            if (multiLanguageProperty.DescriptionOption.IsSet)
            {
                writer.WritePropertyName("description");
                JsonSerializer.Serialize(writer, multiLanguageProperty.Description, jsonSerializerOptions);
            }
            if (multiLanguageProperty.CategoryOption.IsSet)
                writer.WriteString("category", multiLanguageProperty.Category);

            if (multiLanguageProperty.IdShortOption.IsSet)
                writer.WriteString("idShort", multiLanguageProperty.IdShort);

            if (multiLanguageProperty.ExtensionsOption.IsSet)
            {
                writer.WritePropertyName("extensions");
                JsonSerializer.Serialize(writer, multiLanguageProperty.Extensions, jsonSerializerOptions);
            }
            if (multiLanguageProperty.SemanticIdOption.IsSet)
            {
                writer.WritePropertyName("semanticId");
                JsonSerializer.Serialize(writer, multiLanguageProperty.SemanticId, jsonSerializerOptions);
            }
            if (multiLanguageProperty.SupplementalSemanticIdsOption.IsSet)
            {
                writer.WritePropertyName("supplementalSemanticIds");
                JsonSerializer.Serialize(writer, multiLanguageProperty.SupplementalSemanticIds, jsonSerializerOptions);
            }
            if (multiLanguageProperty.QualifiersOption.IsSet)
            {
                writer.WritePropertyName("qualifiers");
                JsonSerializer.Serialize(writer, multiLanguageProperty.Qualifiers, jsonSerializerOptions);
            }
            if (multiLanguageProperty.ValueOption.IsSet)
            {
                writer.WritePropertyName("value");
                JsonSerializer.Serialize(writer, multiLanguageProperty.Value, jsonSerializerOptions);
            }
            if (multiLanguageProperty.ValueIdOption.IsSet)
            {
                writer.WritePropertyName("valueId");
                JsonSerializer.Serialize(writer, multiLanguageProperty.ValueId, jsonSerializerOptions);
            }
        }
    }
}
