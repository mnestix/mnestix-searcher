// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// LangStringDefinitionTypeIec61360
    /// </summary>
    public partial class LangStringDefinitionTypeIec61360 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LangStringDefinitionTypeIec61360" /> class.
        /// </summary>
        /// <param name="language">language</param>
        /// <param name="text">text</param>
        [JsonConstructor]
        public LangStringDefinitionTypeIec61360(Option<string?> language = default, Option<string?> text = default)
        {
            LanguageOption = language;
            TextOption = text;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LangStringDefinitionTypeIec61360 {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LangStringDefinitionTypeIec61360" />
    /// </summary>
    public class LangStringDefinitionTypeIec61360JsonConverter : JsonConverter<LangStringDefinitionTypeIec61360>
    {
        /// <summary>
        /// Deserializes json to <see cref="LangStringDefinitionTypeIec61360" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LangStringDefinitionTypeIec61360 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> language = default;
            Option<string?> text = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class LangStringDefinitionTypeIec61360.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class LangStringDefinitionTypeIec61360.");

            return new LangStringDefinitionTypeIec61360(language, text);
        }

        /// <summary>
        /// Serializes a <see cref="LangStringDefinitionTypeIec61360" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="langStringDefinitionTypeIec61360"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LangStringDefinitionTypeIec61360 langStringDefinitionTypeIec61360, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, langStringDefinitionTypeIec61360, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LangStringDefinitionTypeIec61360" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="langStringDefinitionTypeIec61360"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LangStringDefinitionTypeIec61360 langStringDefinitionTypeIec61360, JsonSerializerOptions jsonSerializerOptions)
        {
            if (langStringDefinitionTypeIec61360.LanguageOption.IsSet && langStringDefinitionTypeIec61360.Language == null)
                throw new ArgumentNullException(nameof(langStringDefinitionTypeIec61360.Language), "Property is required for class LangStringDefinitionTypeIec61360.");

            if (langStringDefinitionTypeIec61360.TextOption.IsSet && langStringDefinitionTypeIec61360.Text == null)
                throw new ArgumentNullException(nameof(langStringDefinitionTypeIec61360.Text), "Property is required for class LangStringDefinitionTypeIec61360.");

            if (langStringDefinitionTypeIec61360.LanguageOption.IsSet)
                writer.WriteString("language", langStringDefinitionTypeIec61360.Language);

            if (langStringDefinitionTypeIec61360.TextOption.IsSet)
                writer.WriteString("text", langStringDefinitionTypeIec61360.Text);
        }
    }
}
