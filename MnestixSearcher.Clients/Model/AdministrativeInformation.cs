// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// AdministrativeInformation
    /// </summary>
    public partial class AdministrativeInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrativeInformation" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion</param>
        /// <param name="revision">revision</param>
        /// <param name="creator">creator</param>
        /// <param name="templateId">templateId</param>
        /// <param name="embeddedDataSpecifications">embeddedDataSpecifications</param>
        [JsonConstructor]
        public AdministrativeInformation(Option<string?> varVersion = default, Option<string?> revision = default, Option<Reference?> creator = default, Option<string?> templateId = default, Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default)
        {
            VarVersionOption = varVersion;
            RevisionOption = revision;
            CreatorOption = creator;
            TemplateIdOption = templateId;
            EmbeddedDataSpecificationsOption = embeddedDataSpecifications;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Revision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RevisionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [JsonPropertyName("revision")]
        public string? Revision { get { return this.RevisionOption; } set { this.RevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Creator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> CreatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public Reference? Creator { get { return this.CreatorOption; } set { this.CreatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [JsonPropertyName("templateId")]
        public string? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddedDataSpecifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmbeddedDataSpecification>?> EmbeddedDataSpecificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddedDataSpecifications
        /// </summary>
        [JsonPropertyName("embeddedDataSpecifications")]
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get { return this.EmbeddedDataSpecificationsOption; } set { this.EmbeddedDataSpecificationsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrativeInformation {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  EmbeddedDataSpecifications: ").Append(EmbeddedDataSpecifications).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdministrativeInformation" />
    /// </summary>
    public class AdministrativeInformationJsonConverter : JsonConverter<AdministrativeInformation>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdministrativeInformation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdministrativeInformation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varVersion = default;
            Option<string?> revision = default;
            Option<Reference?> creator = default;
            Option<string?> templateId = default;
            Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "revision":
                            revision = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creator":
                            creator = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templateId":
                            templateId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "embeddedDataSpecifications":
                            embeddedDataSpecifications = new Option<List<EmbeddedDataSpecification>?>(JsonSerializer.Deserialize<List<EmbeddedDataSpecification>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class AdministrativeInformation.");

            if (revision.IsSet && revision.Value == null)
                throw new ArgumentNullException(nameof(revision), "Property is not nullable for class AdministrativeInformation.");

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class AdministrativeInformation.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class AdministrativeInformation.");

            if (embeddedDataSpecifications.IsSet && embeddedDataSpecifications.Value == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecifications), "Property is not nullable for class AdministrativeInformation.");

            return new AdministrativeInformation(varVersion, revision, creator, templateId, embeddedDataSpecifications);
        }

        /// <summary>
        /// Serializes a <see cref="AdministrativeInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="administrativeInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdministrativeInformation administrativeInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, administrativeInformation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdministrativeInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="administrativeInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdministrativeInformation administrativeInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (administrativeInformation.VarVersionOption.IsSet && administrativeInformation.VarVersion == null)
                throw new ArgumentNullException(nameof(administrativeInformation.VarVersion), "Property is required for class AdministrativeInformation.");

            if (administrativeInformation.RevisionOption.IsSet && administrativeInformation.Revision == null)
                throw new ArgumentNullException(nameof(administrativeInformation.Revision), "Property is required for class AdministrativeInformation.");

            if (administrativeInformation.CreatorOption.IsSet && administrativeInformation.Creator == null)
                throw new ArgumentNullException(nameof(administrativeInformation.Creator), "Property is required for class AdministrativeInformation.");

            if (administrativeInformation.TemplateIdOption.IsSet && administrativeInformation.TemplateId == null)
                throw new ArgumentNullException(nameof(administrativeInformation.TemplateId), "Property is required for class AdministrativeInformation.");

            if (administrativeInformation.EmbeddedDataSpecificationsOption.IsSet && administrativeInformation.EmbeddedDataSpecifications == null)
                throw new ArgumentNullException(nameof(administrativeInformation.EmbeddedDataSpecifications), "Property is required for class AdministrativeInformation.");

            if (administrativeInformation.VarVersionOption.IsSet)
                writer.WriteString("version", administrativeInformation.VarVersion);

            if (administrativeInformation.RevisionOption.IsSet)
                writer.WriteString("revision", administrativeInformation.Revision);

            if (administrativeInformation.CreatorOption.IsSet)
            {
                writer.WritePropertyName("creator");
                JsonSerializer.Serialize(writer, administrativeInformation.Creator, jsonSerializerOptions);
            }
            if (administrativeInformation.TemplateIdOption.IsSet)
                writer.WriteString("templateId", administrativeInformation.TemplateId);

            if (administrativeInformation.EmbeddedDataSpecificationsOption.IsSet)
            {
                writer.WritePropertyName("embeddedDataSpecifications");
                JsonSerializer.Serialize(writer, administrativeInformation.EmbeddedDataSpecifications, jsonSerializerOptions);
            }
        }
    }
}
