// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// EmbeddedDataSpecification
    /// </summary>
    public partial class EmbeddedDataSpecification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedDataSpecification" /> class.
        /// </summary>
        /// <param name="dataSpecification">dataSpecification</param>
        /// <param name="dataSpecificationContent">dataSpecificationContent</param>
        [JsonConstructor]
        public EmbeddedDataSpecification(Option<Reference?> dataSpecification = default, Option<EmbeddedDataSpecificationDataSpecificationContent?> dataSpecificationContent = default)
        {
            DataSpecificationOption = dataSpecification;
            DataSpecificationContentOption = dataSpecificationContent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DataSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> DataSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataSpecification
        /// </summary>
        [JsonPropertyName("dataSpecification")]
        public Reference? DataSpecification { get { return this.DataSpecificationOption; } set { this.DataSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataSpecificationContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmbeddedDataSpecificationDataSpecificationContent?> DataSpecificationContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataSpecificationContent
        /// </summary>
        [JsonPropertyName("dataSpecificationContent")]
        public EmbeddedDataSpecificationDataSpecificationContent? DataSpecificationContent { get { return this.DataSpecificationContentOption; } set { this.DataSpecificationContentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddedDataSpecification {\n");
            sb.Append("  DataSpecification: ").Append(DataSpecification).Append("\n");
            sb.Append("  DataSpecificationContent: ").Append(DataSpecificationContent).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmbeddedDataSpecification" />
    /// </summary>
    public class EmbeddedDataSpecificationJsonConverter : JsonConverter<EmbeddedDataSpecification>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmbeddedDataSpecification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmbeddedDataSpecification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Reference?> dataSpecification = default;
            Option<EmbeddedDataSpecificationDataSpecificationContent?> dataSpecificationContent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dataSpecification":
                            dataSpecification = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dataSpecificationContent":
                            dataSpecificationContent = new Option<EmbeddedDataSpecificationDataSpecificationContent?>(JsonSerializer.Deserialize<EmbeddedDataSpecificationDataSpecificationContent>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dataSpecification.IsSet && dataSpecification.Value == null)
                throw new ArgumentNullException(nameof(dataSpecification), "Property is not nullable for class EmbeddedDataSpecification.");

            if (dataSpecificationContent.IsSet && dataSpecificationContent.Value == null)
                throw new ArgumentNullException(nameof(dataSpecificationContent), "Property is not nullable for class EmbeddedDataSpecification.");

            return new EmbeddedDataSpecification(dataSpecification, dataSpecificationContent);
        }

        /// <summary>
        /// Serializes a <see cref="EmbeddedDataSpecification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="embeddedDataSpecification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmbeddedDataSpecification embeddedDataSpecification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, embeddedDataSpecification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmbeddedDataSpecification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="embeddedDataSpecification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmbeddedDataSpecification embeddedDataSpecification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (embeddedDataSpecification.DataSpecificationOption.IsSet && embeddedDataSpecification.DataSpecification == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecification.DataSpecification), "Property is required for class EmbeddedDataSpecification.");

            if (embeddedDataSpecification.DataSpecificationContentOption.IsSet && embeddedDataSpecification.DataSpecificationContent == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecification.DataSpecificationContent), "Property is required for class EmbeddedDataSpecification.");

            if (embeddedDataSpecification.DataSpecificationOption.IsSet)
            {
                writer.WritePropertyName("dataSpecification");
                JsonSerializer.Serialize(writer, embeddedDataSpecification.DataSpecification, jsonSerializerOptions);
            }
            if (embeddedDataSpecification.DataSpecificationContentOption.IsSet)
            {
                writer.WritePropertyName("dataSpecificationContent");
                JsonSerializer.Serialize(writer, embeddedDataSpecification.DataSpecificationContent, jsonSerializerOptions);
            }
        }
    }
}
