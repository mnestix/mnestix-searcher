// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// LevelType
    /// </summary>
    public partial class LevelType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LevelType" /> class.
        /// </summary>
        /// <param name="min">min</param>
        /// <param name="max">max</param>
        /// <param name="nom">nom</param>
        /// <param name="typ">typ</param>
        [JsonConstructor]
        public LevelType(Option<bool?> min = default, Option<bool?> max = default, Option<bool?> nom = default, Option<bool?> typ = default)
        {
            MinOption = min;
            MaxOption = max;
            NomOption = nom;
            TypOption = typ;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Min
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MinOption { get; private set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [JsonPropertyName("min")]
        public bool? Min { get { return this.MinOption; } set { this.MinOption = new(value); } }

        /// <summary>
        /// Used to track the state of Max
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MaxOption { get; private set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [JsonPropertyName("max")]
        public bool? Max { get { return this.MaxOption; } set { this.MaxOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NomOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [JsonPropertyName("nom")]
        public bool? Nom { get { return this.NomOption; } set { this.NomOption = new(value); } }

        /// <summary>
        /// Used to track the state of Typ
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TypOption { get; private set; }

        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [JsonPropertyName("typ")]
        public bool? Typ { get { return this.TypOption; } set { this.TypOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LevelType {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LevelType" />
    /// </summary>
    public class LevelTypeJsonConverter : JsonConverter<LevelType>
    {
        /// <summary>
        /// Deserializes json to <see cref="LevelType" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LevelType Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> min = default;
            Option<bool?> max = default;
            Option<bool?> nom = default;
            Option<bool?> typ = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "min":
                            min = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "max":
                            max = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nom":
                            nom = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "typ":
                            typ = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (min.IsSet && min.Value == null)
                throw new ArgumentNullException(nameof(min), "Property is not nullable for class LevelType.");

            if (max.IsSet && max.Value == null)
                throw new ArgumentNullException(nameof(max), "Property is not nullable for class LevelType.");

            if (nom.IsSet && nom.Value == null)
                throw new ArgumentNullException(nameof(nom), "Property is not nullable for class LevelType.");

            if (typ.IsSet && typ.Value == null)
                throw new ArgumentNullException(nameof(typ), "Property is not nullable for class LevelType.");

            return new LevelType(min, max, nom, typ);
        }

        /// <summary>
        /// Serializes a <see cref="LevelType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="levelType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LevelType levelType, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, levelType, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LevelType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="levelType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LevelType levelType, JsonSerializerOptions jsonSerializerOptions)
        {
            if (levelType.MinOption.IsSet)
                writer.WriteBoolean("min", levelType.MinOption.Value!.Value);

            if (levelType.MaxOption.IsSet)
                writer.WriteBoolean("max", levelType.MaxOption.Value!.Value);

            if (levelType.NomOption.IsSet)
                writer.WriteBoolean("nom", levelType.NomOption.Value!.Value);

            if (levelType.TypOption.IsSet)
                writer.WriteBoolean("typ", levelType.TypOption.Value!.Value);
        }
    }
}
