// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Message
    /// </summary>
    public partial class Message : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp</param>
        /// <param name="text">text</param>
        /// <param name="correlationId">correlationId</param>
        /// <param name="code">code</param>
        /// <param name="messageType">messageType</param>
        [JsonConstructor]
        public Message(Option<string?> timestamp = default, Option<string?> text = default, Option<string?> correlationId = default, Option<string?> code = default, Option<MessageTypeEnum?> messageType = default)
        {
            TimestampOption = timestamp;
            TextOption = text;
            CorrelationIdOption = correlationId;
            CodeOption = code;
            MessageTypeOption = messageType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines MessageType
        /// </summary>
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            ERROR = 1,

            /// <summary>
            /// Enum EXCEPTION for value: EXCEPTION
            /// </summary>
            EXCEPTION = 2,

            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            INFO = 3,

            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            WARNING = 4
        }

        /// <summary>
        /// Returns a <see cref="MessageTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MessageTypeEnum MessageTypeEnumFromString(string value)
        {
            if (value.Equals("ERROR"))
                return MessageTypeEnum.ERROR;

            if (value.Equals("EXCEPTION"))
                return MessageTypeEnum.EXCEPTION;

            if (value.Equals("INFO"))
                return MessageTypeEnum.INFO;

            if (value.Equals("WARNING"))
                return MessageTypeEnum.WARNING;

            throw new NotImplementedException($"Could not convert value to type MessageTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MessageTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MessageTypeEnum? MessageTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ERROR"))
                return MessageTypeEnum.ERROR;

            if (value.Equals("EXCEPTION"))
                return MessageTypeEnum.EXCEPTION;

            if (value.Equals("INFO"))
                return MessageTypeEnum.INFO;

            if (value.Equals("WARNING"))
                return MessageTypeEnum.WARNING;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MessageTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MessageTypeEnumToJsonValue(MessageTypeEnum? value)
        {
            if (value == MessageTypeEnum.ERROR)
                return "ERROR";

            if (value == MessageTypeEnum.EXCEPTION)
                return "EXCEPTION";

            if (value == MessageTypeEnum.INFO)
                return "INFO";

            if (value == MessageTypeEnum.WARNING)
                return "WARNING";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of MessageType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MessageTypeEnum?> MessageTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [JsonPropertyName("messageType")]
        public MessageTypeEnum? MessageType { get { return this.MessageTypeOption; } set { this.MessageTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public string? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of CorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CorrelationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [JsonPropertyName("correlationId")]
        public string? CorrelationId { get { return this.CorrelationIdOption; } set { this.CorrelationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Message" />
    /// </summary>
    public class MessageJsonConverter : JsonConverter<Message>
    {
        /// <summary>
        /// Deserializes json to <see cref="Message" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Message Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> timestamp = default;
            Option<string?> text = default;
            Option<string?> correlationId = default;
            Option<string?> code = default;
            Option<Message.MessageTypeEnum?> messageType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "timestamp":
                            timestamp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "correlationId":
                            correlationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "messageType":
                            string? messageTypeRawValue = utf8JsonReader.GetString();
                            if (messageTypeRawValue != null)
                                messageType = new Option<Message.MessageTypeEnum?>(Message.MessageTypeEnumFromStringOrDefault(messageTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class Message.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class Message.");

            if (correlationId.IsSet && correlationId.Value == null)
                throw new ArgumentNullException(nameof(correlationId), "Property is not nullable for class Message.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class Message.");

            if (messageType.IsSet && messageType.Value == null)
                throw new ArgumentNullException(nameof(messageType), "Property is not nullable for class Message.");

            return new Message(timestamp, text, correlationId, code, messageType);
        }

        /// <summary>
        /// Serializes a <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, message, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            if (message.TimestampOption.IsSet && message.Timestamp == null)
                throw new ArgumentNullException(nameof(message.Timestamp), "Property is required for class Message.");

            if (message.TextOption.IsSet && message.Text == null)
                throw new ArgumentNullException(nameof(message.Text), "Property is required for class Message.");

            if (message.CorrelationIdOption.IsSet && message.CorrelationId == null)
                throw new ArgumentNullException(nameof(message.CorrelationId), "Property is required for class Message.");

            if (message.CodeOption.IsSet && message.Code == null)
                throw new ArgumentNullException(nameof(message.Code), "Property is required for class Message.");

            if (message.TimestampOption.IsSet)
                writer.WriteString("timestamp", message.Timestamp);

            if (message.TextOption.IsSet)
                writer.WriteString("text", message.Text);

            if (message.CorrelationIdOption.IsSet)
                writer.WriteString("correlationId", message.CorrelationId);

            if (message.CodeOption.IsSet)
                writer.WriteString("code", message.Code);

            var messageTypeRawValue = Message.MessageTypeEnumToJsonValue(message.MessageTypeOption.Value!.Value);
            writer.WriteString("messageType", messageTypeRawValue);
        }
    }
}
