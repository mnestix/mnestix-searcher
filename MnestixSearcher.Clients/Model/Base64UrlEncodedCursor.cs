// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Base64UrlEncodedCursor
    /// </summary>
    public partial class Base64UrlEncodedCursor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Base64UrlEncodedCursor" /> class.
        /// </summary>
        /// <param name="encodedCursor">encodedCursor</param>
        /// <param name="decodedCursor">decodedCursor</param>
        [JsonConstructor]
        public Base64UrlEncodedCursor(Option<string?> encodedCursor = default, Option<string?> decodedCursor = default)
        {
            EncodedCursorOption = encodedCursor;
            DecodedCursorOption = decodedCursor;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EncodedCursor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncodedCursorOption { get; private set; }

        /// <summary>
        /// Gets or Sets EncodedCursor
        /// </summary>
        [JsonPropertyName("encodedCursor")]
        public string? EncodedCursor { get { return this.EncodedCursorOption; } set { this.EncodedCursorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DecodedCursor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DecodedCursorOption { get; private set; }

        /// <summary>
        /// Gets or Sets DecodedCursor
        /// </summary>
        [JsonPropertyName("decodedCursor")]
        public string? DecodedCursor { get { return this.DecodedCursorOption; } set { this.DecodedCursorOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Base64UrlEncodedCursor {\n");
            sb.Append("  EncodedCursor: ").Append(EncodedCursor).Append("\n");
            sb.Append("  DecodedCursor: ").Append(DecodedCursor).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Base64UrlEncodedCursor" />
    /// </summary>
    public class Base64UrlEncodedCursorJsonConverter : JsonConverter<Base64UrlEncodedCursor>
    {
        /// <summary>
        /// Deserializes json to <see cref="Base64UrlEncodedCursor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Base64UrlEncodedCursor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> encodedCursor = default;
            Option<string?> decodedCursor = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "encodedCursor":
                            encodedCursor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "decodedCursor":
                            decodedCursor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (encodedCursor.IsSet && encodedCursor.Value == null)
                throw new ArgumentNullException(nameof(encodedCursor), "Property is not nullable for class Base64UrlEncodedCursor.");

            if (decodedCursor.IsSet && decodedCursor.Value == null)
                throw new ArgumentNullException(nameof(decodedCursor), "Property is not nullable for class Base64UrlEncodedCursor.");

            return new Base64UrlEncodedCursor(encodedCursor, decodedCursor);
        }

        /// <summary>
        /// Serializes a <see cref="Base64UrlEncodedCursor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="base64UrlEncodedCursor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Base64UrlEncodedCursor base64UrlEncodedCursor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, base64UrlEncodedCursor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Base64UrlEncodedCursor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="base64UrlEncodedCursor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Base64UrlEncodedCursor base64UrlEncodedCursor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (base64UrlEncodedCursor.EncodedCursorOption.IsSet && base64UrlEncodedCursor.EncodedCursor == null)
                throw new ArgumentNullException(nameof(base64UrlEncodedCursor.EncodedCursor), "Property is required for class Base64UrlEncodedCursor.");

            if (base64UrlEncodedCursor.DecodedCursorOption.IsSet && base64UrlEncodedCursor.DecodedCursor == null)
                throw new ArgumentNullException(nameof(base64UrlEncodedCursor.DecodedCursor), "Property is required for class Base64UrlEncodedCursor.");

            if (base64UrlEncodedCursor.EncodedCursorOption.IsSet)
                writer.WriteString("encodedCursor", base64UrlEncodedCursor.EncodedCursor);

            if (base64UrlEncodedCursor.DecodedCursorOption.IsSet)
                writer.WriteString("decodedCursor", base64UrlEncodedCursor.DecodedCursor);
        }
    }
}
