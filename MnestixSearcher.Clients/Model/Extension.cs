// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Extension
    /// </summary>
    public partial class Extension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Extension" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="value">value</param>
        /// <param name="valueType">valueType</param>
        /// <param name="refersTo">refersTo</param>
        /// <param name="semanticId">semanticId</param>
        /// <param name="supplementalSemanticIds">supplementalSemanticIds</param>
        [JsonConstructor]
        public Extension(Option<string?> name = default, Option<string?> value = default, Option<ValueTypeEnum?> valueType = default, Option<List<Reference>?> refersTo = default, Option<Reference?> semanticId = default, Option<List<Reference>?> supplementalSemanticIds = default)
        {
            NameOption = name;
            ValueOption = value;
            ValueTypeOption = valueType;
            RefersToOption = refersTo;
            SemanticIdOption = semanticId;
            SupplementalSemanticIdsOption = supplementalSemanticIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ValueType
        /// </summary>
        public enum ValueTypeEnum
        {
            /// <summary>
            /// Enum ANYURI for value: ANY_URI
            /// </summary>
            ANYURI = 1,

            /// <summary>
            /// Enum BASE64BINARY for value: BASE64BINARY
            /// </summary>
            BASE64BINARY = 2,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            BOOLEAN = 3,

            /// <summary>
            /// Enum BYTE for value: BYTE
            /// </summary>
            BYTE = 4,

            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            DATE = 5,

            /// <summary>
            /// Enum DATETIME for value: DATE_TIME
            /// </summary>
            DATETIME = 6,

            /// <summary>
            /// Enum DECIMAL for value: DECIMAL
            /// </summary>
            DECIMAL = 7,

            /// <summary>
            /// Enum DOUBLE for value: DOUBLE
            /// </summary>
            DOUBLE = 8,

            /// <summary>
            /// Enum DURATION for value: DURATION
            /// </summary>
            DURATION = 9,

            /// <summary>
            /// Enum FLOAT for value: FLOAT
            /// </summary>
            FLOAT = 10,

            /// <summary>
            /// Enum GDAY for value: GDAY
            /// </summary>
            GDAY = 11,

            /// <summary>
            /// Enum GMONTH for value: GMONTH
            /// </summary>
            GMONTH = 12,

            /// <summary>
            /// Enum GMONTHDAY for value: GMONTH_DAY
            /// </summary>
            GMONTHDAY = 13,

            /// <summary>
            /// Enum GYEAR for value: GYEAR
            /// </summary>
            GYEAR = 14,

            /// <summary>
            /// Enum GYEARMONTH for value: GYEAR_MONTH
            /// </summary>
            GYEARMONTH = 15,

            /// <summary>
            /// Enum HEXBINARY for value: HEX_BINARY
            /// </summary>
            HEXBINARY = 16,

            /// <summary>
            /// Enum INT for value: INT
            /// </summary>
            INT = 17,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            INTEGER = 18,

            /// <summary>
            /// Enum LONG for value: LONG
            /// </summary>
            LONG = 19,

            /// <summary>
            /// Enum NEGATIVEINTEGER for value: NEGATIVE_INTEGER
            /// </summary>
            NEGATIVEINTEGER = 20,

            /// <summary>
            /// Enum NONNEGATIVEINTEGER for value: NON_NEGATIVE_INTEGER
            /// </summary>
            NONNEGATIVEINTEGER = 21,

            /// <summary>
            /// Enum NONPOSITIVEINTEGER for value: NON_POSITIVE_INTEGER
            /// </summary>
            NONPOSITIVEINTEGER = 22,

            /// <summary>
            /// Enum POSITIVEINTEGER for value: POSITIVE_INTEGER
            /// </summary>
            POSITIVEINTEGER = 23,

            /// <summary>
            /// Enum SHORT for value: SHORT
            /// </summary>
            SHORT = 24,

            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            STRING = 25,

            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            TIME = 26,

            /// <summary>
            /// Enum UNSIGNEDBYTE for value: UNSIGNED_BYTE
            /// </summary>
            UNSIGNEDBYTE = 27,

            /// <summary>
            /// Enum UNSIGNEDINT for value: UNSIGNED_INT
            /// </summary>
            UNSIGNEDINT = 28,

            /// <summary>
            /// Enum UNSIGNEDLONG for value: UNSIGNED_LONG
            /// </summary>
            UNSIGNEDLONG = 29,

            /// <summary>
            /// Enum UNSIGNEDSHORT for value: UNSIGNED_SHORT
            /// </summary>
            UNSIGNEDSHORT = 30
        }

        /// <summary>
        /// Returns a <see cref="ValueTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ValueTypeEnum ValueTypeEnumFromString(string value)
        {
            if (value.Equals("ANY_URI"))
                return ValueTypeEnum.ANYURI;

            if (value.Equals("BASE64BINARY"))
                return ValueTypeEnum.BASE64BINARY;

            if (value.Equals("BOOLEAN"))
                return ValueTypeEnum.BOOLEAN;

            if (value.Equals("BYTE"))
                return ValueTypeEnum.BYTE;

            if (value.Equals("DATE"))
                return ValueTypeEnum.DATE;

            if (value.Equals("DATE_TIME"))
                return ValueTypeEnum.DATETIME;

            if (value.Equals("DECIMAL"))
                return ValueTypeEnum.DECIMAL;

            if (value.Equals("DOUBLE"))
                return ValueTypeEnum.DOUBLE;

            if (value.Equals("DURATION"))
                return ValueTypeEnum.DURATION;

            if (value.Equals("FLOAT"))
                return ValueTypeEnum.FLOAT;

            if (value.Equals("GDAY"))
                return ValueTypeEnum.GDAY;

            if (value.Equals("GMONTH"))
                return ValueTypeEnum.GMONTH;

            if (value.Equals("GMONTH_DAY"))
                return ValueTypeEnum.GMONTHDAY;

            if (value.Equals("GYEAR"))
                return ValueTypeEnum.GYEAR;

            if (value.Equals("GYEAR_MONTH"))
                return ValueTypeEnum.GYEARMONTH;

            if (value.Equals("HEX_BINARY"))
                return ValueTypeEnum.HEXBINARY;

            if (value.Equals("INT"))
                return ValueTypeEnum.INT;

            if (value.Equals("INTEGER"))
                return ValueTypeEnum.INTEGER;

            if (value.Equals("LONG"))
                return ValueTypeEnum.LONG;

            if (value.Equals("NEGATIVE_INTEGER"))
                return ValueTypeEnum.NEGATIVEINTEGER;

            if (value.Equals("NON_NEGATIVE_INTEGER"))
                return ValueTypeEnum.NONNEGATIVEINTEGER;

            if (value.Equals("NON_POSITIVE_INTEGER"))
                return ValueTypeEnum.NONPOSITIVEINTEGER;

            if (value.Equals("POSITIVE_INTEGER"))
                return ValueTypeEnum.POSITIVEINTEGER;

            if (value.Equals("SHORT"))
                return ValueTypeEnum.SHORT;

            if (value.Equals("STRING"))
                return ValueTypeEnum.STRING;

            if (value.Equals("TIME"))
                return ValueTypeEnum.TIME;

            if (value.Equals("UNSIGNED_BYTE"))
                return ValueTypeEnum.UNSIGNEDBYTE;

            if (value.Equals("UNSIGNED_INT"))
                return ValueTypeEnum.UNSIGNEDINT;

            if (value.Equals("UNSIGNED_LONG"))
                return ValueTypeEnum.UNSIGNEDLONG;

            if (value.Equals("UNSIGNED_SHORT"))
                return ValueTypeEnum.UNSIGNEDSHORT;

            throw new NotImplementedException($"Could not convert value to type ValueTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ValueTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValueTypeEnum? ValueTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ANY_URI"))
                return ValueTypeEnum.ANYURI;

            if (value.Equals("BASE64BINARY"))
                return ValueTypeEnum.BASE64BINARY;

            if (value.Equals("BOOLEAN"))
                return ValueTypeEnum.BOOLEAN;

            if (value.Equals("BYTE"))
                return ValueTypeEnum.BYTE;

            if (value.Equals("DATE"))
                return ValueTypeEnum.DATE;

            if (value.Equals("DATE_TIME"))
                return ValueTypeEnum.DATETIME;

            if (value.Equals("DECIMAL"))
                return ValueTypeEnum.DECIMAL;

            if (value.Equals("DOUBLE"))
                return ValueTypeEnum.DOUBLE;

            if (value.Equals("DURATION"))
                return ValueTypeEnum.DURATION;

            if (value.Equals("FLOAT"))
                return ValueTypeEnum.FLOAT;

            if (value.Equals("GDAY"))
                return ValueTypeEnum.GDAY;

            if (value.Equals("GMONTH"))
                return ValueTypeEnum.GMONTH;

            if (value.Equals("GMONTH_DAY"))
                return ValueTypeEnum.GMONTHDAY;

            if (value.Equals("GYEAR"))
                return ValueTypeEnum.GYEAR;

            if (value.Equals("GYEAR_MONTH"))
                return ValueTypeEnum.GYEARMONTH;

            if (value.Equals("HEX_BINARY"))
                return ValueTypeEnum.HEXBINARY;

            if (value.Equals("INT"))
                return ValueTypeEnum.INT;

            if (value.Equals("INTEGER"))
                return ValueTypeEnum.INTEGER;

            if (value.Equals("LONG"))
                return ValueTypeEnum.LONG;

            if (value.Equals("NEGATIVE_INTEGER"))
                return ValueTypeEnum.NEGATIVEINTEGER;

            if (value.Equals("NON_NEGATIVE_INTEGER"))
                return ValueTypeEnum.NONNEGATIVEINTEGER;

            if (value.Equals("NON_POSITIVE_INTEGER"))
                return ValueTypeEnum.NONPOSITIVEINTEGER;

            if (value.Equals("POSITIVE_INTEGER"))
                return ValueTypeEnum.POSITIVEINTEGER;

            if (value.Equals("SHORT"))
                return ValueTypeEnum.SHORT;

            if (value.Equals("STRING"))
                return ValueTypeEnum.STRING;

            if (value.Equals("TIME"))
                return ValueTypeEnum.TIME;

            if (value.Equals("UNSIGNED_BYTE"))
                return ValueTypeEnum.UNSIGNEDBYTE;

            if (value.Equals("UNSIGNED_INT"))
                return ValueTypeEnum.UNSIGNEDINT;

            if (value.Equals("UNSIGNED_LONG"))
                return ValueTypeEnum.UNSIGNEDLONG;

            if (value.Equals("UNSIGNED_SHORT"))
                return ValueTypeEnum.UNSIGNEDSHORT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ValueTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ValueTypeEnumToJsonValue(ValueTypeEnum? value)
        {
            if (value == ValueTypeEnum.ANYURI)
                return "ANY_URI";

            if (value == ValueTypeEnum.BASE64BINARY)
                return "BASE64BINARY";

            if (value == ValueTypeEnum.BOOLEAN)
                return "BOOLEAN";

            if (value == ValueTypeEnum.BYTE)
                return "BYTE";

            if (value == ValueTypeEnum.DATE)
                return "DATE";

            if (value == ValueTypeEnum.DATETIME)
                return "DATE_TIME";

            if (value == ValueTypeEnum.DECIMAL)
                return "DECIMAL";

            if (value == ValueTypeEnum.DOUBLE)
                return "DOUBLE";

            if (value == ValueTypeEnum.DURATION)
                return "DURATION";

            if (value == ValueTypeEnum.FLOAT)
                return "FLOAT";

            if (value == ValueTypeEnum.GDAY)
                return "GDAY";

            if (value == ValueTypeEnum.GMONTH)
                return "GMONTH";

            if (value == ValueTypeEnum.GMONTHDAY)
                return "GMONTH_DAY";

            if (value == ValueTypeEnum.GYEAR)
                return "GYEAR";

            if (value == ValueTypeEnum.GYEARMONTH)
                return "GYEAR_MONTH";

            if (value == ValueTypeEnum.HEXBINARY)
                return "HEX_BINARY";

            if (value == ValueTypeEnum.INT)
                return "INT";

            if (value == ValueTypeEnum.INTEGER)
                return "INTEGER";

            if (value == ValueTypeEnum.LONG)
                return "LONG";

            if (value == ValueTypeEnum.NEGATIVEINTEGER)
                return "NEGATIVE_INTEGER";

            if (value == ValueTypeEnum.NONNEGATIVEINTEGER)
                return "NON_NEGATIVE_INTEGER";

            if (value == ValueTypeEnum.NONPOSITIVEINTEGER)
                return "NON_POSITIVE_INTEGER";

            if (value == ValueTypeEnum.POSITIVEINTEGER)
                return "POSITIVE_INTEGER";

            if (value == ValueTypeEnum.SHORT)
                return "SHORT";

            if (value == ValueTypeEnum.STRING)
                return "STRING";

            if (value == ValueTypeEnum.TIME)
                return "TIME";

            if (value == ValueTypeEnum.UNSIGNEDBYTE)
                return "UNSIGNED_BYTE";

            if (value == ValueTypeEnum.UNSIGNEDINT)
                return "UNSIGNED_INT";

            if (value == ValueTypeEnum.UNSIGNEDLONG)
                return "UNSIGNED_LONG";

            if (value == ValueTypeEnum.UNSIGNEDSHORT)
                return "UNSIGNED_SHORT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ValueType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ValueTypeEnum?> ValueTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValueType
        /// </summary>
        [JsonPropertyName("valueType")]
        public ValueTypeEnum? ValueType { get { return this.ValueTypeOption; } set { this.ValueTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefersTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> RefersToOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefersTo
        /// </summary>
        [JsonPropertyName("refersTo")]
        public List<Reference>? RefersTo { get { return this.RefersToOption; } set { this.RefersToOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        [JsonPropertyName("semanticId")]
        public Reference? SemanticId { get { return this.SemanticIdOption; } set { this.SemanticIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalSemanticIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> SupplementalSemanticIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticIds
        /// </summary>
        [JsonPropertyName("supplementalSemanticIds")]
        public List<Reference>? SupplementalSemanticIds { get { return this.SupplementalSemanticIdsOption; } set { this.SupplementalSemanticIdsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Extension {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("  RefersTo: ").Append(RefersTo).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticIds: ").Append(SupplementalSemanticIds).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Extension" />
    /// </summary>
    public class ExtensionJsonConverter : JsonConverter<Extension>
    {
        /// <summary>
        /// Deserializes json to <see cref="Extension" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Extension Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> value = default;
            Option<Extension.ValueTypeEnum?> valueType = default;
            Option<List<Reference>?> refersTo = default;
            Option<Reference?> semanticId = default;
            Option<List<Reference>?> supplementalSemanticIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valueType":
                            string? valueTypeRawValue = utf8JsonReader.GetString();
                            if (valueTypeRawValue != null)
                                valueType = new Option<Extension.ValueTypeEnum?>(Extension.ValueTypeEnumFromStringOrDefault(valueTypeRawValue));
                            break;
                        case "refersTo":
                            refersTo = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticId":
                            semanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplementalSemanticIds":
                            supplementalSemanticIds = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Extension.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class Extension.");

            if (valueType.IsSet && valueType.Value == null)
                throw new ArgumentNullException(nameof(valueType), "Property is not nullable for class Extension.");

            if (refersTo.IsSet && refersTo.Value == null)
                throw new ArgumentNullException(nameof(refersTo), "Property is not nullable for class Extension.");

            if (semanticId.IsSet && semanticId.Value == null)
                throw new ArgumentNullException(nameof(semanticId), "Property is not nullable for class Extension.");

            if (supplementalSemanticIds.IsSet && supplementalSemanticIds.Value == null)
                throw new ArgumentNullException(nameof(supplementalSemanticIds), "Property is not nullable for class Extension.");

            return new Extension(name, value, valueType, refersTo, semanticId, supplementalSemanticIds);
        }

        /// <summary>
        /// Serializes a <see cref="Extension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Extension extension, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extension, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Extension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Extension extension, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extension.NameOption.IsSet && extension.Name == null)
                throw new ArgumentNullException(nameof(extension.Name), "Property is required for class Extension.");

            if (extension.ValueOption.IsSet && extension.Value == null)
                throw new ArgumentNullException(nameof(extension.Value), "Property is required for class Extension.");

            if (extension.RefersToOption.IsSet && extension.RefersTo == null)
                throw new ArgumentNullException(nameof(extension.RefersTo), "Property is required for class Extension.");

            if (extension.SemanticIdOption.IsSet && extension.SemanticId == null)
                throw new ArgumentNullException(nameof(extension.SemanticId), "Property is required for class Extension.");

            if (extension.SupplementalSemanticIdsOption.IsSet && extension.SupplementalSemanticIds == null)
                throw new ArgumentNullException(nameof(extension.SupplementalSemanticIds), "Property is required for class Extension.");

            if (extension.NameOption.IsSet)
                writer.WriteString("name", extension.Name);

            if (extension.ValueOption.IsSet)
                writer.WriteString("value", extension.Value);

            var valueTypeRawValue = Extension.ValueTypeEnumToJsonValue(extension.ValueTypeOption.Value!.Value);
            writer.WriteString("valueType", valueTypeRawValue);
            if (extension.RefersToOption.IsSet)
            {
                writer.WritePropertyName("refersTo");
                JsonSerializer.Serialize(writer, extension.RefersTo, jsonSerializerOptions);
            }
            if (extension.SemanticIdOption.IsSet)
            {
                writer.WritePropertyName("semanticId");
                JsonSerializer.Serialize(writer, extension.SemanticId, jsonSerializerOptions);
            }
            if (extension.SupplementalSemanticIdsOption.IsSet)
            {
                writer.WritePropertyName("supplementalSemanticIds");
                JsonSerializer.Serialize(writer, extension.SupplementalSemanticIds, jsonSerializerOptions);
            }
        }
    }
}
