// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// SpecificAssetId
    /// </summary>
    public partial class SpecificAssetId : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificAssetId" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="value">value</param>
        /// <param name="externalSubjectId">externalSubjectId</param>
        /// <param name="semanticId">semanticId</param>
        /// <param name="supplementalSemanticIds">supplementalSemanticIds</param>
        [JsonConstructor]
        public SpecificAssetId(Option<string?> name = default, Option<string?> value = default, Option<Reference?> externalSubjectId = default, Option<Reference?> semanticId = default, Option<List<Reference>?> supplementalSemanticIds = default)
        {
            NameOption = name;
            ValueOption = value;
            ExternalSubjectIdOption = externalSubjectId;
            SemanticIdOption = semanticId;
            SupplementalSemanticIdsOption = supplementalSemanticIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalSubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> ExternalSubjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalSubjectId
        /// </summary>
        [JsonPropertyName("externalSubjectId")]
        public Reference? ExternalSubjectId { get { return this.ExternalSubjectIdOption; } set { this.ExternalSubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        [JsonPropertyName("semanticId")]
        public Reference? SemanticId { get { return this.SemanticIdOption; } set { this.SemanticIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalSemanticIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> SupplementalSemanticIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticIds
        /// </summary>
        [JsonPropertyName("supplementalSemanticIds")]
        public List<Reference>? SupplementalSemanticIds { get { return this.SupplementalSemanticIdsOption; } set { this.SupplementalSemanticIdsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecificAssetId {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ExternalSubjectId: ").Append(ExternalSubjectId).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticIds: ").Append(SupplementalSemanticIds).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SpecificAssetId" />
    /// </summary>
    public class SpecificAssetIdJsonConverter : JsonConverter<SpecificAssetId>
    {
        /// <summary>
        /// Deserializes json to <see cref="SpecificAssetId" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SpecificAssetId Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> value = default;
            Option<Reference?> externalSubjectId = default;
            Option<Reference?> semanticId = default;
            Option<List<Reference>?> supplementalSemanticIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "externalSubjectId":
                            externalSubjectId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticId":
                            semanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplementalSemanticIds":
                            supplementalSemanticIds = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SpecificAssetId.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class SpecificAssetId.");

            if (externalSubjectId.IsSet && externalSubjectId.Value == null)
                throw new ArgumentNullException(nameof(externalSubjectId), "Property is not nullable for class SpecificAssetId.");

            if (semanticId.IsSet && semanticId.Value == null)
                throw new ArgumentNullException(nameof(semanticId), "Property is not nullable for class SpecificAssetId.");

            if (supplementalSemanticIds.IsSet && supplementalSemanticIds.Value == null)
                throw new ArgumentNullException(nameof(supplementalSemanticIds), "Property is not nullable for class SpecificAssetId.");

            return new SpecificAssetId(name, value, externalSubjectId, semanticId, supplementalSemanticIds);
        }

        /// <summary>
        /// Serializes a <see cref="SpecificAssetId" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specificAssetId"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SpecificAssetId specificAssetId, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, specificAssetId, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SpecificAssetId" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specificAssetId"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SpecificAssetId specificAssetId, JsonSerializerOptions jsonSerializerOptions)
        {
            if (specificAssetId.NameOption.IsSet && specificAssetId.Name == null)
                throw new ArgumentNullException(nameof(specificAssetId.Name), "Property is required for class SpecificAssetId.");

            if (specificAssetId.ValueOption.IsSet && specificAssetId.Value == null)
                throw new ArgumentNullException(nameof(specificAssetId.Value), "Property is required for class SpecificAssetId.");

            if (specificAssetId.ExternalSubjectIdOption.IsSet && specificAssetId.ExternalSubjectId == null)
                throw new ArgumentNullException(nameof(specificAssetId.ExternalSubjectId), "Property is required for class SpecificAssetId.");

            if (specificAssetId.SemanticIdOption.IsSet && specificAssetId.SemanticId == null)
                throw new ArgumentNullException(nameof(specificAssetId.SemanticId), "Property is required for class SpecificAssetId.");

            if (specificAssetId.SupplementalSemanticIdsOption.IsSet && specificAssetId.SupplementalSemanticIds == null)
                throw new ArgumentNullException(nameof(specificAssetId.SupplementalSemanticIds), "Property is required for class SpecificAssetId.");

            if (specificAssetId.NameOption.IsSet)
                writer.WriteString("name", specificAssetId.Name);

            if (specificAssetId.ValueOption.IsSet)
                writer.WriteString("value", specificAssetId.Value);

            if (specificAssetId.ExternalSubjectIdOption.IsSet)
            {
                writer.WritePropertyName("externalSubjectId");
                JsonSerializer.Serialize(writer, specificAssetId.ExternalSubjectId, jsonSerializerOptions);
            }
            if (specificAssetId.SemanticIdOption.IsSet)
            {
                writer.WritePropertyName("semanticId");
                JsonSerializer.Serialize(writer, specificAssetId.SemanticId, jsonSerializerOptions);
            }
            if (specificAssetId.SupplementalSemanticIdsOption.IsSet)
            {
                writer.WritePropertyName("supplementalSemanticIds");
                JsonSerializer.Serialize(writer, specificAssetId.SupplementalSemanticIds, jsonSerializerOptions);
            }
        }
    }
}
