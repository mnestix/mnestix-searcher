// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// AssetInformation
    /// </summary>
    public partial class AssetInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetInformation" /> class.
        /// </summary>
        /// <param name="assetKind">assetKind</param>
        /// <param name="globalAssetId">globalAssetId</param>
        /// <param name="specificAssetIds">specificAssetIds</param>
        /// <param name="assetType">assetType</param>
        /// <param name="defaultThumbnail">defaultThumbnail</param>
        [JsonConstructor]
        public AssetInformation(Option<AssetKindEnum?> assetKind = default, Option<string?> globalAssetId = default, Option<List<SpecificAssetId>?> specificAssetIds = default, Option<string?> assetType = default, Option<Resource?> defaultThumbnail = default)
        {
            AssetKindOption = assetKind;
            GlobalAssetIdOption = globalAssetId;
            SpecificAssetIdsOption = specificAssetIds;
            AssetTypeOption = assetType;
            DefaultThumbnailOption = defaultThumbnail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines AssetKind
        /// </summary>
        public enum AssetKindEnum
        {
            /// <summary>
            /// Enum INSTANCE for value: INSTANCE
            /// </summary>
            INSTANCE = 1,

            /// <summary>
            /// Enum NOTAPPLICABLE for value: NOT_APPLICABLE
            /// </summary>
            NOTAPPLICABLE = 2,

            /// <summary>
            /// Enum TYPE for value: TYPE
            /// </summary>
            TYPE = 3
        }

        /// <summary>
        /// Returns a <see cref="AssetKindEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AssetKindEnum AssetKindEnumFromString(string value)
        {
            if (value.Equals("INSTANCE"))
                return AssetKindEnum.INSTANCE;

            if (value.Equals("NOT_APPLICABLE"))
                return AssetKindEnum.NOTAPPLICABLE;

            if (value.Equals("TYPE"))
                return AssetKindEnum.TYPE;

            throw new NotImplementedException($"Could not convert value to type AssetKindEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AssetKindEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetKindEnum? AssetKindEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INSTANCE"))
                return AssetKindEnum.INSTANCE;

            if (value.Equals("NOT_APPLICABLE"))
                return AssetKindEnum.NOTAPPLICABLE;

            if (value.Equals("TYPE"))
                return AssetKindEnum.TYPE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetKindEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AssetKindEnumToJsonValue(AssetKindEnum? value)
        {
            if (value == AssetKindEnum.INSTANCE)
                return "INSTANCE";

            if (value == AssetKindEnum.NOTAPPLICABLE)
                return "NOT_APPLICABLE";

            if (value == AssetKindEnum.TYPE)
                return "TYPE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AssetKind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetKindEnum?> AssetKindOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetKind
        /// </summary>
        [JsonPropertyName("assetKind")]
        public AssetKindEnum? AssetKind { get { return this.AssetKindOption; } set { this.AssetKindOption = new(value); } }

        /// <summary>
        /// Used to track the state of GlobalAssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GlobalAssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets GlobalAssetId
        /// </summary>
        [JsonPropertyName("globalAssetId")]
        public string? GlobalAssetId { get { return this.GlobalAssetIdOption; } set { this.GlobalAssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecificAssetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecificAssetId>?> SpecificAssetIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpecificAssetIds
        /// </summary>
        [JsonPropertyName("specificAssetIds")]
        public List<SpecificAssetId>? SpecificAssetIds { get { return this.SpecificAssetIdsOption; } set { this.SpecificAssetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [JsonPropertyName("assetType")]
        public string? AssetType { get { return this.AssetTypeOption; } set { this.AssetTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DefaultThumbnail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Resource?> DefaultThumbnailOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultThumbnail
        /// </summary>
        [JsonPropertyName("defaultThumbnail")]
        public Resource? DefaultThumbnail { get { return this.DefaultThumbnailOption; } set { this.DefaultThumbnailOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetInformation {\n");
            sb.Append("  AssetKind: ").Append(AssetKind).Append("\n");
            sb.Append("  GlobalAssetId: ").Append(GlobalAssetId).Append("\n");
            sb.Append("  SpecificAssetIds: ").Append(SpecificAssetIds).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  DefaultThumbnail: ").Append(DefaultThumbnail).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetInformation" />
    /// </summary>
    public class AssetInformationJsonConverter : JsonConverter<AssetInformation>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetInformation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetInformation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AssetInformation.AssetKindEnum?> assetKind = default;
            Option<string?> globalAssetId = default;
            Option<List<SpecificAssetId>?> specificAssetIds = default;
            Option<string?> assetType = default;
            Option<Resource?> defaultThumbnail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetKind":
                            string? assetKindRawValue = utf8JsonReader.GetString();
                            if (assetKindRawValue != null)
                                assetKind = new Option<AssetInformation.AssetKindEnum?>(AssetInformation.AssetKindEnumFromStringOrDefault(assetKindRawValue));
                            break;
                        case "globalAssetId":
                            globalAssetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "specificAssetIds":
                            specificAssetIds = new Option<List<SpecificAssetId>?>(JsonSerializer.Deserialize<List<SpecificAssetId>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assetType":
                            assetType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "defaultThumbnail":
                            defaultThumbnail = new Option<Resource?>(JsonSerializer.Deserialize<Resource>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assetKind.IsSet && assetKind.Value == null)
                throw new ArgumentNullException(nameof(assetKind), "Property is not nullable for class AssetInformation.");

            if (globalAssetId.IsSet && globalAssetId.Value == null)
                throw new ArgumentNullException(nameof(globalAssetId), "Property is not nullable for class AssetInformation.");

            if (specificAssetIds.IsSet && specificAssetIds.Value == null)
                throw new ArgumentNullException(nameof(specificAssetIds), "Property is not nullable for class AssetInformation.");

            if (assetType.IsSet && assetType.Value == null)
                throw new ArgumentNullException(nameof(assetType), "Property is not nullable for class AssetInformation.");

            if (defaultThumbnail.IsSet && defaultThumbnail.Value == null)
                throw new ArgumentNullException(nameof(defaultThumbnail), "Property is not nullable for class AssetInformation.");

            return new AssetInformation(assetKind, globalAssetId, specificAssetIds, assetType, defaultThumbnail);
        }

        /// <summary>
        /// Serializes a <see cref="AssetInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetInformation assetInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetInformation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetInformation assetInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assetInformation.GlobalAssetIdOption.IsSet && assetInformation.GlobalAssetId == null)
                throw new ArgumentNullException(nameof(assetInformation.GlobalAssetId), "Property is required for class AssetInformation.");

            if (assetInformation.SpecificAssetIdsOption.IsSet && assetInformation.SpecificAssetIds == null)
                throw new ArgumentNullException(nameof(assetInformation.SpecificAssetIds), "Property is required for class AssetInformation.");

            if (assetInformation.AssetTypeOption.IsSet && assetInformation.AssetType == null)
                throw new ArgumentNullException(nameof(assetInformation.AssetType), "Property is required for class AssetInformation.");

            if (assetInformation.DefaultThumbnailOption.IsSet && assetInformation.DefaultThumbnail == null)
                throw new ArgumentNullException(nameof(assetInformation.DefaultThumbnail), "Property is required for class AssetInformation.");

            var assetKindRawValue = AssetInformation.AssetKindEnumToJsonValue(assetInformation.AssetKindOption.Value!.Value);
            writer.WriteString("assetKind", assetKindRawValue);
            if (assetInformation.GlobalAssetIdOption.IsSet)
                writer.WriteString("globalAssetId", assetInformation.GlobalAssetId);

            if (assetInformation.SpecificAssetIdsOption.IsSet)
            {
                writer.WritePropertyName("specificAssetIds");
                JsonSerializer.Serialize(writer, assetInformation.SpecificAssetIds, jsonSerializerOptions);
            }
            if (assetInformation.AssetTypeOption.IsSet)
                writer.WriteString("assetType", assetInformation.AssetType);

            if (assetInformation.DefaultThumbnailOption.IsSet)
            {
                writer.WritePropertyName("defaultThumbnail");
                JsonSerializer.Serialize(writer, assetInformation.DefaultThumbnail, jsonSerializerOptions);
            }
        }
    }
}
