// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// SubmodelElementList
    /// </summary>
    public partial class SubmodelElementList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementList" /> class.
        /// </summary>
        /// <param name="embeddedDataSpecifications">embeddedDataSpecifications</param>
        /// <param name="displayName">displayName</param>
        /// <param name="description">description</param>
        /// <param name="category">category</param>
        /// <param name="idShort">idShort</param>
        /// <param name="extensions">extensions</param>
        /// <param name="semanticId">semanticId</param>
        /// <param name="supplementalSemanticIds">supplementalSemanticIds</param>
        /// <param name="qualifiers">qualifiers</param>
        /// <param name="orderRelevant">orderRelevant</param>
        /// <param name="value">value</param>
        /// <param name="semanticIdListElement">semanticIdListElement</param>
        /// <param name="typeValueListElement">typeValueListElement</param>
        /// <param name="valueTypeListElement">valueTypeListElement</param>
        [JsonConstructor]
        public SubmodelElementList(Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default, Option<List<LangStringNameType>?> displayName = default, Option<List<LangStringTextType>?> description = default, Option<string?> category = default, Option<string?> idShort = default, Option<List<Extension>?> extensions = default, Option<Reference?> semanticId = default, Option<List<Reference>?> supplementalSemanticIds = default, Option<List<Qualifier>?> qualifiers = default, Option<bool?> orderRelevant = default, Option<List<SubmodelElementListAllOfValue>?> value = default, Option<Reference?> semanticIdListElement = default, Option<TypeValueListElementEnum?> typeValueListElement = default, Option<ValueTypeListElementEnum?> valueTypeListElement = default)
        {
            EmbeddedDataSpecificationsOption = embeddedDataSpecifications;
            DisplayNameOption = displayName;
            DescriptionOption = description;
            CategoryOption = category;
            IdShortOption = idShort;
            ExtensionsOption = extensions;
            SemanticIdOption = semanticId;
            SupplementalSemanticIdsOption = supplementalSemanticIds;
            QualifiersOption = qualifiers;
            OrderRelevantOption = orderRelevant;
            ValueOption = value;
            SemanticIdListElementOption = semanticIdListElement;
            TypeValueListElementOption = typeValueListElement;
            ValueTypeListElementOption = valueTypeListElement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines TypeValueListElement
        /// </summary>
        public enum TypeValueListElementEnum
        {
            /// <summary>
            /// Enum ANNOTATEDRELATIONSHIPELEMENT for value: ANNOTATED_RELATIONSHIP_ELEMENT
            /// </summary>
            ANNOTATEDRELATIONSHIPELEMENT = 1,

            /// <summary>
            /// Enum BASICEVENTELEMENT for value: BASIC_EVENT_ELEMENT
            /// </summary>
            BASICEVENTELEMENT = 2,

            /// <summary>
            /// Enum BLOB for value: BLOB
            /// </summary>
            BLOB = 3,

            /// <summary>
            /// Enum CAPABILITY for value: CAPABILITY
            /// </summary>
            CAPABILITY = 4,

            /// <summary>
            /// Enum DATAELEMENT for value: DATA_ELEMENT
            /// </summary>
            DATAELEMENT = 5,

            /// <summary>
            /// Enum ENTITY for value: ENTITY
            /// </summary>
            ENTITY = 6,

            /// <summary>
            /// Enum EVENTELEMENT for value: EVENT_ELEMENT
            /// </summary>
            EVENTELEMENT = 7,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            FILE = 8,

            /// <summary>
            /// Enum MULTILANGUAGEPROPERTY for value: MULTI_LANGUAGE_PROPERTY
            /// </summary>
            MULTILANGUAGEPROPERTY = 9,

            /// <summary>
            /// Enum OPERATION for value: OPERATION
            /// </summary>
            OPERATION = 10,

            /// <summary>
            /// Enum PROPERTY for value: PROPERTY
            /// </summary>
            PROPERTY = 11,

            /// <summary>
            /// Enum RANGE for value: RANGE
            /// </summary>
            RANGE = 12,

            /// <summary>
            /// Enum REFERENCEELEMENT for value: REFERENCE_ELEMENT
            /// </summary>
            REFERENCEELEMENT = 13,

            /// <summary>
            /// Enum RELATIONSHIPELEMENT for value: RELATIONSHIP_ELEMENT
            /// </summary>
            RELATIONSHIPELEMENT = 14,

            /// <summary>
            /// Enum SUBMODELELEMENT for value: SUBMODEL_ELEMENT
            /// </summary>
            SUBMODELELEMENT = 15,

            /// <summary>
            /// Enum SUBMODELELEMENTCOLLECTION for value: SUBMODEL_ELEMENT_COLLECTION
            /// </summary>
            SUBMODELELEMENTCOLLECTION = 16,

            /// <summary>
            /// Enum SUBMODELELEMENTLIST for value: SUBMODEL_ELEMENT_LIST
            /// </summary>
            SUBMODELELEMENTLIST = 17
        }

        /// <summary>
        /// Returns a <see cref="TypeValueListElementEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeValueListElementEnum TypeValueListElementEnumFromString(string value)
        {
            if (value.Equals("ANNOTATED_RELATIONSHIP_ELEMENT"))
                return TypeValueListElementEnum.ANNOTATEDRELATIONSHIPELEMENT;

            if (value.Equals("BASIC_EVENT_ELEMENT"))
                return TypeValueListElementEnum.BASICEVENTELEMENT;

            if (value.Equals("BLOB"))
                return TypeValueListElementEnum.BLOB;

            if (value.Equals("CAPABILITY"))
                return TypeValueListElementEnum.CAPABILITY;

            if (value.Equals("DATA_ELEMENT"))
                return TypeValueListElementEnum.DATAELEMENT;

            if (value.Equals("ENTITY"))
                return TypeValueListElementEnum.ENTITY;

            if (value.Equals("EVENT_ELEMENT"))
                return TypeValueListElementEnum.EVENTELEMENT;

            if (value.Equals("FILE"))
                return TypeValueListElementEnum.FILE;

            if (value.Equals("MULTI_LANGUAGE_PROPERTY"))
                return TypeValueListElementEnum.MULTILANGUAGEPROPERTY;

            if (value.Equals("OPERATION"))
                return TypeValueListElementEnum.OPERATION;

            if (value.Equals("PROPERTY"))
                return TypeValueListElementEnum.PROPERTY;

            if (value.Equals("RANGE"))
                return TypeValueListElementEnum.RANGE;

            if (value.Equals("REFERENCE_ELEMENT"))
                return TypeValueListElementEnum.REFERENCEELEMENT;

            if (value.Equals("RELATIONSHIP_ELEMENT"))
                return TypeValueListElementEnum.RELATIONSHIPELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT"))
                return TypeValueListElementEnum.SUBMODELELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT_COLLECTION"))
                return TypeValueListElementEnum.SUBMODELELEMENTCOLLECTION;

            if (value.Equals("SUBMODEL_ELEMENT_LIST"))
                return TypeValueListElementEnum.SUBMODELELEMENTLIST;

            throw new NotImplementedException($"Could not convert value to type TypeValueListElementEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeValueListElementEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeValueListElementEnum? TypeValueListElementEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ANNOTATED_RELATIONSHIP_ELEMENT"))
                return TypeValueListElementEnum.ANNOTATEDRELATIONSHIPELEMENT;

            if (value.Equals("BASIC_EVENT_ELEMENT"))
                return TypeValueListElementEnum.BASICEVENTELEMENT;

            if (value.Equals("BLOB"))
                return TypeValueListElementEnum.BLOB;

            if (value.Equals("CAPABILITY"))
                return TypeValueListElementEnum.CAPABILITY;

            if (value.Equals("DATA_ELEMENT"))
                return TypeValueListElementEnum.DATAELEMENT;

            if (value.Equals("ENTITY"))
                return TypeValueListElementEnum.ENTITY;

            if (value.Equals("EVENT_ELEMENT"))
                return TypeValueListElementEnum.EVENTELEMENT;

            if (value.Equals("FILE"))
                return TypeValueListElementEnum.FILE;

            if (value.Equals("MULTI_LANGUAGE_PROPERTY"))
                return TypeValueListElementEnum.MULTILANGUAGEPROPERTY;

            if (value.Equals("OPERATION"))
                return TypeValueListElementEnum.OPERATION;

            if (value.Equals("PROPERTY"))
                return TypeValueListElementEnum.PROPERTY;

            if (value.Equals("RANGE"))
                return TypeValueListElementEnum.RANGE;

            if (value.Equals("REFERENCE_ELEMENT"))
                return TypeValueListElementEnum.REFERENCEELEMENT;

            if (value.Equals("RELATIONSHIP_ELEMENT"))
                return TypeValueListElementEnum.RELATIONSHIPELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT"))
                return TypeValueListElementEnum.SUBMODELELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT_COLLECTION"))
                return TypeValueListElementEnum.SUBMODELELEMENTCOLLECTION;

            if (value.Equals("SUBMODEL_ELEMENT_LIST"))
                return TypeValueListElementEnum.SUBMODELELEMENTLIST;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeValueListElementEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeValueListElementEnumToJsonValue(TypeValueListElementEnum? value)
        {
            if (value == TypeValueListElementEnum.ANNOTATEDRELATIONSHIPELEMENT)
                return "ANNOTATED_RELATIONSHIP_ELEMENT";

            if (value == TypeValueListElementEnum.BASICEVENTELEMENT)
                return "BASIC_EVENT_ELEMENT";

            if (value == TypeValueListElementEnum.BLOB)
                return "BLOB";

            if (value == TypeValueListElementEnum.CAPABILITY)
                return "CAPABILITY";

            if (value == TypeValueListElementEnum.DATAELEMENT)
                return "DATA_ELEMENT";

            if (value == TypeValueListElementEnum.ENTITY)
                return "ENTITY";

            if (value == TypeValueListElementEnum.EVENTELEMENT)
                return "EVENT_ELEMENT";

            if (value == TypeValueListElementEnum.FILE)
                return "FILE";

            if (value == TypeValueListElementEnum.MULTILANGUAGEPROPERTY)
                return "MULTI_LANGUAGE_PROPERTY";

            if (value == TypeValueListElementEnum.OPERATION)
                return "OPERATION";

            if (value == TypeValueListElementEnum.PROPERTY)
                return "PROPERTY";

            if (value == TypeValueListElementEnum.RANGE)
                return "RANGE";

            if (value == TypeValueListElementEnum.REFERENCEELEMENT)
                return "REFERENCE_ELEMENT";

            if (value == TypeValueListElementEnum.RELATIONSHIPELEMENT)
                return "RELATIONSHIP_ELEMENT";

            if (value == TypeValueListElementEnum.SUBMODELELEMENT)
                return "SUBMODEL_ELEMENT";

            if (value == TypeValueListElementEnum.SUBMODELELEMENTCOLLECTION)
                return "SUBMODEL_ELEMENT_COLLECTION";

            if (value == TypeValueListElementEnum.SUBMODELELEMENTLIST)
                return "SUBMODEL_ELEMENT_LIST";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TypeValueListElement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeValueListElementEnum?> TypeValueListElementOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeValueListElement
        /// </summary>
        [JsonPropertyName("typeValueListElement")]
        public TypeValueListElementEnum? TypeValueListElement { get { return this.TypeValueListElementOption; } set { this.TypeValueListElementOption = new(value); } }

        /// <summary>
        /// Defines ValueTypeListElement
        /// </summary>
        public enum ValueTypeListElementEnum
        {
            /// <summary>
            /// Enum ANYURI for value: ANY_URI
            /// </summary>
            ANYURI = 1,

            /// <summary>
            /// Enum BASE64BINARY for value: BASE64BINARY
            /// </summary>
            BASE64BINARY = 2,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            BOOLEAN = 3,

            /// <summary>
            /// Enum BYTE for value: BYTE
            /// </summary>
            BYTE = 4,

            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            DATE = 5,

            /// <summary>
            /// Enum DATETIME for value: DATE_TIME
            /// </summary>
            DATETIME = 6,

            /// <summary>
            /// Enum DECIMAL for value: DECIMAL
            /// </summary>
            DECIMAL = 7,

            /// <summary>
            /// Enum DOUBLE for value: DOUBLE
            /// </summary>
            DOUBLE = 8,

            /// <summary>
            /// Enum DURATION for value: DURATION
            /// </summary>
            DURATION = 9,

            /// <summary>
            /// Enum FLOAT for value: FLOAT
            /// </summary>
            FLOAT = 10,

            /// <summary>
            /// Enum GDAY for value: GDAY
            /// </summary>
            GDAY = 11,

            /// <summary>
            /// Enum GMONTH for value: GMONTH
            /// </summary>
            GMONTH = 12,

            /// <summary>
            /// Enum GMONTHDAY for value: GMONTH_DAY
            /// </summary>
            GMONTHDAY = 13,

            /// <summary>
            /// Enum GYEAR for value: GYEAR
            /// </summary>
            GYEAR = 14,

            /// <summary>
            /// Enum GYEARMONTH for value: GYEAR_MONTH
            /// </summary>
            GYEARMONTH = 15,

            /// <summary>
            /// Enum HEXBINARY for value: HEX_BINARY
            /// </summary>
            HEXBINARY = 16,

            /// <summary>
            /// Enum INT for value: INT
            /// </summary>
            INT = 17,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            INTEGER = 18,

            /// <summary>
            /// Enum LONG for value: LONG
            /// </summary>
            LONG = 19,

            /// <summary>
            /// Enum NEGATIVEINTEGER for value: NEGATIVE_INTEGER
            /// </summary>
            NEGATIVEINTEGER = 20,

            /// <summary>
            /// Enum NONNEGATIVEINTEGER for value: NON_NEGATIVE_INTEGER
            /// </summary>
            NONNEGATIVEINTEGER = 21,

            /// <summary>
            /// Enum NONPOSITIVEINTEGER for value: NON_POSITIVE_INTEGER
            /// </summary>
            NONPOSITIVEINTEGER = 22,

            /// <summary>
            /// Enum POSITIVEINTEGER for value: POSITIVE_INTEGER
            /// </summary>
            POSITIVEINTEGER = 23,

            /// <summary>
            /// Enum SHORT for value: SHORT
            /// </summary>
            SHORT = 24,

            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            STRING = 25,

            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            TIME = 26,

            /// <summary>
            /// Enum UNSIGNEDBYTE for value: UNSIGNED_BYTE
            /// </summary>
            UNSIGNEDBYTE = 27,

            /// <summary>
            /// Enum UNSIGNEDINT for value: UNSIGNED_INT
            /// </summary>
            UNSIGNEDINT = 28,

            /// <summary>
            /// Enum UNSIGNEDLONG for value: UNSIGNED_LONG
            /// </summary>
            UNSIGNEDLONG = 29,

            /// <summary>
            /// Enum UNSIGNEDSHORT for value: UNSIGNED_SHORT
            /// </summary>
            UNSIGNEDSHORT = 30
        }

        /// <summary>
        /// Returns a <see cref="ValueTypeListElementEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ValueTypeListElementEnum ValueTypeListElementEnumFromString(string value)
        {
            if (value.Equals("ANY_URI"))
                return ValueTypeListElementEnum.ANYURI;

            if (value.Equals("BASE64BINARY"))
                return ValueTypeListElementEnum.BASE64BINARY;

            if (value.Equals("BOOLEAN"))
                return ValueTypeListElementEnum.BOOLEAN;

            if (value.Equals("BYTE"))
                return ValueTypeListElementEnum.BYTE;

            if (value.Equals("DATE"))
                return ValueTypeListElementEnum.DATE;

            if (value.Equals("DATE_TIME"))
                return ValueTypeListElementEnum.DATETIME;

            if (value.Equals("DECIMAL"))
                return ValueTypeListElementEnum.DECIMAL;

            if (value.Equals("DOUBLE"))
                return ValueTypeListElementEnum.DOUBLE;

            if (value.Equals("DURATION"))
                return ValueTypeListElementEnum.DURATION;

            if (value.Equals("FLOAT"))
                return ValueTypeListElementEnum.FLOAT;

            if (value.Equals("GDAY"))
                return ValueTypeListElementEnum.GDAY;

            if (value.Equals("GMONTH"))
                return ValueTypeListElementEnum.GMONTH;

            if (value.Equals("GMONTH_DAY"))
                return ValueTypeListElementEnum.GMONTHDAY;

            if (value.Equals("GYEAR"))
                return ValueTypeListElementEnum.GYEAR;

            if (value.Equals("GYEAR_MONTH"))
                return ValueTypeListElementEnum.GYEARMONTH;

            if (value.Equals("HEX_BINARY"))
                return ValueTypeListElementEnum.HEXBINARY;

            if (value.Equals("INT"))
                return ValueTypeListElementEnum.INT;

            if (value.Equals("INTEGER"))
                return ValueTypeListElementEnum.INTEGER;

            if (value.Equals("LONG"))
                return ValueTypeListElementEnum.LONG;

            if (value.Equals("NEGATIVE_INTEGER"))
                return ValueTypeListElementEnum.NEGATIVEINTEGER;

            if (value.Equals("NON_NEGATIVE_INTEGER"))
                return ValueTypeListElementEnum.NONNEGATIVEINTEGER;

            if (value.Equals("NON_POSITIVE_INTEGER"))
                return ValueTypeListElementEnum.NONPOSITIVEINTEGER;

            if (value.Equals("POSITIVE_INTEGER"))
                return ValueTypeListElementEnum.POSITIVEINTEGER;

            if (value.Equals("SHORT"))
                return ValueTypeListElementEnum.SHORT;

            if (value.Equals("STRING"))
                return ValueTypeListElementEnum.STRING;

            if (value.Equals("TIME"))
                return ValueTypeListElementEnum.TIME;

            if (value.Equals("UNSIGNED_BYTE"))
                return ValueTypeListElementEnum.UNSIGNEDBYTE;

            if (value.Equals("UNSIGNED_INT"))
                return ValueTypeListElementEnum.UNSIGNEDINT;

            if (value.Equals("UNSIGNED_LONG"))
                return ValueTypeListElementEnum.UNSIGNEDLONG;

            if (value.Equals("UNSIGNED_SHORT"))
                return ValueTypeListElementEnum.UNSIGNEDSHORT;

            throw new NotImplementedException($"Could not convert value to type ValueTypeListElementEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ValueTypeListElementEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValueTypeListElementEnum? ValueTypeListElementEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ANY_URI"))
                return ValueTypeListElementEnum.ANYURI;

            if (value.Equals("BASE64BINARY"))
                return ValueTypeListElementEnum.BASE64BINARY;

            if (value.Equals("BOOLEAN"))
                return ValueTypeListElementEnum.BOOLEAN;

            if (value.Equals("BYTE"))
                return ValueTypeListElementEnum.BYTE;

            if (value.Equals("DATE"))
                return ValueTypeListElementEnum.DATE;

            if (value.Equals("DATE_TIME"))
                return ValueTypeListElementEnum.DATETIME;

            if (value.Equals("DECIMAL"))
                return ValueTypeListElementEnum.DECIMAL;

            if (value.Equals("DOUBLE"))
                return ValueTypeListElementEnum.DOUBLE;

            if (value.Equals("DURATION"))
                return ValueTypeListElementEnum.DURATION;

            if (value.Equals("FLOAT"))
                return ValueTypeListElementEnum.FLOAT;

            if (value.Equals("GDAY"))
                return ValueTypeListElementEnum.GDAY;

            if (value.Equals("GMONTH"))
                return ValueTypeListElementEnum.GMONTH;

            if (value.Equals("GMONTH_DAY"))
                return ValueTypeListElementEnum.GMONTHDAY;

            if (value.Equals("GYEAR"))
                return ValueTypeListElementEnum.GYEAR;

            if (value.Equals("GYEAR_MONTH"))
                return ValueTypeListElementEnum.GYEARMONTH;

            if (value.Equals("HEX_BINARY"))
                return ValueTypeListElementEnum.HEXBINARY;

            if (value.Equals("INT"))
                return ValueTypeListElementEnum.INT;

            if (value.Equals("INTEGER"))
                return ValueTypeListElementEnum.INTEGER;

            if (value.Equals("LONG"))
                return ValueTypeListElementEnum.LONG;

            if (value.Equals("NEGATIVE_INTEGER"))
                return ValueTypeListElementEnum.NEGATIVEINTEGER;

            if (value.Equals("NON_NEGATIVE_INTEGER"))
                return ValueTypeListElementEnum.NONNEGATIVEINTEGER;

            if (value.Equals("NON_POSITIVE_INTEGER"))
                return ValueTypeListElementEnum.NONPOSITIVEINTEGER;

            if (value.Equals("POSITIVE_INTEGER"))
                return ValueTypeListElementEnum.POSITIVEINTEGER;

            if (value.Equals("SHORT"))
                return ValueTypeListElementEnum.SHORT;

            if (value.Equals("STRING"))
                return ValueTypeListElementEnum.STRING;

            if (value.Equals("TIME"))
                return ValueTypeListElementEnum.TIME;

            if (value.Equals("UNSIGNED_BYTE"))
                return ValueTypeListElementEnum.UNSIGNEDBYTE;

            if (value.Equals("UNSIGNED_INT"))
                return ValueTypeListElementEnum.UNSIGNEDINT;

            if (value.Equals("UNSIGNED_LONG"))
                return ValueTypeListElementEnum.UNSIGNEDLONG;

            if (value.Equals("UNSIGNED_SHORT"))
                return ValueTypeListElementEnum.UNSIGNEDSHORT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ValueTypeListElementEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ValueTypeListElementEnumToJsonValue(ValueTypeListElementEnum? value)
        {
            if (value == ValueTypeListElementEnum.ANYURI)
                return "ANY_URI";

            if (value == ValueTypeListElementEnum.BASE64BINARY)
                return "BASE64BINARY";

            if (value == ValueTypeListElementEnum.BOOLEAN)
                return "BOOLEAN";

            if (value == ValueTypeListElementEnum.BYTE)
                return "BYTE";

            if (value == ValueTypeListElementEnum.DATE)
                return "DATE";

            if (value == ValueTypeListElementEnum.DATETIME)
                return "DATE_TIME";

            if (value == ValueTypeListElementEnum.DECIMAL)
                return "DECIMAL";

            if (value == ValueTypeListElementEnum.DOUBLE)
                return "DOUBLE";

            if (value == ValueTypeListElementEnum.DURATION)
                return "DURATION";

            if (value == ValueTypeListElementEnum.FLOAT)
                return "FLOAT";

            if (value == ValueTypeListElementEnum.GDAY)
                return "GDAY";

            if (value == ValueTypeListElementEnum.GMONTH)
                return "GMONTH";

            if (value == ValueTypeListElementEnum.GMONTHDAY)
                return "GMONTH_DAY";

            if (value == ValueTypeListElementEnum.GYEAR)
                return "GYEAR";

            if (value == ValueTypeListElementEnum.GYEARMONTH)
                return "GYEAR_MONTH";

            if (value == ValueTypeListElementEnum.HEXBINARY)
                return "HEX_BINARY";

            if (value == ValueTypeListElementEnum.INT)
                return "INT";

            if (value == ValueTypeListElementEnum.INTEGER)
                return "INTEGER";

            if (value == ValueTypeListElementEnum.LONG)
                return "LONG";

            if (value == ValueTypeListElementEnum.NEGATIVEINTEGER)
                return "NEGATIVE_INTEGER";

            if (value == ValueTypeListElementEnum.NONNEGATIVEINTEGER)
                return "NON_NEGATIVE_INTEGER";

            if (value == ValueTypeListElementEnum.NONPOSITIVEINTEGER)
                return "NON_POSITIVE_INTEGER";

            if (value == ValueTypeListElementEnum.POSITIVEINTEGER)
                return "POSITIVE_INTEGER";

            if (value == ValueTypeListElementEnum.SHORT)
                return "SHORT";

            if (value == ValueTypeListElementEnum.STRING)
                return "STRING";

            if (value == ValueTypeListElementEnum.TIME)
                return "TIME";

            if (value == ValueTypeListElementEnum.UNSIGNEDBYTE)
                return "UNSIGNED_BYTE";

            if (value == ValueTypeListElementEnum.UNSIGNEDINT)
                return "UNSIGNED_INT";

            if (value == ValueTypeListElementEnum.UNSIGNEDLONG)
                return "UNSIGNED_LONG";

            if (value == ValueTypeListElementEnum.UNSIGNEDSHORT)
                return "UNSIGNED_SHORT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ValueTypeListElement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ValueTypeListElementEnum?> ValueTypeListElementOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValueTypeListElement
        /// </summary>
        [JsonPropertyName("valueTypeListElement")]
        public ValueTypeListElementEnum? ValueTypeListElement { get { return this.ValueTypeListElementOption; } set { this.ValueTypeListElementOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddedDataSpecifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmbeddedDataSpecification>?> EmbeddedDataSpecificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddedDataSpecifications
        /// </summary>
        [JsonPropertyName("embeddedDataSpecifications")]
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get { return this.EmbeddedDataSpecificationsOption; } set { this.EmbeddedDataSpecificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringNameType>?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public List<LangStringNameType>? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringTextType>?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public List<LangStringTextType>? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdShort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdShortOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        [JsonPropertyName("idShort")]
        public string? IdShort { get { return this.IdShortOption; } set { this.IdShortOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extensions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Extension>?> ExtensionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [JsonPropertyName("extensions")]
        public List<Extension>? Extensions { get { return this.ExtensionsOption; } set { this.ExtensionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        [JsonPropertyName("semanticId")]
        public Reference? SemanticId { get { return this.SemanticIdOption; } set { this.SemanticIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalSemanticIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> SupplementalSemanticIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticIds
        /// </summary>
        [JsonPropertyName("supplementalSemanticIds")]
        public List<Reference>? SupplementalSemanticIds { get { return this.SupplementalSemanticIdsOption; } set { this.SupplementalSemanticIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Qualifiers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Qualifier>?> QualifiersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Qualifiers
        /// </summary>
        [JsonPropertyName("qualifiers")]
        public List<Qualifier>? Qualifiers { get { return this.QualifiersOption; } set { this.QualifiersOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrderRelevant
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OrderRelevantOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrderRelevant
        /// </summary>
        [JsonPropertyName("orderRelevant")]
        public bool? OrderRelevant { get { return this.OrderRelevantOption; } set { this.OrderRelevantOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SubmodelElementListAllOfValue>?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public List<SubmodelElementListAllOfValue>? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticIdListElement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdListElementOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticIdListElement
        /// </summary>
        [JsonPropertyName("semanticIdListElement")]
        public Reference? SemanticIdListElement { get { return this.SemanticIdListElementOption; } set { this.SemanticIdListElementOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmodelElementList {\n");
            sb.Append("  EmbeddedDataSpecifications: ").Append(EmbeddedDataSpecifications).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticIds: ").Append(SupplementalSemanticIds).Append("\n");
            sb.Append("  Qualifiers: ").Append(Qualifiers).Append("\n");
            sb.Append("  OrderRelevant: ").Append(OrderRelevant).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  SemanticIdListElement: ").Append(SemanticIdListElement).Append("\n");
            sb.Append("  TypeValueListElement: ").Append(TypeValueListElement).Append("\n");
            sb.Append("  ValueTypeListElement: ").Append(ValueTypeListElement).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmodelElementList" />
    /// </summary>
    public class SubmodelElementListJsonConverter : JsonConverter<SubmodelElementList>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmodelElementList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmodelElementList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default;
            Option<List<LangStringNameType>?> displayName = default;
            Option<List<LangStringTextType>?> description = default;
            Option<string?> category = default;
            Option<string?> idShort = default;
            Option<List<Extension>?> extensions = default;
            Option<Reference?> semanticId = default;
            Option<List<Reference>?> supplementalSemanticIds = default;
            Option<List<Qualifier>?> qualifiers = default;
            Option<bool?> orderRelevant = default;
            Option<List<SubmodelElementListAllOfValue>?> value = default;
            Option<Reference?> semanticIdListElement = default;
            Option<SubmodelElementList.TypeValueListElementEnum?> typeValueListElement = default;
            Option<SubmodelElementList.ValueTypeListElementEnum?> valueTypeListElement = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "embeddedDataSpecifications":
                            embeddedDataSpecifications = new Option<List<EmbeddedDataSpecification>?>(JsonSerializer.Deserialize<List<EmbeddedDataSpecification>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "displayName":
                            displayName = new Option<List<LangStringNameType>?>(JsonSerializer.Deserialize<List<LangStringNameType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<List<LangStringTextType>?>(JsonSerializer.Deserialize<List<LangStringTextType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idShort":
                            idShort = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extensions":
                            extensions = new Option<List<Extension>?>(JsonSerializer.Deserialize<List<Extension>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticId":
                            semanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplementalSemanticIds":
                            supplementalSemanticIds = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "qualifiers":
                            qualifiers = new Option<List<Qualifier>?>(JsonSerializer.Deserialize<List<Qualifier>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "orderRelevant":
                            orderRelevant = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "value":
                            value = new Option<List<SubmodelElementListAllOfValue>?>(JsonSerializer.Deserialize<List<SubmodelElementListAllOfValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticIdListElement":
                            semanticIdListElement = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "typeValueListElement":
                            string? typeValueListElementRawValue = utf8JsonReader.GetString();
                            if (typeValueListElementRawValue != null)
                                typeValueListElement = new Option<SubmodelElementList.TypeValueListElementEnum?>(SubmodelElementList.TypeValueListElementEnumFromStringOrDefault(typeValueListElementRawValue));
                            break;
                        case "valueTypeListElement":
                            string? valueTypeListElementRawValue = utf8JsonReader.GetString();
                            if (valueTypeListElementRawValue != null)
                                valueTypeListElement = new Option<SubmodelElementList.ValueTypeListElementEnum?>(SubmodelElementList.ValueTypeListElementEnumFromStringOrDefault(valueTypeListElementRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (embeddedDataSpecifications.IsSet && embeddedDataSpecifications.Value == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecifications), "Property is not nullable for class SubmodelElementList.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class SubmodelElementList.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class SubmodelElementList.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class SubmodelElementList.");

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort), "Property is not nullable for class SubmodelElementList.");

            if (extensions.IsSet && extensions.Value == null)
                throw new ArgumentNullException(nameof(extensions), "Property is not nullable for class SubmodelElementList.");

            if (semanticId.IsSet && semanticId.Value == null)
                throw new ArgumentNullException(nameof(semanticId), "Property is not nullable for class SubmodelElementList.");

            if (supplementalSemanticIds.IsSet && supplementalSemanticIds.Value == null)
                throw new ArgumentNullException(nameof(supplementalSemanticIds), "Property is not nullable for class SubmodelElementList.");

            if (qualifiers.IsSet && qualifiers.Value == null)
                throw new ArgumentNullException(nameof(qualifiers), "Property is not nullable for class SubmodelElementList.");

            if (orderRelevant.IsSet && orderRelevant.Value == null)
                throw new ArgumentNullException(nameof(orderRelevant), "Property is not nullable for class SubmodelElementList.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class SubmodelElementList.");

            if (semanticIdListElement.IsSet && semanticIdListElement.Value == null)
                throw new ArgumentNullException(nameof(semanticIdListElement), "Property is not nullable for class SubmodelElementList.");

            if (typeValueListElement.IsSet && typeValueListElement.Value == null)
                throw new ArgumentNullException(nameof(typeValueListElement), "Property is not nullable for class SubmodelElementList.");

            if (valueTypeListElement.IsSet && valueTypeListElement.Value == null)
                throw new ArgumentNullException(nameof(valueTypeListElement), "Property is not nullable for class SubmodelElementList.");

            return new SubmodelElementList(embeddedDataSpecifications, displayName, description, category, idShort, extensions, semanticId, supplementalSemanticIds, qualifiers, orderRelevant, value, semanticIdListElement, typeValueListElement, valueTypeListElement);
        }

        /// <summary>
        /// Serializes a <see cref="SubmodelElementList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelElementList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmodelElementList submodelElementList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submodelElementList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmodelElementList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelElementList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmodelElementList submodelElementList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (submodelElementList.EmbeddedDataSpecificationsOption.IsSet && submodelElementList.EmbeddedDataSpecifications == null)
                throw new ArgumentNullException(nameof(submodelElementList.EmbeddedDataSpecifications), "Property is required for class SubmodelElementList.");

            if (submodelElementList.DisplayNameOption.IsSet && submodelElementList.DisplayName == null)
                throw new ArgumentNullException(nameof(submodelElementList.DisplayName), "Property is required for class SubmodelElementList.");

            if (submodelElementList.DescriptionOption.IsSet && submodelElementList.Description == null)
                throw new ArgumentNullException(nameof(submodelElementList.Description), "Property is required for class SubmodelElementList.");

            if (submodelElementList.CategoryOption.IsSet && submodelElementList.Category == null)
                throw new ArgumentNullException(nameof(submodelElementList.Category), "Property is required for class SubmodelElementList.");

            if (submodelElementList.IdShortOption.IsSet && submodelElementList.IdShort == null)
                throw new ArgumentNullException(nameof(submodelElementList.IdShort), "Property is required for class SubmodelElementList.");

            if (submodelElementList.ExtensionsOption.IsSet && submodelElementList.Extensions == null)
                throw new ArgumentNullException(nameof(submodelElementList.Extensions), "Property is required for class SubmodelElementList.");

            if (submodelElementList.SemanticIdOption.IsSet && submodelElementList.SemanticId == null)
                throw new ArgumentNullException(nameof(submodelElementList.SemanticId), "Property is required for class SubmodelElementList.");

            if (submodelElementList.SupplementalSemanticIdsOption.IsSet && submodelElementList.SupplementalSemanticIds == null)
                throw new ArgumentNullException(nameof(submodelElementList.SupplementalSemanticIds), "Property is required for class SubmodelElementList.");

            if (submodelElementList.QualifiersOption.IsSet && submodelElementList.Qualifiers == null)
                throw new ArgumentNullException(nameof(submodelElementList.Qualifiers), "Property is required for class SubmodelElementList.");

            if (submodelElementList.ValueOption.IsSet && submodelElementList.Value == null)
                throw new ArgumentNullException(nameof(submodelElementList.Value), "Property is required for class SubmodelElementList.");

            if (submodelElementList.SemanticIdListElementOption.IsSet && submodelElementList.SemanticIdListElement == null)
                throw new ArgumentNullException(nameof(submodelElementList.SemanticIdListElement), "Property is required for class SubmodelElementList.");

            if (submodelElementList.EmbeddedDataSpecificationsOption.IsSet)
            {
                writer.WritePropertyName("embeddedDataSpecifications");
                JsonSerializer.Serialize(writer, submodelElementList.EmbeddedDataSpecifications, jsonSerializerOptions);
            }
            if (submodelElementList.DisplayNameOption.IsSet)
            {
                writer.WritePropertyName("displayName");
                JsonSerializer.Serialize(writer, submodelElementList.DisplayName, jsonSerializerOptions);
            }
            if (submodelElementList.DescriptionOption.IsSet)
            {
                writer.WritePropertyName("description");
                JsonSerializer.Serialize(writer, submodelElementList.Description, jsonSerializerOptions);
            }
            if (submodelElementList.CategoryOption.IsSet)
                writer.WriteString("category", submodelElementList.Category);

            if (submodelElementList.IdShortOption.IsSet)
                writer.WriteString("idShort", submodelElementList.IdShort);

            if (submodelElementList.ExtensionsOption.IsSet)
            {
                writer.WritePropertyName("extensions");
                JsonSerializer.Serialize(writer, submodelElementList.Extensions, jsonSerializerOptions);
            }
            if (submodelElementList.SemanticIdOption.IsSet)
            {
                writer.WritePropertyName("semanticId");
                JsonSerializer.Serialize(writer, submodelElementList.SemanticId, jsonSerializerOptions);
            }
            if (submodelElementList.SupplementalSemanticIdsOption.IsSet)
            {
                writer.WritePropertyName("supplementalSemanticIds");
                JsonSerializer.Serialize(writer, submodelElementList.SupplementalSemanticIds, jsonSerializerOptions);
            }
            if (submodelElementList.QualifiersOption.IsSet)
            {
                writer.WritePropertyName("qualifiers");
                JsonSerializer.Serialize(writer, submodelElementList.Qualifiers, jsonSerializerOptions);
            }
            if (submodelElementList.OrderRelevantOption.IsSet)
                writer.WriteBoolean("orderRelevant", submodelElementList.OrderRelevantOption.Value!.Value);

            if (submodelElementList.ValueOption.IsSet)
            {
                writer.WritePropertyName("value");
                JsonSerializer.Serialize(writer, submodelElementList.Value, jsonSerializerOptions);
            }
            if (submodelElementList.SemanticIdListElementOption.IsSet)
            {
                writer.WritePropertyName("semanticIdListElement");
                JsonSerializer.Serialize(writer, submodelElementList.SemanticIdListElement, jsonSerializerOptions);
            }
            var typeValueListElementRawValue = SubmodelElementList.TypeValueListElementEnumToJsonValue(submodelElementList.TypeValueListElementOption.Value!.Value);
            writer.WriteString("typeValueListElement", typeValueListElementRawValue);
            var valueTypeListElementRawValue = SubmodelElementList.ValueTypeListElementEnumToJsonValue(submodelElementList.ValueTypeListElementOption.Value!.Value);
            writer.WriteString("valueTypeListElement", valueTypeListElementRawValue);
        }
    }
}
