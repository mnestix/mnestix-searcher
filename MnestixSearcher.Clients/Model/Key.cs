// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Key
    /// </summary>
    public partial class Key : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Key" /> class.
        /// </summary>
        /// <param name="value">value</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public Key(Option<string?> value = default, Option<TypeEnum?> type = default)
        {
            ValueOption = value;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ANNOTATEDRELATIONSHIPELEMENT for value: ANNOTATED_RELATIONSHIP_ELEMENT
            /// </summary>
            ANNOTATEDRELATIONSHIPELEMENT = 1,

            /// <summary>
            /// Enum ASSETADMINISTRATIONSHELL for value: ASSET_ADMINISTRATION_SHELL
            /// </summary>
            ASSETADMINISTRATIONSHELL = 2,

            /// <summary>
            /// Enum BASICEVENTELEMENT for value: BASIC_EVENT_ELEMENT
            /// </summary>
            BASICEVENTELEMENT = 3,

            /// <summary>
            /// Enum BLOB for value: BLOB
            /// </summary>
            BLOB = 4,

            /// <summary>
            /// Enum CAPABILITY for value: CAPABILITY
            /// </summary>
            CAPABILITY = 5,

            /// <summary>
            /// Enum CONCEPTDESCRIPTION for value: CONCEPT_DESCRIPTION
            /// </summary>
            CONCEPTDESCRIPTION = 6,

            /// <summary>
            /// Enum DATAELEMENT for value: DATA_ELEMENT
            /// </summary>
            DATAELEMENT = 7,

            /// <summary>
            /// Enum ENTITY for value: ENTITY
            /// </summary>
            ENTITY = 8,

            /// <summary>
            /// Enum EVENTELEMENT for value: EVENT_ELEMENT
            /// </summary>
            EVENTELEMENT = 9,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            FILE = 10,

            /// <summary>
            /// Enum FRAGMENTREFERENCE for value: FRAGMENT_REFERENCE
            /// </summary>
            FRAGMENTREFERENCE = 11,

            /// <summary>
            /// Enum GLOBALREFERENCE for value: GLOBAL_REFERENCE
            /// </summary>
            GLOBALREFERENCE = 12,

            /// <summary>
            /// Enum IDENTIFIABLE for value: IDENTIFIABLE
            /// </summary>
            IDENTIFIABLE = 13,

            /// <summary>
            /// Enum MULTILANGUAGEPROPERTY for value: MULTI_LANGUAGE_PROPERTY
            /// </summary>
            MULTILANGUAGEPROPERTY = 14,

            /// <summary>
            /// Enum OPERATION for value: OPERATION
            /// </summary>
            OPERATION = 15,

            /// <summary>
            /// Enum PROPERTY for value: PROPERTY
            /// </summary>
            PROPERTY = 16,

            /// <summary>
            /// Enum RANGE for value: RANGE
            /// </summary>
            RANGE = 17,

            /// <summary>
            /// Enum REFERABLE for value: REFERABLE
            /// </summary>
            REFERABLE = 18,

            /// <summary>
            /// Enum REFERENCEELEMENT for value: REFERENCE_ELEMENT
            /// </summary>
            REFERENCEELEMENT = 19,

            /// <summary>
            /// Enum RELATIONSHIPELEMENT for value: RELATIONSHIP_ELEMENT
            /// </summary>
            RELATIONSHIPELEMENT = 20,

            /// <summary>
            /// Enum SUBMODEL for value: SUBMODEL
            /// </summary>
            SUBMODEL = 21,

            /// <summary>
            /// Enum SUBMODELELEMENT for value: SUBMODEL_ELEMENT
            /// </summary>
            SUBMODELELEMENT = 22,

            /// <summary>
            /// Enum SUBMODELELEMENTCOLLECTION for value: SUBMODEL_ELEMENT_COLLECTION
            /// </summary>
            SUBMODELELEMENTCOLLECTION = 23,

            /// <summary>
            /// Enum SUBMODELELEMENTLIST for value: SUBMODEL_ELEMENT_LIST
            /// </summary>
            SUBMODELELEMENTLIST = 24
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("ANNOTATED_RELATIONSHIP_ELEMENT"))
                return TypeEnum.ANNOTATEDRELATIONSHIPELEMENT;

            if (value.Equals("ASSET_ADMINISTRATION_SHELL"))
                return TypeEnum.ASSETADMINISTRATIONSHELL;

            if (value.Equals("BASIC_EVENT_ELEMENT"))
                return TypeEnum.BASICEVENTELEMENT;

            if (value.Equals("BLOB"))
                return TypeEnum.BLOB;

            if (value.Equals("CAPABILITY"))
                return TypeEnum.CAPABILITY;

            if (value.Equals("CONCEPT_DESCRIPTION"))
                return TypeEnum.CONCEPTDESCRIPTION;

            if (value.Equals("DATA_ELEMENT"))
                return TypeEnum.DATAELEMENT;

            if (value.Equals("ENTITY"))
                return TypeEnum.ENTITY;

            if (value.Equals("EVENT_ELEMENT"))
                return TypeEnum.EVENTELEMENT;

            if (value.Equals("FILE"))
                return TypeEnum.FILE;

            if (value.Equals("FRAGMENT_REFERENCE"))
                return TypeEnum.FRAGMENTREFERENCE;

            if (value.Equals("GLOBAL_REFERENCE"))
                return TypeEnum.GLOBALREFERENCE;

            if (value.Equals("IDENTIFIABLE"))
                return TypeEnum.IDENTIFIABLE;

            if (value.Equals("MULTI_LANGUAGE_PROPERTY"))
                return TypeEnum.MULTILANGUAGEPROPERTY;

            if (value.Equals("OPERATION"))
                return TypeEnum.OPERATION;

            if (value.Equals("PROPERTY"))
                return TypeEnum.PROPERTY;

            if (value.Equals("RANGE"))
                return TypeEnum.RANGE;

            if (value.Equals("REFERABLE"))
                return TypeEnum.REFERABLE;

            if (value.Equals("REFERENCE_ELEMENT"))
                return TypeEnum.REFERENCEELEMENT;

            if (value.Equals("RELATIONSHIP_ELEMENT"))
                return TypeEnum.RELATIONSHIPELEMENT;

            if (value.Equals("SUBMODEL"))
                return TypeEnum.SUBMODEL;

            if (value.Equals("SUBMODEL_ELEMENT"))
                return TypeEnum.SUBMODELELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT_COLLECTION"))
                return TypeEnum.SUBMODELELEMENTCOLLECTION;

            if (value.Equals("SUBMODEL_ELEMENT_LIST"))
                return TypeEnum.SUBMODELELEMENTLIST;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ANNOTATED_RELATIONSHIP_ELEMENT"))
                return TypeEnum.ANNOTATEDRELATIONSHIPELEMENT;

            if (value.Equals("ASSET_ADMINISTRATION_SHELL"))
                return TypeEnum.ASSETADMINISTRATIONSHELL;

            if (value.Equals("BASIC_EVENT_ELEMENT"))
                return TypeEnum.BASICEVENTELEMENT;

            if (value.Equals("BLOB"))
                return TypeEnum.BLOB;

            if (value.Equals("CAPABILITY"))
                return TypeEnum.CAPABILITY;

            if (value.Equals("CONCEPT_DESCRIPTION"))
                return TypeEnum.CONCEPTDESCRIPTION;

            if (value.Equals("DATA_ELEMENT"))
                return TypeEnum.DATAELEMENT;

            if (value.Equals("ENTITY"))
                return TypeEnum.ENTITY;

            if (value.Equals("EVENT_ELEMENT"))
                return TypeEnum.EVENTELEMENT;

            if (value.Equals("FILE"))
                return TypeEnum.FILE;

            if (value.Equals("FRAGMENT_REFERENCE"))
                return TypeEnum.FRAGMENTREFERENCE;

            if (value.Equals("GLOBAL_REFERENCE"))
                return TypeEnum.GLOBALREFERENCE;

            if (value.Equals("IDENTIFIABLE"))
                return TypeEnum.IDENTIFIABLE;

            if (value.Equals("MULTI_LANGUAGE_PROPERTY"))
                return TypeEnum.MULTILANGUAGEPROPERTY;

            if (value.Equals("OPERATION"))
                return TypeEnum.OPERATION;

            if (value.Equals("PROPERTY"))
                return TypeEnum.PROPERTY;

            if (value.Equals("RANGE"))
                return TypeEnum.RANGE;

            if (value.Equals("REFERABLE"))
                return TypeEnum.REFERABLE;

            if (value.Equals("REFERENCE_ELEMENT"))
                return TypeEnum.REFERENCEELEMENT;

            if (value.Equals("RELATIONSHIP_ELEMENT"))
                return TypeEnum.RELATIONSHIPELEMENT;

            if (value.Equals("SUBMODEL"))
                return TypeEnum.SUBMODEL;

            if (value.Equals("SUBMODEL_ELEMENT"))
                return TypeEnum.SUBMODELELEMENT;

            if (value.Equals("SUBMODEL_ELEMENT_COLLECTION"))
                return TypeEnum.SUBMODELELEMENTCOLLECTION;

            if (value.Equals("SUBMODEL_ELEMENT_LIST"))
                return TypeEnum.SUBMODELELEMENTLIST;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.ANNOTATEDRELATIONSHIPELEMENT)
                return "ANNOTATED_RELATIONSHIP_ELEMENT";

            if (value == TypeEnum.ASSETADMINISTRATIONSHELL)
                return "ASSET_ADMINISTRATION_SHELL";

            if (value == TypeEnum.BASICEVENTELEMENT)
                return "BASIC_EVENT_ELEMENT";

            if (value == TypeEnum.BLOB)
                return "BLOB";

            if (value == TypeEnum.CAPABILITY)
                return "CAPABILITY";

            if (value == TypeEnum.CONCEPTDESCRIPTION)
                return "CONCEPT_DESCRIPTION";

            if (value == TypeEnum.DATAELEMENT)
                return "DATA_ELEMENT";

            if (value == TypeEnum.ENTITY)
                return "ENTITY";

            if (value == TypeEnum.EVENTELEMENT)
                return "EVENT_ELEMENT";

            if (value == TypeEnum.FILE)
                return "FILE";

            if (value == TypeEnum.FRAGMENTREFERENCE)
                return "FRAGMENT_REFERENCE";

            if (value == TypeEnum.GLOBALREFERENCE)
                return "GLOBAL_REFERENCE";

            if (value == TypeEnum.IDENTIFIABLE)
                return "IDENTIFIABLE";

            if (value == TypeEnum.MULTILANGUAGEPROPERTY)
                return "MULTI_LANGUAGE_PROPERTY";

            if (value == TypeEnum.OPERATION)
                return "OPERATION";

            if (value == TypeEnum.PROPERTY)
                return "PROPERTY";

            if (value == TypeEnum.RANGE)
                return "RANGE";

            if (value == TypeEnum.REFERABLE)
                return "REFERABLE";

            if (value == TypeEnum.REFERENCEELEMENT)
                return "REFERENCE_ELEMENT";

            if (value == TypeEnum.RELATIONSHIPELEMENT)
                return "RELATIONSHIP_ELEMENT";

            if (value == TypeEnum.SUBMODEL)
                return "SUBMODEL";

            if (value == TypeEnum.SUBMODELELEMENT)
                return "SUBMODEL_ELEMENT";

            if (value == TypeEnum.SUBMODELELEMENTCOLLECTION)
                return "SUBMODEL_ELEMENT_COLLECTION";

            if (value == TypeEnum.SUBMODELELEMENTLIST)
                return "SUBMODEL_ELEMENT_LIST";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Key {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Key" />
    /// </summary>
    public class KeyJsonConverter : JsonConverter<Key>
    {
        /// <summary>
        /// Deserializes json to <see cref="Key" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Key Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> value = default;
            Option<Key.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Key.TypeEnum?>(Key.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class Key.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Key.");

            return new Key(value, type);
        }

        /// <summary>
        /// Serializes a <see cref="Key" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="key"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Key key, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, key, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Key" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="key"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Key key, JsonSerializerOptions jsonSerializerOptions)
        {
            if (key.ValueOption.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key.Value), "Property is required for class Key.");

            if (key.ValueOption.IsSet)
                writer.WriteString("value", key.Value);

            var typeRawValue = Key.TypeEnumToJsonValue(key.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
