// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// SubmodelElementListAllOfValue
    /// </summary>
    public partial class SubmodelElementListAllOfValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="capability"></param>
        public SubmodelElementListAllOfValue(Capability capability)
        {
            Capability = capability;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="entity"></param>
        public SubmodelElementListAllOfValue(Entity entity)
        {
            Entity = entity;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="eventElement"></param>
        public SubmodelElementListAllOfValue(EventElement eventElement)
        {
            EventElement = eventElement;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="operation"></param>
        public SubmodelElementListAllOfValue(Operation operation)
        {
            Operation = operation;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="relationshipElement"></param>
        public SubmodelElementListAllOfValue(RelationshipElement relationshipElement)
        {
            RelationshipElement = relationshipElement;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="submodelElementCollection"></param>
        public SubmodelElementListAllOfValue(SubmodelElementCollection submodelElementCollection)
        {
            SubmodelElementCollection = submodelElementCollection;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="submodelElementList"></param>
        public SubmodelElementListAllOfValue(SubmodelElementList submodelElementList)
        {
            SubmodelElementList = submodelElementList;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="basicEventElement"></param>
        public SubmodelElementListAllOfValue(BasicEventElement basicEventElement)
        {
            BasicEventElement = basicEventElement;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelElementListAllOfValue" /> class.
        /// </summary>
        /// <param name="annotatedRelationshipElement"></param>
        public SubmodelElementListAllOfValue(AnnotatedRelationshipElement annotatedRelationshipElement)
        {
            AnnotatedRelationshipElement = annotatedRelationshipElement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Capability
        /// </summary>
        public Capability? Capability { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        public Entity? Entity { get; set; }

        /// <summary>
        /// Gets or Sets EventElement
        /// </summary>
        public EventElement? EventElement { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        public Operation? Operation { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipElement
        /// </summary>
        public RelationshipElement? RelationshipElement { get; set; }

        /// <summary>
        /// Gets or Sets SubmodelElementCollection
        /// </summary>
        public SubmodelElementCollection? SubmodelElementCollection { get; set; }

        /// <summary>
        /// Gets or Sets SubmodelElementList
        /// </summary>
        public SubmodelElementList? SubmodelElementList { get; set; }

        /// <summary>
        /// Gets or Sets BasicEventElement
        /// </summary>
        public BasicEventElement? BasicEventElement { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedRelationshipElement
        /// </summary>
        public AnnotatedRelationshipElement? AnnotatedRelationshipElement { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmodelElementListAllOfValue {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmodelElementListAllOfValue" />
    /// </summary>
    public class SubmodelElementListAllOfValueJsonConverter : JsonConverter<SubmodelElementListAllOfValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmodelElementListAllOfValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmodelElementListAllOfValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Capability? capability = default;
            Entity? entity = default;
            EventElement? eventElement = default;
            Operation? operation = default;
            RelationshipElement? relationshipElement = default;
            SubmodelElementCollection? submodelElementCollection = default;
            SubmodelElementList? submodelElementList = default;
            BasicEventElement? basicEventElement = default;
            AnnotatedRelationshipElement? annotatedRelationshipElement = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderCapability = utf8JsonReader;
                    ClientUtils.TryDeserialize<Capability?>(ref utf8JsonReaderCapability, jsonSerializerOptions, out capability);

                    Utf8JsonReader utf8JsonReaderEntity = utf8JsonReader;
                    ClientUtils.TryDeserialize<Entity?>(ref utf8JsonReaderEntity, jsonSerializerOptions, out entity);

                    Utf8JsonReader utf8JsonReaderEventElement = utf8JsonReader;
                    ClientUtils.TryDeserialize<EventElement?>(ref utf8JsonReaderEventElement, jsonSerializerOptions, out eventElement);

                    Utf8JsonReader utf8JsonReaderOperation = utf8JsonReader;
                    ClientUtils.TryDeserialize<Operation?>(ref utf8JsonReaderOperation, jsonSerializerOptions, out operation);

                    Utf8JsonReader utf8JsonReaderRelationshipElement = utf8JsonReader;
                    ClientUtils.TryDeserialize<RelationshipElement?>(ref utf8JsonReaderRelationshipElement, jsonSerializerOptions, out relationshipElement);

                    Utf8JsonReader utf8JsonReaderSubmodelElementCollection = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubmodelElementCollection?>(ref utf8JsonReaderSubmodelElementCollection, jsonSerializerOptions, out submodelElementCollection);

                    Utf8JsonReader utf8JsonReaderSubmodelElementList = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubmodelElementList?>(ref utf8JsonReaderSubmodelElementList, jsonSerializerOptions, out submodelElementList);

                    Utf8JsonReader utf8JsonReaderBasicEventElement = utf8JsonReader;
                    ClientUtils.TryDeserialize<BasicEventElement?>(ref utf8JsonReaderBasicEventElement, jsonSerializerOptions, out basicEventElement);

                    Utf8JsonReader utf8JsonReaderAnnotatedRelationshipElement = utf8JsonReader;
                    ClientUtils.TryDeserialize<AnnotatedRelationshipElement?>(ref utf8JsonReaderAnnotatedRelationshipElement, jsonSerializerOptions, out annotatedRelationshipElement);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (capability != null)
                return new SubmodelElementListAllOfValue(capability);

            if (entity != null)
                return new SubmodelElementListAllOfValue(entity);

            if (eventElement != null)
                return new SubmodelElementListAllOfValue(eventElement);

            if (operation != null)
                return new SubmodelElementListAllOfValue(operation);

            if (relationshipElement != null)
                return new SubmodelElementListAllOfValue(relationshipElement);

            if (submodelElementCollection != null)
                return new SubmodelElementListAllOfValue(submodelElementCollection);

            if (submodelElementList != null)
                return new SubmodelElementListAllOfValue(submodelElementList);

            if (basicEventElement != null)
                return new SubmodelElementListAllOfValue(basicEventElement);

            if (annotatedRelationshipElement != null)
                return new SubmodelElementListAllOfValue(annotatedRelationshipElement);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="SubmodelElementListAllOfValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelElementListAllOfValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmodelElementListAllOfValue submodelElementListAllOfValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submodelElementListAllOfValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmodelElementListAllOfValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelElementListAllOfValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmodelElementListAllOfValue submodelElementListAllOfValue, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
