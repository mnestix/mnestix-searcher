// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// SubmodelValueOnly
    /// </summary>
    public partial class SubmodelValueOnly : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelValueOnly" /> class.
        /// </summary>
        /// <param name="idShort">idShort</param>
        /// <param name="valuesOnlyMap">valuesOnlyMap</param>
        [JsonConstructor]
        public SubmodelValueOnly(Option<string?> idShort = default, Option<Dictionary<string, Object>?> valuesOnlyMap = default)
        {
            IdShortOption = idShort;
            ValuesOnlyMapOption = valuesOnlyMap;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IdShort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdShortOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        [JsonPropertyName("idShort")]
        public string? IdShort { get { return this.IdShortOption; } set { this.IdShortOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValuesOnlyMap
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> ValuesOnlyMapOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValuesOnlyMap
        /// </summary>
        [JsonPropertyName("valuesOnlyMap")]
        public Dictionary<string, Object>? ValuesOnlyMap { get { return this.ValuesOnlyMapOption; } set { this.ValuesOnlyMapOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmodelValueOnly {\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  ValuesOnlyMap: ").Append(ValuesOnlyMap).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmodelValueOnly" />
    /// </summary>
    public class SubmodelValueOnlyJsonConverter : JsonConverter<SubmodelValueOnly>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmodelValueOnly" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmodelValueOnly Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> idShort = default;
            Option<Dictionary<string, Object>?> valuesOnlyMap = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "idShort":
                            idShort = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valuesOnlyMap":
                            valuesOnlyMap = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort), "Property is not nullable for class SubmodelValueOnly.");

            return new SubmodelValueOnly(idShort, valuesOnlyMap);
        }

        /// <summary>
        /// Serializes a <see cref="SubmodelValueOnly" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelValueOnly"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmodelValueOnly submodelValueOnly, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submodelValueOnly, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmodelValueOnly" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submodelValueOnly"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmodelValueOnly submodelValueOnly, JsonSerializerOptions jsonSerializerOptions)
        {
            if (submodelValueOnly.IdShortOption.IsSet && submodelValueOnly.IdShort == null)
                throw new ArgumentNullException(nameof(submodelValueOnly.IdShort), "Property is required for class SubmodelValueOnly.");

            if (submodelValueOnly.IdShortOption.IsSet)
                writer.WriteString("idShort", submodelValueOnly.IdShort);

            if (submodelValueOnly.ValuesOnlyMapOption.IsSet)
                if (submodelValueOnly.ValuesOnlyMapOption.Value != null)
                {
                    writer.WritePropertyName("valuesOnlyMap");
                    JsonSerializer.Serialize(writer, submodelValueOnly.ValuesOnlyMap, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("valuesOnlyMap");
        }
    }
}
