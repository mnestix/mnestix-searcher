// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// BasicEventElement
    /// </summary>
    public partial class BasicEventElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicEventElement" /> class.
        /// </summary>
        /// <param name="embeddedDataSpecifications">embeddedDataSpecifications</param>
        /// <param name="displayName">displayName</param>
        /// <param name="description">description</param>
        /// <param name="category">category</param>
        /// <param name="idShort">idShort</param>
        /// <param name="extensions">extensions</param>
        /// <param name="semanticId">semanticId</param>
        /// <param name="supplementalSemanticIds">supplementalSemanticIds</param>
        /// <param name="qualifiers">qualifiers</param>
        /// <param name="state">state</param>
        /// <param name="direction">direction</param>
        /// <param name="observed">observed</param>
        /// <param name="messageTopic">messageTopic</param>
        /// <param name="messageBroker">messageBroker</param>
        /// <param name="lastUpdate">lastUpdate</param>
        /// <param name="minInterval">minInterval</param>
        /// <param name="maxInterval">maxInterval</param>
        [JsonConstructor]
        public BasicEventElement(Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default, Option<List<LangStringNameType>?> displayName = default, Option<List<LangStringTextType>?> description = default, Option<string?> category = default, Option<string?> idShort = default, Option<List<Extension>?> extensions = default, Option<Reference?> semanticId = default, Option<List<Reference>?> supplementalSemanticIds = default, Option<List<Qualifier>?> qualifiers = default, Option<StateEnum?> state = default, Option<DirectionEnum?> direction = default, Option<Reference?> observed = default, Option<string?> messageTopic = default, Option<Reference?> messageBroker = default, Option<string?> lastUpdate = default, Option<string?> minInterval = default, Option<string?> maxInterval = default)
        {
            EmbeddedDataSpecificationsOption = embeddedDataSpecifications;
            DisplayNameOption = displayName;
            DescriptionOption = description;
            CategoryOption = category;
            IdShortOption = idShort;
            ExtensionsOption = extensions;
            SemanticIdOption = semanticId;
            SupplementalSemanticIdsOption = supplementalSemanticIds;
            QualifiersOption = qualifiers;
            StateOption = state;
            DirectionOption = direction;
            ObservedOption = observed;
            MessageTopicOption = messageTopic;
            MessageBrokerOption = messageBroker;
            LastUpdateOption = lastUpdate;
            MinIntervalOption = minInterval;
            MaxIntervalOption = maxInterval;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines State
        /// </summary>
        public enum StateEnum
        {
            /// <summary>
            /// Enum OFF for value: OFF
            /// </summary>
            OFF = 1,

            /// <summary>
            /// Enum ON for value: ON
            /// </summary>
            ON = 2
        }

        /// <summary>
        /// Returns a <see cref="StateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StateEnum StateEnumFromString(string value)
        {
            if (value.Equals("OFF"))
                return StateEnum.OFF;

            if (value.Equals("ON"))
                return StateEnum.ON;

            throw new NotImplementedException($"Could not convert value to type StateEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StateEnum? StateEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OFF"))
                return StateEnum.OFF;

            if (value.Equals("ON"))
                return StateEnum.ON;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StateEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StateEnumToJsonValue(StateEnum? value)
        {
            if (value == StateEnum.OFF)
                return "OFF";

            if (value == StateEnum.ON)
                return "ON";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StateEnum?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public StateEnum? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Defines Direction
        /// </summary>
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum INPUT for value: INPUT
            /// </summary>
            INPUT = 1,

            /// <summary>
            /// Enum OUTPUT for value: OUTPUT
            /// </summary>
            OUTPUT = 2
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DirectionEnum DirectionEnumFromString(string value)
        {
            if (value.Equals("INPUT"))
                return DirectionEnum.INPUT;

            if (value.Equals("OUTPUT"))
                return DirectionEnum.OUTPUT;

            throw new NotImplementedException($"Could not convert value to type DirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DirectionEnum? DirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INPUT"))
                return DirectionEnum.INPUT;

            if (value.Equals("OUTPUT"))
                return DirectionEnum.OUTPUT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DirectionEnumToJsonValue(DirectionEnum? value)
        {
            if (value == DirectionEnum.INPUT)
                return "INPUT";

            if (value == DirectionEnum.OUTPUT)
                return "OUTPUT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Direction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DirectionEnum?> DirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [JsonPropertyName("direction")]
        public DirectionEnum? Direction { get { return this.DirectionOption; } set { this.DirectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddedDataSpecifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmbeddedDataSpecification>?> EmbeddedDataSpecificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddedDataSpecifications
        /// </summary>
        [JsonPropertyName("embeddedDataSpecifications")]
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get { return this.EmbeddedDataSpecificationsOption; } set { this.EmbeddedDataSpecificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringNameType>?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public List<LangStringNameType>? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringTextType>?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public List<LangStringTextType>? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdShort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdShortOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        [JsonPropertyName("idShort")]
        public string? IdShort { get { return this.IdShortOption; } set { this.IdShortOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extensions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Extension>?> ExtensionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [JsonPropertyName("extensions")]
        public List<Extension>? Extensions { get { return this.ExtensionsOption; } set { this.ExtensionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> SemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        [JsonPropertyName("semanticId")]
        public Reference? SemanticId { get { return this.SemanticIdOption; } set { this.SemanticIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalSemanticIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> SupplementalSemanticIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticIds
        /// </summary>
        [JsonPropertyName("supplementalSemanticIds")]
        public List<Reference>? SupplementalSemanticIds { get { return this.SupplementalSemanticIdsOption; } set { this.SupplementalSemanticIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Qualifiers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Qualifier>?> QualifiersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Qualifiers
        /// </summary>
        [JsonPropertyName("qualifiers")]
        public List<Qualifier>? Qualifiers { get { return this.QualifiersOption; } set { this.QualifiersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Observed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> ObservedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Observed
        /// </summary>
        [JsonPropertyName("observed")]
        public Reference? Observed { get { return this.ObservedOption; } set { this.ObservedOption = new(value); } }

        /// <summary>
        /// Used to track the state of MessageTopic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageTopicOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageTopic
        /// </summary>
        [JsonPropertyName("messageTopic")]
        public string? MessageTopic { get { return this.MessageTopicOption; } set { this.MessageTopicOption = new(value); } }

        /// <summary>
        /// Used to track the state of MessageBroker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> MessageBrokerOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageBroker
        /// </summary>
        [JsonPropertyName("messageBroker")]
        public Reference? MessageBroker { get { return this.MessageBrokerOption; } set { this.MessageBrokerOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUpdateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [JsonPropertyName("lastUpdate")]
        public string? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MinIntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinInterval
        /// </summary>
        [JsonPropertyName("minInterval")]
        public string? MinInterval { get { return this.MinIntervalOption; } set { this.MinIntervalOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaxIntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxInterval
        /// </summary>
        [JsonPropertyName("maxInterval")]
        public string? MaxInterval { get { return this.MaxIntervalOption; } set { this.MaxIntervalOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasicEventElement {\n");
            sb.Append("  EmbeddedDataSpecifications: ").Append(EmbeddedDataSpecifications).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticIds: ").Append(SupplementalSemanticIds).Append("\n");
            sb.Append("  Qualifiers: ").Append(Qualifiers).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Observed: ").Append(Observed).Append("\n");
            sb.Append("  MessageTopic: ").Append(MessageTopic).Append("\n");
            sb.Append("  MessageBroker: ").Append(MessageBroker).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  MinInterval: ").Append(MinInterval).Append("\n");
            sb.Append("  MaxInterval: ").Append(MaxInterval).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BasicEventElement" />
    /// </summary>
    public class BasicEventElementJsonConverter : JsonConverter<BasicEventElement>
    {
        /// <summary>
        /// Deserializes json to <see cref="BasicEventElement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BasicEventElement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default;
            Option<List<LangStringNameType>?> displayName = default;
            Option<List<LangStringTextType>?> description = default;
            Option<string?> category = default;
            Option<string?> idShort = default;
            Option<List<Extension>?> extensions = default;
            Option<Reference?> semanticId = default;
            Option<List<Reference>?> supplementalSemanticIds = default;
            Option<List<Qualifier>?> qualifiers = default;
            Option<BasicEventElement.StateEnum?> state = default;
            Option<BasicEventElement.DirectionEnum?> direction = default;
            Option<Reference?> observed = default;
            Option<string?> messageTopic = default;
            Option<Reference?> messageBroker = default;
            Option<string?> lastUpdate = default;
            Option<string?> minInterval = default;
            Option<string?> maxInterval = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "embeddedDataSpecifications":
                            embeddedDataSpecifications = new Option<List<EmbeddedDataSpecification>?>(JsonSerializer.Deserialize<List<EmbeddedDataSpecification>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "displayName":
                            displayName = new Option<List<LangStringNameType>?>(JsonSerializer.Deserialize<List<LangStringNameType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<List<LangStringTextType>?>(JsonSerializer.Deserialize<List<LangStringTextType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idShort":
                            idShort = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extensions":
                            extensions = new Option<List<Extension>?>(JsonSerializer.Deserialize<List<Extension>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "semanticId":
                            semanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplementalSemanticIds":
                            supplementalSemanticIds = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "qualifiers":
                            qualifiers = new Option<List<Qualifier>?>(JsonSerializer.Deserialize<List<Qualifier>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<BasicEventElement.StateEnum?>(BasicEventElement.StateEnumFromStringOrDefault(stateRawValue));
                            break;
                        case "direction":
                            string? directionRawValue = utf8JsonReader.GetString();
                            if (directionRawValue != null)
                                direction = new Option<BasicEventElement.DirectionEnum?>(BasicEventElement.DirectionEnumFromStringOrDefault(directionRawValue));
                            break;
                        case "observed":
                            observed = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "messageTopic":
                            messageTopic = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "messageBroker":
                            messageBroker = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastUpdate":
                            lastUpdate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "minInterval":
                            minInterval = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxInterval":
                            maxInterval = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (embeddedDataSpecifications.IsSet && embeddedDataSpecifications.Value == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecifications), "Property is not nullable for class BasicEventElement.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class BasicEventElement.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class BasicEventElement.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class BasicEventElement.");

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort), "Property is not nullable for class BasicEventElement.");

            if (extensions.IsSet && extensions.Value == null)
                throw new ArgumentNullException(nameof(extensions), "Property is not nullable for class BasicEventElement.");

            if (semanticId.IsSet && semanticId.Value == null)
                throw new ArgumentNullException(nameof(semanticId), "Property is not nullable for class BasicEventElement.");

            if (supplementalSemanticIds.IsSet && supplementalSemanticIds.Value == null)
                throw new ArgumentNullException(nameof(supplementalSemanticIds), "Property is not nullable for class BasicEventElement.");

            if (qualifiers.IsSet && qualifiers.Value == null)
                throw new ArgumentNullException(nameof(qualifiers), "Property is not nullable for class BasicEventElement.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class BasicEventElement.");

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction), "Property is not nullable for class BasicEventElement.");

            if (observed.IsSet && observed.Value == null)
                throw new ArgumentNullException(nameof(observed), "Property is not nullable for class BasicEventElement.");

            if (messageTopic.IsSet && messageTopic.Value == null)
                throw new ArgumentNullException(nameof(messageTopic), "Property is not nullable for class BasicEventElement.");

            if (messageBroker.IsSet && messageBroker.Value == null)
                throw new ArgumentNullException(nameof(messageBroker), "Property is not nullable for class BasicEventElement.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class BasicEventElement.");

            if (minInterval.IsSet && minInterval.Value == null)
                throw new ArgumentNullException(nameof(minInterval), "Property is not nullable for class BasicEventElement.");

            if (maxInterval.IsSet && maxInterval.Value == null)
                throw new ArgumentNullException(nameof(maxInterval), "Property is not nullable for class BasicEventElement.");

            return new BasicEventElement(embeddedDataSpecifications, displayName, description, category, idShort, extensions, semanticId, supplementalSemanticIds, qualifiers, state, direction, observed, messageTopic, messageBroker, lastUpdate, minInterval, maxInterval);
        }

        /// <summary>
        /// Serializes a <see cref="BasicEventElement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicEventElement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BasicEventElement basicEventElement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, basicEventElement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BasicEventElement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicEventElement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BasicEventElement basicEventElement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (basicEventElement.EmbeddedDataSpecificationsOption.IsSet && basicEventElement.EmbeddedDataSpecifications == null)
                throw new ArgumentNullException(nameof(basicEventElement.EmbeddedDataSpecifications), "Property is required for class BasicEventElement.");

            if (basicEventElement.DisplayNameOption.IsSet && basicEventElement.DisplayName == null)
                throw new ArgumentNullException(nameof(basicEventElement.DisplayName), "Property is required for class BasicEventElement.");

            if (basicEventElement.DescriptionOption.IsSet && basicEventElement.Description == null)
                throw new ArgumentNullException(nameof(basicEventElement.Description), "Property is required for class BasicEventElement.");

            if (basicEventElement.CategoryOption.IsSet && basicEventElement.Category == null)
                throw new ArgumentNullException(nameof(basicEventElement.Category), "Property is required for class BasicEventElement.");

            if (basicEventElement.IdShortOption.IsSet && basicEventElement.IdShort == null)
                throw new ArgumentNullException(nameof(basicEventElement.IdShort), "Property is required for class BasicEventElement.");

            if (basicEventElement.ExtensionsOption.IsSet && basicEventElement.Extensions == null)
                throw new ArgumentNullException(nameof(basicEventElement.Extensions), "Property is required for class BasicEventElement.");

            if (basicEventElement.SemanticIdOption.IsSet && basicEventElement.SemanticId == null)
                throw new ArgumentNullException(nameof(basicEventElement.SemanticId), "Property is required for class BasicEventElement.");

            if (basicEventElement.SupplementalSemanticIdsOption.IsSet && basicEventElement.SupplementalSemanticIds == null)
                throw new ArgumentNullException(nameof(basicEventElement.SupplementalSemanticIds), "Property is required for class BasicEventElement.");

            if (basicEventElement.QualifiersOption.IsSet && basicEventElement.Qualifiers == null)
                throw new ArgumentNullException(nameof(basicEventElement.Qualifiers), "Property is required for class BasicEventElement.");

            if (basicEventElement.ObservedOption.IsSet && basicEventElement.Observed == null)
                throw new ArgumentNullException(nameof(basicEventElement.Observed), "Property is required for class BasicEventElement.");

            if (basicEventElement.MessageTopicOption.IsSet && basicEventElement.MessageTopic == null)
                throw new ArgumentNullException(nameof(basicEventElement.MessageTopic), "Property is required for class BasicEventElement.");

            if (basicEventElement.MessageBrokerOption.IsSet && basicEventElement.MessageBroker == null)
                throw new ArgumentNullException(nameof(basicEventElement.MessageBroker), "Property is required for class BasicEventElement.");

            if (basicEventElement.LastUpdateOption.IsSet && basicEventElement.LastUpdate == null)
                throw new ArgumentNullException(nameof(basicEventElement.LastUpdate), "Property is required for class BasicEventElement.");

            if (basicEventElement.MinIntervalOption.IsSet && basicEventElement.MinInterval == null)
                throw new ArgumentNullException(nameof(basicEventElement.MinInterval), "Property is required for class BasicEventElement.");

            if (basicEventElement.MaxIntervalOption.IsSet && basicEventElement.MaxInterval == null)
                throw new ArgumentNullException(nameof(basicEventElement.MaxInterval), "Property is required for class BasicEventElement.");

            if (basicEventElement.EmbeddedDataSpecificationsOption.IsSet)
            {
                writer.WritePropertyName("embeddedDataSpecifications");
                JsonSerializer.Serialize(writer, basicEventElement.EmbeddedDataSpecifications, jsonSerializerOptions);
            }
            if (basicEventElement.DisplayNameOption.IsSet)
            {
                writer.WritePropertyName("displayName");
                JsonSerializer.Serialize(writer, basicEventElement.DisplayName, jsonSerializerOptions);
            }
            if (basicEventElement.DescriptionOption.IsSet)
            {
                writer.WritePropertyName("description");
                JsonSerializer.Serialize(writer, basicEventElement.Description, jsonSerializerOptions);
            }
            if (basicEventElement.CategoryOption.IsSet)
                writer.WriteString("category", basicEventElement.Category);

            if (basicEventElement.IdShortOption.IsSet)
                writer.WriteString("idShort", basicEventElement.IdShort);

            if (basicEventElement.ExtensionsOption.IsSet)
            {
                writer.WritePropertyName("extensions");
                JsonSerializer.Serialize(writer, basicEventElement.Extensions, jsonSerializerOptions);
            }
            if (basicEventElement.SemanticIdOption.IsSet)
            {
                writer.WritePropertyName("semanticId");
                JsonSerializer.Serialize(writer, basicEventElement.SemanticId, jsonSerializerOptions);
            }
            if (basicEventElement.SupplementalSemanticIdsOption.IsSet)
            {
                writer.WritePropertyName("supplementalSemanticIds");
                JsonSerializer.Serialize(writer, basicEventElement.SupplementalSemanticIds, jsonSerializerOptions);
            }
            if (basicEventElement.QualifiersOption.IsSet)
            {
                writer.WritePropertyName("qualifiers");
                JsonSerializer.Serialize(writer, basicEventElement.Qualifiers, jsonSerializerOptions);
            }
            var stateRawValue = BasicEventElement.StateEnumToJsonValue(basicEventElement.StateOption.Value!.Value);
            writer.WriteString("state", stateRawValue);
            var directionRawValue = BasicEventElement.DirectionEnumToJsonValue(basicEventElement.DirectionOption.Value!.Value);
            writer.WriteString("direction", directionRawValue);
            if (basicEventElement.ObservedOption.IsSet)
            {
                writer.WritePropertyName("observed");
                JsonSerializer.Serialize(writer, basicEventElement.Observed, jsonSerializerOptions);
            }
            if (basicEventElement.MessageTopicOption.IsSet)
                writer.WriteString("messageTopic", basicEventElement.MessageTopic);

            if (basicEventElement.MessageBrokerOption.IsSet)
            {
                writer.WritePropertyName("messageBroker");
                JsonSerializer.Serialize(writer, basicEventElement.MessageBroker, jsonSerializerOptions);
            }
            if (basicEventElement.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", basicEventElement.LastUpdate);

            if (basicEventElement.MinIntervalOption.IsSet)
                writer.WriteString("minInterval", basicEventElement.MinInterval);

            if (basicEventElement.MaxIntervalOption.IsSet)
                writer.WriteString("maxInterval", basicEventElement.MaxInterval);
        }
    }
}
