// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// Reference
    /// </summary>
    public partial class Reference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Reference" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="keys">keys</param>
        /// <param name="referredSemanticId">referredSemanticId</param>
        [JsonConstructor]
        public Reference(Option<TypeEnum?> type = default, Option<List<Key>?> keys = default, Option<Reference?> referredSemanticId = default)
        {
            TypeOption = type;
            KeysOption = keys;
            ReferredSemanticIdOption = referredSemanticId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EXTERNALREFERENCE for value: EXTERNAL_REFERENCE
            /// </summary>
            EXTERNALREFERENCE = 1,

            /// <summary>
            /// Enum MODELREFERENCE for value: MODEL_REFERENCE
            /// </summary>
            MODELREFERENCE = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("EXTERNAL_REFERENCE"))
                return TypeEnum.EXTERNALREFERENCE;

            if (value.Equals("MODEL_REFERENCE"))
                return TypeEnum.MODELREFERENCE;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EXTERNAL_REFERENCE"))
                return TypeEnum.EXTERNALREFERENCE;

            if (value.Equals("MODEL_REFERENCE"))
                return TypeEnum.MODELREFERENCE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.EXTERNALREFERENCE)
                return "EXTERNAL_REFERENCE";

            if (value == TypeEnum.MODELREFERENCE)
                return "MODEL_REFERENCE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Keys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Key>?> KeysOption { get; private set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [JsonPropertyName("keys")]
        public List<Key>? Keys { get { return this.KeysOption; } set { this.KeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReferredSemanticId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reference?> ReferredSemanticIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferredSemanticId
        /// </summary>
        [JsonPropertyName("referredSemanticId")]
        public Reference? ReferredSemanticId { get { return this.ReferredSemanticIdOption; } set { this.ReferredSemanticIdOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Reference {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  ReferredSemanticId: ").Append(ReferredSemanticId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Reference" />
    /// </summary>
    public class ReferenceJsonConverter : JsonConverter<Reference>
    {
        /// <summary>
        /// Deserializes json to <see cref="Reference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Reference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Reference.TypeEnum?> type = default;
            Option<List<Key>?> keys = default;
            Option<Reference?> referredSemanticId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Reference.TypeEnum?>(Reference.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "keys":
                            keys = new Option<List<Key>?>(JsonSerializer.Deserialize<List<Key>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "referredSemanticId":
                            referredSemanticId = new Option<Reference?>(JsonSerializer.Deserialize<Reference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Reference.");

            if (keys.IsSet && keys.Value == null)
                throw new ArgumentNullException(nameof(keys), "Property is not nullable for class Reference.");

            if (referredSemanticId.IsSet && referredSemanticId.Value == null)
                throw new ArgumentNullException(nameof(referredSemanticId), "Property is not nullable for class Reference.");

            return new Reference(type, keys, referredSemanticId);
        }

        /// <summary>
        /// Serializes a <see cref="Reference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Reference reference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Reference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Reference reference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reference.KeysOption.IsSet && reference.Keys == null)
                throw new ArgumentNullException(nameof(reference.Keys), "Property is required for class Reference.");

            if (reference.ReferredSemanticIdOption.IsSet && reference.ReferredSemanticId == null)
                throw new ArgumentNullException(nameof(reference.ReferredSemanticId), "Property is required for class Reference.");

            var typeRawValue = Reference.TypeEnumToJsonValue(reference.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (reference.KeysOption.IsSet)
            {
                writer.WritePropertyName("keys");
                JsonSerializer.Serialize(writer, reference.Keys, jsonSerializerOptions);
            }
            if (reference.ReferredSemanticIdOption.IsSet)
            {
                writer.WritePropertyName("referredSemanticId");
                JsonSerializer.Serialize(writer, reference.ReferredSemanticId, jsonSerializerOptions);
            }
        }
    }
}
