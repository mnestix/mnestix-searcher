// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using MnestixSearcher.Clients.Client;

namespace MnestixSearcher.Clients.Model
{
    /// <summary>
    /// ConceptDescription
    /// </summary>
    public partial class ConceptDescription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConceptDescription" /> class.
        /// </summary>
        /// <param name="isCaseOf">isCaseOf</param>
        /// <param name="id">id</param>
        /// <param name="administration">administration</param>
        /// <param name="displayName">displayName</param>
        /// <param name="description">description</param>
        /// <param name="category">category</param>
        /// <param name="idShort">idShort</param>
        /// <param name="extensions">extensions</param>
        /// <param name="embeddedDataSpecifications">embeddedDataSpecifications</param>
        [JsonConstructor]
        public ConceptDescription(Option<List<Reference>?> isCaseOf = default, Option<string?> id = default, Option<AdministrativeInformation?> administration = default, Option<List<LangStringNameType>?> displayName = default, Option<List<LangStringTextType>?> description = default, Option<string?> category = default, Option<string?> idShort = default, Option<List<Extension>?> extensions = default, Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default)
        {
            IsCaseOfOption = isCaseOf;
            IdOption = id;
            AdministrationOption = administration;
            DisplayNameOption = displayName;
            DescriptionOption = description;
            CategoryOption = category;
            IdShortOption = idShort;
            ExtensionsOption = extensions;
            EmbeddedDataSpecificationsOption = embeddedDataSpecifications;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsCaseOf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Reference>?> IsCaseOfOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsCaseOf
        /// </summary>
        [JsonPropertyName("isCaseOf")]
        public List<Reference>? IsCaseOf { get { return this.IsCaseOfOption; } set { this.IsCaseOfOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Administration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdministrativeInformation?> AdministrationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Administration
        /// </summary>
        [JsonPropertyName("administration")]
        public AdministrativeInformation? Administration { get { return this.AdministrationOption; } set { this.AdministrationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringNameType>?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public List<LangStringNameType>? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LangStringTextType>?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public List<LangStringTextType>? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdShort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdShortOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        [JsonPropertyName("idShort")]
        public string? IdShort { get { return this.IdShortOption; } set { this.IdShortOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extensions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Extension>?> ExtensionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [JsonPropertyName("extensions")]
        public List<Extension>? Extensions { get { return this.ExtensionsOption; } set { this.ExtensionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddedDataSpecifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmbeddedDataSpecification>?> EmbeddedDataSpecificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddedDataSpecifications
        /// </summary>
        [JsonPropertyName("embeddedDataSpecifications")]
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get { return this.EmbeddedDataSpecificationsOption; } set { this.EmbeddedDataSpecificationsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConceptDescription {\n");
            sb.Append("  IsCaseOf: ").Append(IsCaseOf).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Administration: ").Append(Administration).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  EmbeddedDataSpecifications: ").Append(EmbeddedDataSpecifications).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConceptDescription" />
    /// </summary>
    public class ConceptDescriptionJsonConverter : JsonConverter<ConceptDescription>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConceptDescription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConceptDescription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Reference>?> isCaseOf = default;
            Option<string?> id = default;
            Option<AdministrativeInformation?> administration = default;
            Option<List<LangStringNameType>?> displayName = default;
            Option<List<LangStringTextType>?> description = default;
            Option<string?> category = default;
            Option<string?> idShort = default;
            Option<List<Extension>?> extensions = default;
            Option<List<EmbeddedDataSpecification>?> embeddedDataSpecifications = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isCaseOf":
                            isCaseOf = new Option<List<Reference>?>(JsonSerializer.Deserialize<List<Reference>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "administration":
                            administration = new Option<AdministrativeInformation?>(JsonSerializer.Deserialize<AdministrativeInformation>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "displayName":
                            displayName = new Option<List<LangStringNameType>?>(JsonSerializer.Deserialize<List<LangStringNameType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<List<LangStringTextType>?>(JsonSerializer.Deserialize<List<LangStringTextType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idShort":
                            idShort = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extensions":
                            extensions = new Option<List<Extension>?>(JsonSerializer.Deserialize<List<Extension>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "embeddedDataSpecifications":
                            embeddedDataSpecifications = new Option<List<EmbeddedDataSpecification>?>(JsonSerializer.Deserialize<List<EmbeddedDataSpecification>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isCaseOf.IsSet && isCaseOf.Value == null)
                throw new ArgumentNullException(nameof(isCaseOf), "Property is not nullable for class ConceptDescription.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConceptDescription.");

            if (administration.IsSet && administration.Value == null)
                throw new ArgumentNullException(nameof(administration), "Property is not nullable for class ConceptDescription.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class ConceptDescription.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ConceptDescription.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class ConceptDescription.");

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort), "Property is not nullable for class ConceptDescription.");

            if (extensions.IsSet && extensions.Value == null)
                throw new ArgumentNullException(nameof(extensions), "Property is not nullable for class ConceptDescription.");

            if (embeddedDataSpecifications.IsSet && embeddedDataSpecifications.Value == null)
                throw new ArgumentNullException(nameof(embeddedDataSpecifications), "Property is not nullable for class ConceptDescription.");

            return new ConceptDescription(isCaseOf, id, administration, displayName, description, category, idShort, extensions, embeddedDataSpecifications);
        }

        /// <summary>
        /// Serializes a <see cref="ConceptDescription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conceptDescription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConceptDescription conceptDescription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, conceptDescription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConceptDescription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conceptDescription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConceptDescription conceptDescription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (conceptDescription.IsCaseOfOption.IsSet && conceptDescription.IsCaseOf == null)
                throw new ArgumentNullException(nameof(conceptDescription.IsCaseOf), "Property is required for class ConceptDescription.");

            if (conceptDescription.IdOption.IsSet && conceptDescription.Id == null)
                throw new ArgumentNullException(nameof(conceptDescription.Id), "Property is required for class ConceptDescription.");

            if (conceptDescription.AdministrationOption.IsSet && conceptDescription.Administration == null)
                throw new ArgumentNullException(nameof(conceptDescription.Administration), "Property is required for class ConceptDescription.");

            if (conceptDescription.DisplayNameOption.IsSet && conceptDescription.DisplayName == null)
                throw new ArgumentNullException(nameof(conceptDescription.DisplayName), "Property is required for class ConceptDescription.");

            if (conceptDescription.DescriptionOption.IsSet && conceptDescription.Description == null)
                throw new ArgumentNullException(nameof(conceptDescription.Description), "Property is required for class ConceptDescription.");

            if (conceptDescription.CategoryOption.IsSet && conceptDescription.Category == null)
                throw new ArgumentNullException(nameof(conceptDescription.Category), "Property is required for class ConceptDescription.");

            if (conceptDescription.IdShortOption.IsSet && conceptDescription.IdShort == null)
                throw new ArgumentNullException(nameof(conceptDescription.IdShort), "Property is required for class ConceptDescription.");

            if (conceptDescription.ExtensionsOption.IsSet && conceptDescription.Extensions == null)
                throw new ArgumentNullException(nameof(conceptDescription.Extensions), "Property is required for class ConceptDescription.");

            if (conceptDescription.EmbeddedDataSpecificationsOption.IsSet && conceptDescription.EmbeddedDataSpecifications == null)
                throw new ArgumentNullException(nameof(conceptDescription.EmbeddedDataSpecifications), "Property is required for class ConceptDescription.");

            if (conceptDescription.IsCaseOfOption.IsSet)
            {
                writer.WritePropertyName("isCaseOf");
                JsonSerializer.Serialize(writer, conceptDescription.IsCaseOf, jsonSerializerOptions);
            }
            if (conceptDescription.IdOption.IsSet)
                writer.WriteString("id", conceptDescription.Id);

            if (conceptDescription.AdministrationOption.IsSet)
            {
                writer.WritePropertyName("administration");
                JsonSerializer.Serialize(writer, conceptDescription.Administration, jsonSerializerOptions);
            }
            if (conceptDescription.DisplayNameOption.IsSet)
            {
                writer.WritePropertyName("displayName");
                JsonSerializer.Serialize(writer, conceptDescription.DisplayName, jsonSerializerOptions);
            }
            if (conceptDescription.DescriptionOption.IsSet)
            {
                writer.WritePropertyName("description");
                JsonSerializer.Serialize(writer, conceptDescription.Description, jsonSerializerOptions);
            }
            if (conceptDescription.CategoryOption.IsSet)
                writer.WriteString("category", conceptDescription.Category);

            if (conceptDescription.IdShortOption.IsSet)
                writer.WriteString("idShort", conceptDescription.IdShort);

            if (conceptDescription.ExtensionsOption.IsSet)
            {
                writer.WritePropertyName("extensions");
                JsonSerializer.Serialize(writer, conceptDescription.Extensions, jsonSerializerOptions);
            }
            if (conceptDescription.EmbeddedDataSpecificationsOption.IsSet)
            {
                writer.WritePropertyName("embeddedDataSpecifications");
                JsonSerializer.Serialize(writer, conceptDescription.EmbeddedDataSpecifications, jsonSerializerOptions);
            }
        }
    }
}
