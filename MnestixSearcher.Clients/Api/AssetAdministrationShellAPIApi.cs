// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using MnestixSearcher.Clients.Client;
using MnestixSearcher.Clients.Model;
using System.Diagnostics.CodeAnalysis;

namespace MnestixSearcher.Clients.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetAdministrationShellAPIApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetAdministrationShellAPIApiEvents Events { get; }

        /// <summary>
        /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileByPathApiResponse"/>&gt;</returns>
        Task<IDeleteFileByPathApiResponse> DeleteFileByPathAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileByPathApiResponse"/>?&gt;</returns>
        Task<IDeleteFileByPathApiResponse?> DeleteFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Downloads file content from a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileByPathApiResponse"/>&gt;</returns>
        Task<IGetFileByPathApiResponse> GetFileByPathAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Downloads file content from a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileByPathApiResponse"/>?&gt;</returns>
        Task<IGetFileByPathApiResponse?> GetFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutFileByPathApiResponse"/>&gt;</returns>
        Task<IPutFileByPathApiResponse> PutFileByPathAsync(string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutFileByPathApiResponse"/>?&gt;</returns>
        Task<IPutFileByPathApiResponse?> PutFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteFileByPathApiResponse"/>
    /// </summary>
    public interface IDeleteFileByPathApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetFileByPathApiResponse"/>
    /// </summary>
    public interface IGetFileByPathApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutFileByPathApiResponse"/>
    /// </summary>
    public interface IPutFileByPathApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetAdministrationShellAPIApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFileByPath;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFileByPath;

        internal void ExecuteOnDeleteFileByPath(AssetAdministrationShellAPIApi.DeleteFileByPathApiResponse apiResponse)
        {
            OnDeleteFileByPath?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFileByPath(Exception exception)
        {
            OnErrorDeleteFileByPath?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFileByPath;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFileByPath;

        internal void ExecuteOnGetFileByPath(AssetAdministrationShellAPIApi.GetFileByPathApiResponse apiResponse)
        {
            OnGetFileByPath?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFileByPath(Exception exception)
        {
            OnErrorGetFileByPath?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutFileByPath;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutFileByPath;

        internal void ExecuteOnPutFileByPath(AssetAdministrationShellAPIApi.PutFileByPathApiResponse apiResponse)
        {
            OnPutFileByPath?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutFileByPath(Exception exception)
        {
            OnErrorPutFileByPath?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetAdministrationShellAPIApi : IAssetAdministrationShellAPIApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetAdministrationShellAPIApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetAdministrationShellAPIApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellAPIApi(ILogger<AssetAdministrationShellAPIApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetAdministrationShellAPIApiEvents assetAdministrationShellAPIApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetAdministrationShellAPIApi>();
            HttpClient = httpClient;
            Events = assetAdministrationShellAPIApiEvents;
        }

        partial void FormatDeleteFileByPath(ref string submodelIdentifier, ref string idShortPath);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <returns></returns>
        private void ValidateDeleteFileByPath(string submodelIdentifier, string idShortPath)
        {
            if (submodelIdentifier == null)
                throw new ArgumentNullException(nameof(submodelIdentifier));

            if (idShortPath == null)
                throw new ArgumentNullException(nameof(idShortPath));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        private void AfterDeleteFileByPathDefaultImplementation(IDeleteFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFileByPath(ref suppressDefaultLog, apiResponseLocalVar, submodelIdentifier, idShortPath);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        partial void AfterDeleteFileByPath(ref bool suppressDefaultLog, IDeleteFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        private void OnErrorDeleteFileByPathDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFileByPath(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submodelIdentifier, idShortPath);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        partial void OnErrorDeleteFileByPath(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileByPathApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileByPathApiResponse?> DeleteFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFileByPathAsync(submodelIdentifier, idShortPath, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileByPathApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileByPathApiResponse> DeleteFileByPathAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFileByPath(submodelIdentifier, idShortPath);

                FormatDeleteFileByPath(ref submodelIdentifier, ref idShortPath);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsubmodelIdentifier%7D", Uri.EscapeDataString(submodelIdentifier.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidShortPath%7D", Uri.EscapeDataString(idShortPath.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFileByPathApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFileByPathApiResponse>();

                        DeleteFileByPathApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFileByPathDefaultImplementation(apiResponseLocalVar, submodelIdentifier, idShortPath);

                        Events.ExecuteOnDeleteFileByPath(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFileByPathDefaultImplementation(e, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", uriBuilderLocalVar.Path, submodelIdentifier, idShortPath);
                Events.ExecuteOnErrorDeleteFileByPath(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFileByPathApiResponse"/>
        /// </summary>
        public partial class DeleteFileByPathApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IDeleteFileByPathApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFileByPathApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFileByPathApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFileByPathApiResponse(ILogger<DeleteFileByPathApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFileByPath(ref string submodelIdentifier, ref string idShortPath);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <returns></returns>
        private void ValidateGetFileByPath(string submodelIdentifier, string idShortPath)
        {
            if (submodelIdentifier == null)
                throw new ArgumentNullException(nameof(submodelIdentifier));

            if (idShortPath == null)
                throw new ArgumentNullException(nameof(idShortPath));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        private void AfterGetFileByPathDefaultImplementation(IGetFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath)
        {
            bool suppressDefaultLog = false;
            AfterGetFileByPath(ref suppressDefaultLog, apiResponseLocalVar, submodelIdentifier, idShortPath);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        partial void AfterGetFileByPath(ref bool suppressDefaultLog, IGetFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        private void OnErrorGetFileByPathDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFileByPath(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submodelIdentifier, idShortPath);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        partial void OnErrorGetFileByPath(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Downloads file content from a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileByPathApiResponse"/>&gt;</returns>
        public async Task<IGetFileByPathApiResponse?> GetFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFileByPathAsync(submodelIdentifier, idShortPath, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Downloads file content from a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileByPathApiResponse"/>&gt;</returns>
        public async Task<IGetFileByPathApiResponse> GetFileByPathAsync(string submodelIdentifier, string idShortPath, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFileByPath(submodelIdentifier, idShortPath);

                FormatGetFileByPath(ref submodelIdentifier, ref idShortPath);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsubmodelIdentifier%7D", Uri.EscapeDataString(submodelIdentifier.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidShortPath%7D", Uri.EscapeDataString(idShortPath.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFileByPathApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFileByPathApiResponse>();

                        GetFileByPathApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFileByPathDefaultImplementation(apiResponseLocalVar, submodelIdentifier, idShortPath);

                        Events.ExecuteOnGetFileByPath(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFileByPathDefaultImplementation(e, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", uriBuilderLocalVar.Path, submodelIdentifier, idShortPath);
                Events.ExecuteOnErrorGetFileByPath(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFileByPathApiResponse"/>
        /// </summary>
        public partial class GetFileByPathApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetFileByPathApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFileByPathApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFileByPathApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFileByPathApiResponse(ILogger<GetFileByPathApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutFileByPath(ref string submodelIdentifier, ref string idShortPath, ref string fileName, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidatePutFileByPath(string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file)
        {
            if (submodelIdentifier == null)
                throw new ArgumentNullException(nameof(submodelIdentifier));

            if (idShortPath == null)
                throw new ArgumentNullException(nameof(idShortPath));

            if (fileName == null)
                throw new ArgumentNullException(nameof(fileName));

            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        private void AfterPutFileByPathDefaultImplementation(IPutFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterPutFileByPath(ref suppressDefaultLog, apiResponseLocalVar, submodelIdentifier, idShortPath, fileName, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        partial void AfterPutFileByPath(ref bool suppressDefaultLog, IPutFileByPathApiResponse apiResponseLocalVar, string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        private void OnErrorPutFileByPathDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutFileByPath(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submodelIdentifier, idShortPath, fileName, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submodelIdentifier"></param>
        /// <param name="idShortPath"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        partial void OnErrorPutFileByPath(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file);

        /// <summary>
        /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutFileByPathApiResponse"/>&gt;</returns>
        public async Task<IPutFileByPathApiResponse?> PutFileByPathOrDefaultAsync(string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutFileByPathAsync(submodelIdentifier, idShortPath, fileName, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutFileByPathApiResponse"/>&gt;</returns>
        public async Task<IPutFileByPathApiResponse> PutFileByPathAsync(string submodelIdentifier, string idShortPath, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutFileByPath(submodelIdentifier, idShortPath, fileName, file);

                FormatPutFileByPath(ref submodelIdentifier, ref idShortPath, ref fileName, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsubmodelIdentifier%7D", Uri.EscapeDataString(submodelIdentifier.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidShortPath%7D", Uri.EscapeDataString(idShortPath.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fileName"] = ClientUtils.ParameterToString(fileName);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutFileByPathApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutFileByPathApiResponse>();

                        PutFileByPathApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutFileByPathDefaultImplementation(apiResponseLocalVar, submodelIdentifier, idShortPath, fileName, file);

                        Events.ExecuteOnPutFileByPath(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutFileByPathDefaultImplementation(e, "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment", uriBuilderLocalVar.Path, submodelIdentifier, idShortPath, fileName, file);
                Events.ExecuteOnErrorPutFileByPath(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutFileByPathApiResponse"/>
        /// </summary>
        public partial class PutFileByPathApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPutFileByPathApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutFileByPathApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutFileByPathApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutFileByPathApiResponse(ILogger<PutFileByPathApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
