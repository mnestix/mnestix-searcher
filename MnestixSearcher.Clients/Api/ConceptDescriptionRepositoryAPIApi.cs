// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using MnestixSearcher.Clients.Client;
using MnestixSearcher.Clients.Model;
using System.Diagnostics.CodeAnalysis;

namespace MnestixSearcher.Clients.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConceptDescriptionRepositoryAPIApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConceptDescriptionRepositoryAPIApiEvents Events { get; }

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConceptDescriptionByIdApiResponse"/>&gt;</returns>
        Task<IDeleteConceptDescriptionByIdApiResponse> DeleteConceptDescriptionByIdAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConceptDescriptionByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteConceptDescriptionByIdApiResponse?> DeleteConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConceptDescriptionsApiResponse"/>&gt;</returns>
        Task<IGetAllConceptDescriptionsApiResponse> GetAllConceptDescriptionsAsync(Option<string> idShort = default, Option<string> isCaseOf = default, Option<string> dataSpecificationRef = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConceptDescriptionsApiResponse"/>?&gt;</returns>
        Task<IGetAllConceptDescriptionsApiResponse?> GetAllConceptDescriptionsOrDefaultAsync(Option<string> idShort = default, Option<string> isCaseOf = default, Option<string> dataSpecificationRef = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConceptDescriptionByIdApiResponse"/>&gt;</returns>
        Task<IGetConceptDescriptionByIdApiResponse> GetConceptDescriptionByIdAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConceptDescriptionByIdApiResponse"/>?&gt;</returns>
        Task<IGetConceptDescriptionByIdApiResponse?> GetConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostConceptDescriptionApiResponse"/>&gt;</returns>
        Task<IPostConceptDescriptionApiResponse> PostConceptDescriptionAsync(ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostConceptDescriptionApiResponse"/>?&gt;</returns>
        Task<IPostConceptDescriptionApiResponse?> PostConceptDescriptionOrDefaultAsync(ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutConceptDescriptionByIdApiResponse"/>&gt;</returns>
        Task<IPutConceptDescriptionByIdApiResponse> PutConceptDescriptionByIdAsync(string cdIdentifier, ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutConceptDescriptionByIdApiResponse"/>?&gt;</returns>
        Task<IPutConceptDescriptionByIdApiResponse?> PutConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteConceptDescriptionByIdApiResponse"/>
    /// </summary>
    public interface IDeleteConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllConceptDescriptionsApiResponse"/>
    /// </summary>
    public interface IGetAllConceptDescriptionsApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetConceptDescriptionByIdApiResponse"/>
    /// </summary>
    public interface IGetConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostConceptDescriptionApiResponse"/>
    /// </summary>
    public interface IPostConceptDescriptionApiResponse : MnestixSearcher.Clients.Client.IApiResponse, ICreated<MnestixSearcher.Clients.Model.ConceptDescription?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, IConflict<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPutConceptDescriptionByIdApiResponse"/>
    /// </summary>
    public interface IPutConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConceptDescriptionRepositoryAPIApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteConceptDescriptionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteConceptDescriptionById;

        internal void ExecuteOnDeleteConceptDescriptionById(ConceptDescriptionRepositoryAPIApi.DeleteConceptDescriptionByIdApiResponse apiResponse)
        {
            OnDeleteConceptDescriptionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteConceptDescriptionById(Exception exception)
        {
            OnErrorDeleteConceptDescriptionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllConceptDescriptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllConceptDescriptions;

        internal void ExecuteOnGetAllConceptDescriptions(ConceptDescriptionRepositoryAPIApi.GetAllConceptDescriptionsApiResponse apiResponse)
        {
            OnGetAllConceptDescriptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllConceptDescriptions(Exception exception)
        {
            OnErrorGetAllConceptDescriptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConceptDescriptionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConceptDescriptionById;

        internal void ExecuteOnGetConceptDescriptionById(ConceptDescriptionRepositoryAPIApi.GetConceptDescriptionByIdApiResponse apiResponse)
        {
            OnGetConceptDescriptionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConceptDescriptionById(Exception exception)
        {
            OnErrorGetConceptDescriptionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostConceptDescription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostConceptDescription;

        internal void ExecuteOnPostConceptDescription(ConceptDescriptionRepositoryAPIApi.PostConceptDescriptionApiResponse apiResponse)
        {
            OnPostConceptDescription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostConceptDescription(Exception exception)
        {
            OnErrorPostConceptDescription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutConceptDescriptionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutConceptDescriptionById;

        internal void ExecuteOnPutConceptDescriptionById(ConceptDescriptionRepositoryAPIApi.PutConceptDescriptionByIdApiResponse apiResponse)
        {
            OnPutConceptDescriptionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutConceptDescriptionById(Exception exception)
        {
            OnErrorPutConceptDescriptionById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConceptDescriptionRepositoryAPIApi : IConceptDescriptionRepositoryAPIApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConceptDescriptionRepositoryAPIApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConceptDescriptionRepositoryAPIApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConceptDescriptionRepositoryAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConceptDescriptionRepositoryAPIApi(ILogger<ConceptDescriptionRepositoryAPIApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConceptDescriptionRepositoryAPIApiEvents conceptDescriptionRepositoryAPIApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConceptDescriptionRepositoryAPIApi>();
            HttpClient = httpClient;
            Events = conceptDescriptionRepositoryAPIApiEvents;
        }

        partial void FormatDeleteConceptDescriptionById(ref string cdIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cdIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeleteConceptDescriptionById(string cdIdentifier)
        {
            if (cdIdentifier == null)
                throw new ArgumentNullException(nameof(cdIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        private void AfterDeleteConceptDescriptionByIdDefaultImplementation(IDeleteConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeleteConceptDescriptionById(ref suppressDefaultLog, apiResponseLocalVar, cdIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        partial void AfterDeleteConceptDescriptionById(ref bool suppressDefaultLog, IDeleteConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        private void OnErrorDeleteConceptDescriptionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteConceptDescriptionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cdIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        partial void OnErrorDeleteConceptDescriptionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier);

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteConceptDescriptionByIdApiResponse?> DeleteConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteConceptDescriptionByIdAsync(cdIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteConceptDescriptionByIdApiResponse> DeleteConceptDescriptionByIdAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteConceptDescriptionById(cdIdentifier);

                FormatDeleteConceptDescriptionById(ref cdIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/concept-descriptions/{cdIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/concept-descriptions/{cdIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcdIdentifier%7D", Uri.EscapeDataString(cdIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteConceptDescriptionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteConceptDescriptionByIdApiResponse>();

                        DeleteConceptDescriptionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/concept-descriptions/{cdIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteConceptDescriptionByIdDefaultImplementation(apiResponseLocalVar, cdIdentifier);

                        Events.ExecuteOnDeleteConceptDescriptionById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteConceptDescriptionByIdDefaultImplementation(e, "/concept-descriptions/{cdIdentifier}", uriBuilderLocalVar.Path, cdIdentifier);
                Events.ExecuteOnErrorDeleteConceptDescriptionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteConceptDescriptionByIdApiResponse"/>
        /// </summary>
        public partial class DeleteConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IDeleteConceptDescriptionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteConceptDescriptionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteConceptDescriptionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteConceptDescriptionByIdApiResponse(ILogger<DeleteConceptDescriptionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllConceptDescriptions(ref Option<string> idShort, ref Option<string> isCaseOf, ref Option<string> dataSpecificationRef, ref Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="idShort"></param>
        /// <param name="isCaseOf"></param>
        /// <param name="dataSpecificationRef"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <returns></returns>
        private void ValidateGetAllConceptDescriptions(Option<string> idShort, Option<string> isCaseOf, Option<string> dataSpecificationRef, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort));

            if (isCaseOf.IsSet && isCaseOf.Value == null)
                throw new ArgumentNullException(nameof(isCaseOf));

            if (dataSpecificationRef.IsSet && dataSpecificationRef.Value == null)
                throw new ArgumentNullException(nameof(dataSpecificationRef));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit));

            if (cursor.IsSet && cursor.Value == null)
                throw new ArgumentNullException(nameof(cursor));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="idShort"></param>
        /// <param name="isCaseOf"></param>
        /// <param name="dataSpecificationRef"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void AfterGetAllConceptDescriptionsDefaultImplementation(IGetAllConceptDescriptionsApiResponse apiResponseLocalVar, Option<string> idShort, Option<string> isCaseOf, Option<string> dataSpecificationRef, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLog = false;
            AfterGetAllConceptDescriptions(ref suppressDefaultLog, apiResponseLocalVar, idShort, isCaseOf, dataSpecificationRef, limit, cursor);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="idShort"></param>
        /// <param name="isCaseOf"></param>
        /// <param name="dataSpecificationRef"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void AfterGetAllConceptDescriptions(ref bool suppressDefaultLog, IGetAllConceptDescriptionsApiResponse apiResponseLocalVar, Option<string> idShort, Option<string> isCaseOf, Option<string> dataSpecificationRef, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="idShort"></param>
        /// <param name="isCaseOf"></param>
        /// <param name="dataSpecificationRef"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void OnErrorGetAllConceptDescriptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> idShort, Option<string> isCaseOf, Option<string> dataSpecificationRef, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllConceptDescriptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, idShort, isCaseOf, dataSpecificationRef, limit, cursor);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="idShort"></param>
        /// <param name="isCaseOf"></param>
        /// <param name="dataSpecificationRef"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void OnErrorGetAllConceptDescriptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> idShort, Option<string> isCaseOf, Option<string> dataSpecificationRef, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConceptDescriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetAllConceptDescriptionsApiResponse?> GetAllConceptDescriptionsOrDefaultAsync(Option<string> idShort = default, Option<string> isCaseOf = default, Option<string> dataSpecificationRef = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllConceptDescriptionsAsync(idShort, isCaseOf, dataSpecificationRef, limit, cursor, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConceptDescriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetAllConceptDescriptionsApiResponse> GetAllConceptDescriptionsAsync(Option<string> idShort = default, Option<string> isCaseOf = default, Option<string> dataSpecificationRef = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllConceptDescriptions(idShort, isCaseOf, dataSpecificationRef, limit, cursor);

                FormatGetAllConceptDescriptions(ref idShort, ref isCaseOf, ref dataSpecificationRef, ref limit, cursor);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/concept-descriptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/concept-descriptions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (idShort.IsSet)
                        parseQueryStringLocalVar["idShort"] = ClientUtils.ParameterToString(idShort.Value);

                    if (isCaseOf.IsSet)
                        parseQueryStringLocalVar["isCaseOf"] = ClientUtils.ParameterToString(isCaseOf.Value);

                    if (dataSpecificationRef.IsSet)
                        parseQueryStringLocalVar["dataSpecificationRef"] = ClientUtils.ParameterToString(dataSpecificationRef.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllConceptDescriptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllConceptDescriptionsApiResponse>();

                        GetAllConceptDescriptionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/concept-descriptions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllConceptDescriptionsDefaultImplementation(apiResponseLocalVar, idShort, isCaseOf, dataSpecificationRef, limit, cursor);

                        Events.ExecuteOnGetAllConceptDescriptions(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllConceptDescriptionsDefaultImplementation(e, "/concept-descriptions", uriBuilderLocalVar.Path, idShort, isCaseOf, dataSpecificationRef, limit, cursor);
                Events.ExecuteOnErrorGetAllConceptDescriptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllConceptDescriptionsApiResponse"/>
        /// </summary>
        public partial class GetAllConceptDescriptionsApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetAllConceptDescriptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllConceptDescriptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllConceptDescriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllConceptDescriptionsApiResponse(ILogger<GetAllConceptDescriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConceptDescriptionById(ref string cdIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cdIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetConceptDescriptionById(string cdIdentifier)
        {
            if (cdIdentifier == null)
                throw new ArgumentNullException(nameof(cdIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        private void AfterGetConceptDescriptionByIdDefaultImplementation(IGetConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetConceptDescriptionById(ref suppressDefaultLog, apiResponseLocalVar, cdIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        partial void AfterGetConceptDescriptionById(ref bool suppressDefaultLog, IGetConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        private void OnErrorGetConceptDescriptionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConceptDescriptionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cdIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        partial void OnErrorGetConceptDescriptionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier);

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IGetConceptDescriptionByIdApiResponse?> GetConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConceptDescriptionByIdAsync(cdIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IGetConceptDescriptionByIdApiResponse> GetConceptDescriptionByIdAsync(string cdIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConceptDescriptionById(cdIdentifier);

                FormatGetConceptDescriptionById(ref cdIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/concept-descriptions/{cdIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/concept-descriptions/{cdIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcdIdentifier%7D", Uri.EscapeDataString(cdIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConceptDescriptionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConceptDescriptionByIdApiResponse>();

                        GetConceptDescriptionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/concept-descriptions/{cdIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConceptDescriptionByIdDefaultImplementation(apiResponseLocalVar, cdIdentifier);

                        Events.ExecuteOnGetConceptDescriptionById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConceptDescriptionByIdDefaultImplementation(e, "/concept-descriptions/{cdIdentifier}", uriBuilderLocalVar.Path, cdIdentifier);
                Events.ExecuteOnErrorGetConceptDescriptionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConceptDescriptionByIdApiResponse"/>
        /// </summary>
        public partial class GetConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetConceptDescriptionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConceptDescriptionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConceptDescriptionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConceptDescriptionByIdApiResponse(ILogger<GetConceptDescriptionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostConceptDescription(ConceptDescription conceptDescription);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conceptDescription"></param>
        /// <returns></returns>
        private void ValidatePostConceptDescription(ConceptDescription conceptDescription)
        {
            if (conceptDescription == null)
                throw new ArgumentNullException(nameof(conceptDescription));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="conceptDescription"></param>
        private void AfterPostConceptDescriptionDefaultImplementation(IPostConceptDescriptionApiResponse apiResponseLocalVar, ConceptDescription conceptDescription)
        {
            bool suppressDefaultLog = false;
            AfterPostConceptDescription(ref suppressDefaultLog, apiResponseLocalVar, conceptDescription);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="conceptDescription"></param>
        partial void AfterPostConceptDescription(ref bool suppressDefaultLog, IPostConceptDescriptionApiResponse apiResponseLocalVar, ConceptDescription conceptDescription);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="conceptDescription"></param>
        private void OnErrorPostConceptDescriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ConceptDescription conceptDescription)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostConceptDescription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, conceptDescription);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="conceptDescription"></param>
        partial void OnErrorPostConceptDescription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ConceptDescription conceptDescription);

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostConceptDescriptionApiResponse"/>&gt;</returns>
        public async Task<IPostConceptDescriptionApiResponse?> PostConceptDescriptionOrDefaultAsync(ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostConceptDescriptionAsync(conceptDescription, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostConceptDescriptionApiResponse"/>&gt;</returns>
        public async Task<IPostConceptDescriptionApiResponse> PostConceptDescriptionAsync(ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostConceptDescription(conceptDescription);

                FormatPostConceptDescription(conceptDescription);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/concept-descriptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/concept-descriptions");

                    httpRequestMessageLocalVar.Content = (conceptDescription as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(conceptDescription, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostConceptDescriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostConceptDescriptionApiResponse>();

                        PostConceptDescriptionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/concept-descriptions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostConceptDescriptionDefaultImplementation(apiResponseLocalVar, conceptDescription);

                        Events.ExecuteOnPostConceptDescription(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostConceptDescriptionDefaultImplementation(e, "/concept-descriptions", uriBuilderLocalVar.Path, conceptDescription);
                Events.ExecuteOnErrorPostConceptDescription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostConceptDescriptionApiResponse"/>
        /// </summary>
        public partial class PostConceptDescriptionApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPostConceptDescriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostConceptDescriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostConceptDescriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostConceptDescriptionApiResponse(ILogger<PostConceptDescriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.ConceptDescription? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.ConceptDescription>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out MnestixSearcher.Clients.Model.ConceptDescription? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutConceptDescriptionById(ref string cdIdentifier, ConceptDescription conceptDescription);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cdIdentifier"></param>
        /// <param name="conceptDescription"></param>
        /// <returns></returns>
        private void ValidatePutConceptDescriptionById(string cdIdentifier, ConceptDescription conceptDescription)
        {
            if (cdIdentifier == null)
                throw new ArgumentNullException(nameof(cdIdentifier));

            if (conceptDescription == null)
                throw new ArgumentNullException(nameof(conceptDescription));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        /// <param name="conceptDescription"></param>
        private void AfterPutConceptDescriptionByIdDefaultImplementation(IPutConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier, ConceptDescription conceptDescription)
        {
            bool suppressDefaultLog = false;
            AfterPutConceptDescriptionById(ref suppressDefaultLog, apiResponseLocalVar, cdIdentifier, conceptDescription);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        /// <param name="conceptDescription"></param>
        partial void AfterPutConceptDescriptionById(ref bool suppressDefaultLog, IPutConceptDescriptionByIdApiResponse apiResponseLocalVar, string cdIdentifier, ConceptDescription conceptDescription);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        /// <param name="conceptDescription"></param>
        private void OnErrorPutConceptDescriptionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier, ConceptDescription conceptDescription)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutConceptDescriptionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cdIdentifier, conceptDescription);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cdIdentifier"></param>
        /// <param name="conceptDescription"></param>
        partial void OnErrorPutConceptDescriptionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string cdIdentifier, ConceptDescription conceptDescription);

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IPutConceptDescriptionByIdApiResponse?> PutConceptDescriptionByIdOrDefaultAsync(string cdIdentifier, ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutConceptDescriptionByIdAsync(cdIdentifier, conceptDescription, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="conceptDescription"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutConceptDescriptionByIdApiResponse"/>&gt;</returns>
        public async Task<IPutConceptDescriptionByIdApiResponse> PutConceptDescriptionByIdAsync(string cdIdentifier, ConceptDescription conceptDescription, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutConceptDescriptionById(cdIdentifier, conceptDescription);

                FormatPutConceptDescriptionById(ref cdIdentifier, conceptDescription);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/concept-descriptions/{cdIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/concept-descriptions/{cdIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcdIdentifier%7D", Uri.EscapeDataString(cdIdentifier.ToString()));

                    httpRequestMessageLocalVar.Content = (conceptDescription as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(conceptDescription, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutConceptDescriptionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutConceptDescriptionByIdApiResponse>();

                        PutConceptDescriptionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/concept-descriptions/{cdIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutConceptDescriptionByIdDefaultImplementation(apiResponseLocalVar, cdIdentifier, conceptDescription);

                        Events.ExecuteOnPutConceptDescriptionById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutConceptDescriptionByIdDefaultImplementation(e, "/concept-descriptions/{cdIdentifier}", uriBuilderLocalVar.Path, cdIdentifier, conceptDescription);
                Events.ExecuteOnErrorPutConceptDescriptionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutConceptDescriptionByIdApiResponse"/>
        /// </summary>
        public partial class PutConceptDescriptionByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPutConceptDescriptionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutConceptDescriptionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutConceptDescriptionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutConceptDescriptionByIdApiResponse(ILogger<PutConceptDescriptionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
