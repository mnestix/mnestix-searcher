// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using MnestixSearcher.Clients.Client;
using MnestixSearcher.Clients.Model;
using System.Diagnostics.CodeAnalysis;

namespace MnestixSearcher.Clients.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISerializationAPIApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SerializationAPIApiEvents Events { get; }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="submodelIds">The Submodels&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateSerializationByIdsApiResponse"/>&gt;</returns>
        Task<IGenerateSerializationByIdsApiResponse> GenerateSerializationByIdsAsync(Option<List<string>> aasIds = default, Option<List<string>> submodelIds = default, Option<string> includeConceptDescriptions = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIds">The Asset Administration Shells&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="submodelIds">The Submodels&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateSerializationByIdsApiResponse"/>?&gt;</returns>
        Task<IGenerateSerializationByIdsApiResponse?> GenerateSerializationByIdsOrDefaultAsync(Option<List<string>> aasIds = default, Option<List<string>> submodelIds = default, Option<string> includeConceptDescriptions = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGenerateSerializationByIdsApiResponse"/>
    /// </summary>
    public interface IGenerateSerializationByIdsApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SerializationAPIApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateSerializationByIds;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateSerializationByIds;

        internal void ExecuteOnGenerateSerializationByIds(SerializationAPIApi.GenerateSerializationByIdsApiResponse apiResponse)
        {
            OnGenerateSerializationByIds?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateSerializationByIds(Exception exception)
        {
            OnErrorGenerateSerializationByIds?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SerializationAPIApi : ISerializationAPIApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SerializationAPIApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SerializationAPIApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerializationAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SerializationAPIApi(ILogger<SerializationAPIApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SerializationAPIApiEvents serializationAPIApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SerializationAPIApi>();
            HttpClient = httpClient;
            Events = serializationAPIApiEvents;
        }

        partial void FormatGenerateSerializationByIds(Option<List<string>> aasIds, Option<List<string>> submodelIds, ref Option<string> includeConceptDescriptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIds"></param>
        /// <param name="submodelIds"></param>
        /// <param name="includeConceptDescriptions"></param>
        /// <returns></returns>
        private void ValidateGenerateSerializationByIds(Option<List<string>> aasIds, Option<List<string>> submodelIds, Option<string> includeConceptDescriptions)
        {
            if (aasIds.IsSet && aasIds.Value == null)
                throw new ArgumentNullException(nameof(aasIds));

            if (submodelIds.IsSet && submodelIds.Value == null)
                throw new ArgumentNullException(nameof(submodelIds));

            if (includeConceptDescriptions.IsSet && includeConceptDescriptions.Value == null)
                throw new ArgumentNullException(nameof(includeConceptDescriptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIds"></param>
        /// <param name="submodelIds"></param>
        /// <param name="includeConceptDescriptions"></param>
        private void AfterGenerateSerializationByIdsDefaultImplementation(IGenerateSerializationByIdsApiResponse apiResponseLocalVar, Option<List<string>> aasIds, Option<List<string>> submodelIds, Option<string> includeConceptDescriptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateSerializationByIds(ref suppressDefaultLog, apiResponseLocalVar, aasIds, submodelIds, includeConceptDescriptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIds"></param>
        /// <param name="submodelIds"></param>
        /// <param name="includeConceptDescriptions"></param>
        partial void AfterGenerateSerializationByIds(ref bool suppressDefaultLog, IGenerateSerializationByIdsApiResponse apiResponseLocalVar, Option<List<string>> aasIds, Option<List<string>> submodelIds, Option<string> includeConceptDescriptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIds"></param>
        /// <param name="submodelIds"></param>
        /// <param name="includeConceptDescriptions"></param>
        private void OnErrorGenerateSerializationByIdsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> aasIds, Option<List<string>> submodelIds, Option<string> includeConceptDescriptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateSerializationByIds(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIds, submodelIds, includeConceptDescriptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIds"></param>
        /// <param name="submodelIds"></param>
        /// <param name="includeConceptDescriptions"></param>
        partial void OnErrorGenerateSerializationByIds(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> aasIds, Option<List<string>> submodelIds, Option<string> includeConceptDescriptions);

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <param name="aasIds">The Asset Administration Shells&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="submodelIds">The Submodels&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateSerializationByIdsApiResponse"/>&gt;</returns>
        public async Task<IGenerateSerializationByIdsApiResponse?> GenerateSerializationByIdsOrDefaultAsync(Option<List<string>> aasIds = default, Option<List<string>> submodelIds = default, Option<string> includeConceptDescriptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateSerializationByIdsAsync(aasIds, submodelIds, includeConceptDescriptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="submodelIds">The Submodels&#39; unique ids (UTF8-BASE64-URL-encoded) (optional)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateSerializationByIdsApiResponse"/>&gt;</returns>
        public async Task<IGenerateSerializationByIdsApiResponse> GenerateSerializationByIdsAsync(Option<List<string>> aasIds = default, Option<List<string>> submodelIds = default, Option<string> includeConceptDescriptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateSerializationByIds(aasIds, submodelIds, includeConceptDescriptions);

                FormatGenerateSerializationByIds(aasIds, submodelIds, ref includeConceptDescriptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/serialization"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/serialization");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (aasIds.IsSet)
                        parseQueryStringLocalVar["aasIds"] = ClientUtils.ParameterToString(aasIds.Value);

                    if (submodelIds.IsSet)
                        parseQueryStringLocalVar["submodelIds"] = ClientUtils.ParameterToString(submodelIds.Value);

                    if (includeConceptDescriptions.IsSet)
                        parseQueryStringLocalVar["includeConceptDescriptions"] = ClientUtils.ParameterToString(includeConceptDescriptions.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateSerializationByIdsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateSerializationByIdsApiResponse>();

                        GenerateSerializationByIdsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/serialization", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateSerializationByIdsDefaultImplementation(apiResponseLocalVar, aasIds, submodelIds, includeConceptDescriptions);

                        Events.ExecuteOnGenerateSerializationByIds(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateSerializationByIdsDefaultImplementation(e, "/serialization", uriBuilderLocalVar.Path, aasIds, submodelIds, includeConceptDescriptions);
                Events.ExecuteOnErrorGenerateSerializationByIds(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateSerializationByIdsApiResponse"/>
        /// </summary>
        public partial class GenerateSerializationByIdsApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGenerateSerializationByIdsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateSerializationByIdsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateSerializationByIdsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateSerializationByIdsApiResponse(ILogger<GenerateSerializationByIdsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
