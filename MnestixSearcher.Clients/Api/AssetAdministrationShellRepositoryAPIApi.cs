// <auto-generated>
/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using MnestixSearcher.Clients.Client;
using MnestixSearcher.Clients.Model;
using System.Diagnostics.CodeAnalysis;

namespace MnestixSearcher.Clients.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetAdministrationShellRepositoryAPIApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetAdministrationShellRepositoryAPIApiEvents Events { get; }

        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        Task<IDeleteAssetAdministrationShellByIdApiResponse> DeleteAssetAdministrationShellByIdAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetAdministrationShellByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteAssetAdministrationShellByIdApiResponse?> DeleteAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>&gt;</returns>
        Task<IDeleteSubmodelReferenceByIdAasRepositoryApiResponse> DeleteSubmodelReferenceByIdAasRepositoryAsync(string aasIdentifier, string submodelIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IDeleteSubmodelReferenceByIdAasRepositoryApiResponse?> DeleteSubmodelReferenceByIdAasRepositoryOrDefaultAsync(string aasIdentifier, string submodelIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        Task<IDeleteThumbnailAasRepositoryApiResponse> DeleteThumbnailAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteThumbnailAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IDeleteThumbnailAasRepositoryApiResponse?> DeleteThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">A list of specific Asset identifiers (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAssetAdministrationShellsApiResponse"/>&gt;</returns>
        Task<IGetAllAssetAdministrationShellsApiResponse> GetAllAssetAdministrationShellsAsync(Option<List<SpecificAssetId>> assetIds = default, Option<string> idShort = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetIds">A list of specific Asset identifiers (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAssetAdministrationShellsApiResponse"/>?&gt;</returns>
        Task<IGetAllAssetAdministrationShellsApiResponse?> GetAllAssetAdministrationShellsOrDefaultAsync(Option<List<SpecificAssetId>> assetIds = default, Option<string> idShort = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSubmodelReferencesAasRepositoryApiResponse"/>&gt;</returns>
        Task<IGetAllSubmodelReferencesAasRepositoryApiResponse> GetAllSubmodelReferencesAasRepositoryAsync(string aasIdentifier, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSubmodelReferencesAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IGetAllSubmodelReferencesAasRepositoryApiResponse?> GetAllSubmodelReferencesAasRepositoryOrDefaultAsync(string aasIdentifier, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        Task<IGetAssetAdministrationShellByIdApiResponse> GetAssetAdministrationShellByIdAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetAdministrationShellByIdApiResponse"/>?&gt;</returns>
        Task<IGetAssetAdministrationShellByIdApiResponse?> GetAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        Task<IGetAssetInformationAasRepositoryApiResponse> GetAssetInformationAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInformationAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IGetAssetInformationAasRepositoryApiResponse?> GetAssetInformationAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        Task<IGetThumbnailAasRepositoryApiResponse> GetThumbnailAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IGetThumbnailAasRepositoryApiResponse?> GetThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssetAdministrationShellApiResponse"/>&gt;</returns>
        Task<IPostAssetAdministrationShellApiResponse> PostAssetAdministrationShellAsync(AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssetAdministrationShellApiResponse"/>?&gt;</returns>
        Task<IPostAssetAdministrationShellApiResponse?> PostAssetAdministrationShellOrDefaultAsync(AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSubmodelReferenceAasRepositoryApiResponse"/>&gt;</returns>
        Task<IPostSubmodelReferenceAasRepositoryApiResponse> PostSubmodelReferenceAasRepositoryAsync(string aasIdentifier, Reference reference, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSubmodelReferenceAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IPostSubmodelReferenceAasRepositoryApiResponse?> PostSubmodelReferenceAasRepositoryOrDefaultAsync(string aasIdentifier, Reference reference, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        Task<IPutAssetAdministrationShellByIdApiResponse> PutAssetAdministrationShellByIdAsync(string aasIdentifier, AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetAdministrationShellByIdApiResponse"/>?&gt;</returns>
        Task<IPutAssetAdministrationShellByIdApiResponse?> PutAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetInformation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        Task<IPutAssetInformationAasRepositoryApiResponse> PutAssetInformationAasRepositoryAsync(string aasIdentifier, AssetInformation assetInformation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetInformation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetInformationAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IPutAssetInformationAasRepositoryApiResponse?> PutAssetInformationAasRepositoryOrDefaultAsync(string aasIdentifier, AssetInformation assetInformation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        Task<IPutThumbnailAasRepositoryApiResponse> PutThumbnailAasRepositoryAsync(string aasIdentifier, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutThumbnailAasRepositoryApiResponse"/>?&gt;</returns>
        Task<IPutThumbnailAasRepositoryApiResponse?> PutThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteAssetAdministrationShellByIdApiResponse"/>
    /// </summary>
    public interface IDeleteAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>
    /// </summary>
    public interface IDeleteSubmodelReferenceByIdAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteThumbnailAasRepositoryApiResponse"/>
    /// </summary>
    public interface IDeleteThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllAssetAdministrationShellsApiResponse"/>
    /// </summary>
    public interface IGetAllAssetAdministrationShellsApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.PagedResult?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllSubmodelReferencesAasRepositoryApiResponse"/>
    /// </summary>
    public interface IGetAllSubmodelReferencesAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetAdministrationShellByIdApiResponse"/>
    /// </summary>
    public interface IGetAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetInformationAasRepositoryApiResponse"/>
    /// </summary>
    public interface IGetAssetInformationAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetThumbnailAasRepositoryApiResponse"/>
    /// </summary>
    public interface IGetThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IOk<MnestixSearcher.Clients.Model.Result?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostAssetAdministrationShellApiResponse"/>
    /// </summary>
    public interface IPostAssetAdministrationShellApiResponse : MnestixSearcher.Clients.Client.IApiResponse, ICreated<MnestixSearcher.Clients.Model.AssetAdministrationShell?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, IConflict<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPostSubmodelReferenceAasRepositoryApiResponse"/>
    /// </summary>
    public interface IPostSubmodelReferenceAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, ICreated<MnestixSearcher.Clients.Model.Reference?>, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IConflict<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPutAssetAdministrationShellByIdApiResponse"/>
    /// </summary>
    public interface IPutAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPutAssetInformationAasRepositoryApiResponse"/>
    /// </summary>
    public interface IPutAssetInformationAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPutThumbnailAasRepositoryApiResponse"/>
    /// </summary>
    public interface IPutThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.IApiResponse, IBadRequest<MnestixSearcher.Clients.Model.Result?>, IUnauthorized<MnestixSearcher.Clients.Model.Result?>, IForbidden<MnestixSearcher.Clients.Model.Result?>, INotFound<MnestixSearcher.Clients.Model.Result?>, IInternalServerError<MnestixSearcher.Clients.Model.Result?>, IOk<MnestixSearcher.Clients.Model.Result?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetAdministrationShellRepositoryAPIApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAssetAdministrationShellById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAssetAdministrationShellById;

        internal void ExecuteOnDeleteAssetAdministrationShellById(AssetAdministrationShellRepositoryAPIApi.DeleteAssetAdministrationShellByIdApiResponse apiResponse)
        {
            OnDeleteAssetAdministrationShellById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAssetAdministrationShellById(Exception exception)
        {
            OnErrorDeleteAssetAdministrationShellById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSubmodelReferenceByIdAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSubmodelReferenceByIdAasRepository;

        internal void ExecuteOnDeleteSubmodelReferenceByIdAasRepository(AssetAdministrationShellRepositoryAPIApi.DeleteSubmodelReferenceByIdAasRepositoryApiResponse apiResponse)
        {
            OnDeleteSubmodelReferenceByIdAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSubmodelReferenceByIdAasRepository(Exception exception)
        {
            OnErrorDeleteSubmodelReferenceByIdAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteThumbnailAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteThumbnailAasRepository;

        internal void ExecuteOnDeleteThumbnailAasRepository(AssetAdministrationShellRepositoryAPIApi.DeleteThumbnailAasRepositoryApiResponse apiResponse)
        {
            OnDeleteThumbnailAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteThumbnailAasRepository(Exception exception)
        {
            OnErrorDeleteThumbnailAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllAssetAdministrationShells;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllAssetAdministrationShells;

        internal void ExecuteOnGetAllAssetAdministrationShells(AssetAdministrationShellRepositoryAPIApi.GetAllAssetAdministrationShellsApiResponse apiResponse)
        {
            OnGetAllAssetAdministrationShells?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllAssetAdministrationShells(Exception exception)
        {
            OnErrorGetAllAssetAdministrationShells?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllSubmodelReferencesAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllSubmodelReferencesAasRepository;

        internal void ExecuteOnGetAllSubmodelReferencesAasRepository(AssetAdministrationShellRepositoryAPIApi.GetAllSubmodelReferencesAasRepositoryApiResponse apiResponse)
        {
            OnGetAllSubmodelReferencesAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllSubmodelReferencesAasRepository(Exception exception)
        {
            OnErrorGetAllSubmodelReferencesAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetAdministrationShellById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetAdministrationShellById;

        internal void ExecuteOnGetAssetAdministrationShellById(AssetAdministrationShellRepositoryAPIApi.GetAssetAdministrationShellByIdApiResponse apiResponse)
        {
            OnGetAssetAdministrationShellById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetAdministrationShellById(Exception exception)
        {
            OnErrorGetAssetAdministrationShellById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetInformationAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetInformationAasRepository;

        internal void ExecuteOnGetAssetInformationAasRepository(AssetAdministrationShellRepositoryAPIApi.GetAssetInformationAasRepositoryApiResponse apiResponse)
        {
            OnGetAssetInformationAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetInformationAasRepository(Exception exception)
        {
            OnErrorGetAssetInformationAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetThumbnailAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetThumbnailAasRepository;

        internal void ExecuteOnGetThumbnailAasRepository(AssetAdministrationShellRepositoryAPIApi.GetThumbnailAasRepositoryApiResponse apiResponse)
        {
            OnGetThumbnailAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetThumbnailAasRepository(Exception exception)
        {
            OnErrorGetThumbnailAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostAssetAdministrationShell;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostAssetAdministrationShell;

        internal void ExecuteOnPostAssetAdministrationShell(AssetAdministrationShellRepositoryAPIApi.PostAssetAdministrationShellApiResponse apiResponse)
        {
            OnPostAssetAdministrationShell?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostAssetAdministrationShell(Exception exception)
        {
            OnErrorPostAssetAdministrationShell?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostSubmodelReferenceAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostSubmodelReferenceAasRepository;

        internal void ExecuteOnPostSubmodelReferenceAasRepository(AssetAdministrationShellRepositoryAPIApi.PostSubmodelReferenceAasRepositoryApiResponse apiResponse)
        {
            OnPostSubmodelReferenceAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostSubmodelReferenceAasRepository(Exception exception)
        {
            OnErrorPostSubmodelReferenceAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutAssetAdministrationShellById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutAssetAdministrationShellById;

        internal void ExecuteOnPutAssetAdministrationShellById(AssetAdministrationShellRepositoryAPIApi.PutAssetAdministrationShellByIdApiResponse apiResponse)
        {
            OnPutAssetAdministrationShellById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutAssetAdministrationShellById(Exception exception)
        {
            OnErrorPutAssetAdministrationShellById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutAssetInformationAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutAssetInformationAasRepository;

        internal void ExecuteOnPutAssetInformationAasRepository(AssetAdministrationShellRepositoryAPIApi.PutAssetInformationAasRepositoryApiResponse apiResponse)
        {
            OnPutAssetInformationAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutAssetInformationAasRepository(Exception exception)
        {
            OnErrorPutAssetInformationAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutThumbnailAasRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutThumbnailAasRepository;

        internal void ExecuteOnPutThumbnailAasRepository(AssetAdministrationShellRepositoryAPIApi.PutThumbnailAasRepositoryApiResponse apiResponse)
        {
            OnPutThumbnailAasRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutThumbnailAasRepository(Exception exception)
        {
            OnErrorPutThumbnailAasRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetAdministrationShellRepositoryAPIApi : IAssetAdministrationShellRepositoryAPIApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetAdministrationShellRepositoryAPIApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetAdministrationShellRepositoryAPIApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRepositoryAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellRepositoryAPIApi(ILogger<AssetAdministrationShellRepositoryAPIApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetAdministrationShellRepositoryAPIApiEvents assetAdministrationShellRepositoryAPIApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetAdministrationShellRepositoryAPIApi>();
            HttpClient = httpClient;
            Events = assetAdministrationShellRepositoryAPIApiEvents;
        }

        partial void FormatDeleteAssetAdministrationShellById(ref string aasIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeleteAssetAdministrationShellById(string aasIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void AfterDeleteAssetAdministrationShellByIdDefaultImplementation(IDeleteAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAssetAdministrationShellById(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void AfterDeleteAssetAdministrationShellById(ref bool suppressDefaultLog, IDeleteAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void OnErrorDeleteAssetAdministrationShellByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAssetAdministrationShellById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void OnErrorDeleteAssetAdministrationShellById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier);

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetAdministrationShellByIdApiResponse?> DeleteAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAssetAdministrationShellByIdAsync(aasIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetAdministrationShellByIdApiResponse> DeleteAssetAdministrationShellByIdAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAssetAdministrationShellById(aasIdentifier);

                FormatDeleteAssetAdministrationShellById(ref aasIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAssetAdministrationShellByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAssetAdministrationShellByIdApiResponse>();

                        DeleteAssetAdministrationShellByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAssetAdministrationShellByIdDefaultImplementation(apiResponseLocalVar, aasIdentifier);

                        Events.ExecuteOnDeleteAssetAdministrationShellById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAssetAdministrationShellByIdDefaultImplementation(e, "/shells/{aasIdentifier}", uriBuilderLocalVar.Path, aasIdentifier);
                Events.ExecuteOnErrorDeleteAssetAdministrationShellById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAssetAdministrationShellByIdApiResponse"/>
        /// </summary>
        public partial class DeleteAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IDeleteAssetAdministrationShellByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAssetAdministrationShellByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAssetAdministrationShellByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssetAdministrationShellByIdApiResponse(ILogger<DeleteAssetAdministrationShellByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSubmodelReferenceByIdAasRepository(ref string aasIdentifier, ref string submodelIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="submodelIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeleteSubmodelReferenceByIdAasRepository(string aasIdentifier, string submodelIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (submodelIdentifier == null)
                throw new ArgumentNullException(nameof(submodelIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="submodelIdentifier"></param>
        private void AfterDeleteSubmodelReferenceByIdAasRepositoryDefaultImplementation(IDeleteSubmodelReferenceByIdAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, string submodelIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSubmodelReferenceByIdAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, submodelIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="submodelIdentifier"></param>
        partial void AfterDeleteSubmodelReferenceByIdAasRepository(ref bool suppressDefaultLog, IDeleteSubmodelReferenceByIdAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="submodelIdentifier"></param>
        private void OnErrorDeleteSubmodelReferenceByIdAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, string submodelIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSubmodelReferenceByIdAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, submodelIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="submodelIdentifier"></param>
        partial void OnErrorDeleteSubmodelReferenceByIdAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself! 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IDeleteSubmodelReferenceByIdAasRepositoryApiResponse?> DeleteSubmodelReferenceByIdAasRepositoryOrDefaultAsync(string aasIdentifier, string submodelIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSubmodelReferenceByIdAasRepositoryAsync(aasIdentifier, submodelIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself! 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IDeleteSubmodelReferenceByIdAasRepositoryApiResponse> DeleteSubmodelReferenceByIdAasRepositoryAsync(string aasIdentifier, string submodelIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier);

                FormatDeleteSubmodelReferenceByIdAasRepository(ref aasIdentifier, ref submodelIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsubmodelIdentifier%7D", Uri.EscapeDataString(submodelIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSubmodelReferenceByIdAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSubmodelReferenceByIdAasRepositoryApiResponse>();

                        DeleteSubmodelReferenceByIdAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSubmodelReferenceByIdAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier, submodelIdentifier);

                        Events.ExecuteOnDeleteSubmodelReferenceByIdAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSubmodelReferenceByIdAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}", uriBuilderLocalVar.Path, aasIdentifier, submodelIdentifier);
                Events.ExecuteOnErrorDeleteSubmodelReferenceByIdAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>
        /// </summary>
        public partial class DeleteSubmodelReferenceByIdAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IDeleteSubmodelReferenceByIdAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSubmodelReferenceByIdAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSubmodelReferenceByIdAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSubmodelReferenceByIdAasRepositoryApiResponse(ILogger<DeleteSubmodelReferenceByIdAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteThumbnailAasRepository(ref string aasIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeleteThumbnailAasRepository(string aasIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void AfterDeleteThumbnailAasRepositoryDefaultImplementation(IDeleteThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeleteThumbnailAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void AfterDeleteThumbnailAasRepository(ref bool suppressDefaultLog, IDeleteThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void OnErrorDeleteThumbnailAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteThumbnailAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void OnErrorDeleteThumbnailAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IDeleteThumbnailAasRepositoryApiResponse?> DeleteThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteThumbnailAasRepositoryAsync(aasIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IDeleteThumbnailAasRepositoryApiResponse> DeleteThumbnailAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteThumbnailAasRepository(aasIdentifier);

                FormatDeleteThumbnailAasRepository(ref aasIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/asset-information/thumbnail"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/asset-information/thumbnail");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteThumbnailAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteThumbnailAasRepositoryApiResponse>();

                        DeleteThumbnailAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/asset-information/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteThumbnailAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier);

                        Events.ExecuteOnDeleteThumbnailAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteThumbnailAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/asset-information/thumbnail", uriBuilderLocalVar.Path, aasIdentifier);
                Events.ExecuteOnErrorDeleteThumbnailAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteThumbnailAasRepositoryApiResponse"/>
        /// </summary>
        public partial class DeleteThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IDeleteThumbnailAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteThumbnailAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteThumbnailAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteThumbnailAasRepositoryApiResponse(ILogger<DeleteThumbnailAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllAssetAdministrationShells(Option<List<SpecificAssetId>> assetIds, ref Option<string> idShort, ref Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetIds"></param>
        /// <param name="idShort"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <returns></returns>
        private void ValidateGetAllAssetAdministrationShells(Option<List<SpecificAssetId>> assetIds, Option<string> idShort, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            if (assetIds.IsSet && assetIds.Value == null)
                throw new ArgumentNullException(nameof(assetIds));

            if (idShort.IsSet && idShort.Value == null)
                throw new ArgumentNullException(nameof(idShort));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit));

            if (cursor.IsSet && cursor.Value == null)
                throw new ArgumentNullException(nameof(cursor));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetIds"></param>
        /// <param name="idShort"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void AfterGetAllAssetAdministrationShellsDefaultImplementation(IGetAllAssetAdministrationShellsApiResponse apiResponseLocalVar, Option<List<SpecificAssetId>> assetIds, Option<string> idShort, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLog = false;
            AfterGetAllAssetAdministrationShells(ref suppressDefaultLog, apiResponseLocalVar, assetIds, idShort, limit, cursor);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetIds"></param>
        /// <param name="idShort"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void AfterGetAllAssetAdministrationShells(ref bool suppressDefaultLog, IGetAllAssetAdministrationShellsApiResponse apiResponseLocalVar, Option<List<SpecificAssetId>> assetIds, Option<string> idShort, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetIds"></param>
        /// <param name="idShort"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void OnErrorGetAllAssetAdministrationShellsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<SpecificAssetId>> assetIds, Option<string> idShort, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllAssetAdministrationShells(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetIds, idShort, limit, cursor);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetIds"></param>
        /// <param name="idShort"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void OnErrorGetAllAssetAdministrationShells(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<SpecificAssetId>> assetIds, Option<string> idShort, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <param name="assetIds">A list of specific Asset identifiers (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAssetAdministrationShellsApiResponse"/>&gt;</returns>
        public async Task<IGetAllAssetAdministrationShellsApiResponse?> GetAllAssetAdministrationShellsOrDefaultAsync(Option<List<SpecificAssetId>> assetIds = default, Option<string> idShort = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllAssetAdministrationShellsAsync(assetIds, idShort, limit, cursor, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">A list of specific Asset identifiers (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAssetAdministrationShellsApiResponse"/>&gt;</returns>
        public async Task<IGetAllAssetAdministrationShellsApiResponse> GetAllAssetAdministrationShellsAsync(Option<List<SpecificAssetId>> assetIds = default, Option<string> idShort = default, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllAssetAdministrationShells(assetIds, idShort, limit, cursor);

                FormatGetAllAssetAdministrationShells(assetIds, ref idShort, ref limit, cursor);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (assetIds.IsSet)
                        parseQueryStringLocalVar["assetIds"] = ClientUtils.ParameterToString(assetIds.Value);

                    if (idShort.IsSet)
                        parseQueryStringLocalVar["idShort"] = ClientUtils.ParameterToString(idShort.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllAssetAdministrationShellsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllAssetAdministrationShellsApiResponse>();

                        GetAllAssetAdministrationShellsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllAssetAdministrationShellsDefaultImplementation(apiResponseLocalVar, assetIds, idShort, limit, cursor);

                        Events.ExecuteOnGetAllAssetAdministrationShells(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllAssetAdministrationShellsDefaultImplementation(e, "/shells", uriBuilderLocalVar.Path, assetIds, idShort, limit, cursor);
                Events.ExecuteOnErrorGetAllAssetAdministrationShells(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllAssetAdministrationShellsApiResponse"/>
        /// </summary>
        public partial class GetAllAssetAdministrationShellsApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetAllAssetAdministrationShellsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllAssetAdministrationShellsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllAssetAdministrationShellsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllAssetAdministrationShellsApiResponse(ILogger<GetAllAssetAdministrationShellsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.PagedResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.PagedResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.PagedResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllSubmodelReferencesAasRepository(ref string aasIdentifier, ref Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <returns></returns>
        private void ValidateGetAllSubmodelReferencesAasRepository(string aasIdentifier, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit));

            if (cursor.IsSet && cursor.Value == null)
                throw new ArgumentNullException(nameof(cursor));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void AfterGetAllSubmodelReferencesAasRepositoryDefaultImplementation(IGetAllSubmodelReferencesAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLog = false;
            AfterGetAllSubmodelReferencesAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, limit, cursor);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void AfterGetAllSubmodelReferencesAasRepository(ref bool suppressDefaultLog, IGetAllSubmodelReferencesAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        private void OnErrorGetAllSubmodelReferencesAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, Option<string> limit, Option<Base64UrlEncodedCursor> cursor)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllSubmodelReferencesAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, limit, cursor);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        partial void OnErrorGetAllSubmodelReferencesAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, Option<string> limit, Option<Base64UrlEncodedCursor> cursor);

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSubmodelReferencesAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetAllSubmodelReferencesAasRepositoryApiResponse?> GetAllSubmodelReferencesAasRepositoryOrDefaultAsync(string aasIdentifier, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllSubmodelReferencesAasRepositoryAsync(aasIdentifier, limit, cursor, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array (optional)</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSubmodelReferencesAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetAllSubmodelReferencesAasRepositoryApiResponse> GetAllSubmodelReferencesAasRepositoryAsync(string aasIdentifier, Option<string> limit = default, Option<Base64UrlEncodedCursor> cursor = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor);

                FormatGetAllSubmodelReferencesAasRepository(ref aasIdentifier, ref limit, cursor);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/submodel-refs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/submodel-refs");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllSubmodelReferencesAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllSubmodelReferencesAasRepositoryApiResponse>();

                        GetAllSubmodelReferencesAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/submodel-refs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllSubmodelReferencesAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier, limit, cursor);

                        Events.ExecuteOnGetAllSubmodelReferencesAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllSubmodelReferencesAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/submodel-refs", uriBuilderLocalVar.Path, aasIdentifier, limit, cursor);
                Events.ExecuteOnErrorGetAllSubmodelReferencesAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllSubmodelReferencesAasRepositoryApiResponse"/>
        /// </summary>
        public partial class GetAllSubmodelReferencesAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetAllSubmodelReferencesAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllSubmodelReferencesAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllSubmodelReferencesAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllSubmodelReferencesAasRepositoryApiResponse(ILogger<GetAllSubmodelReferencesAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetAdministrationShellById(ref string aasIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetAssetAdministrationShellById(string aasIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void AfterGetAssetAdministrationShellByIdDefaultImplementation(IGetAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetAdministrationShellById(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void AfterGetAssetAdministrationShellById(ref bool suppressDefaultLog, IGetAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void OnErrorGetAssetAdministrationShellByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetAdministrationShellById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void OnErrorGetAssetAdministrationShellById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier);

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IGetAssetAdministrationShellByIdApiResponse?> GetAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetAdministrationShellByIdAsync(aasIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IGetAssetAdministrationShellByIdApiResponse> GetAssetAdministrationShellByIdAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetAdministrationShellById(aasIdentifier);

                FormatGetAssetAdministrationShellById(ref aasIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetAdministrationShellByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetAdministrationShellByIdApiResponse>();

                        GetAssetAdministrationShellByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetAdministrationShellByIdDefaultImplementation(apiResponseLocalVar, aasIdentifier);

                        Events.ExecuteOnGetAssetAdministrationShellById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetAdministrationShellByIdDefaultImplementation(e, "/shells/{aasIdentifier}", uriBuilderLocalVar.Path, aasIdentifier);
                Events.ExecuteOnErrorGetAssetAdministrationShellById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetAdministrationShellByIdApiResponse"/>
        /// </summary>
        public partial class GetAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetAssetAdministrationShellByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetAdministrationShellByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetAdministrationShellByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetAdministrationShellByIdApiResponse(ILogger<GetAssetAdministrationShellByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetInformationAasRepository(ref string aasIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetAssetInformationAasRepository(string aasIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void AfterGetAssetInformationAasRepositoryDefaultImplementation(IGetAssetInformationAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetInformationAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void AfterGetAssetInformationAasRepository(ref bool suppressDefaultLog, IGetAssetInformationAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void OnErrorGetAssetInformationAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetInformationAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void OnErrorGetAssetInformationAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier);

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetAssetInformationAasRepositoryApiResponse?> GetAssetInformationAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetInformationAasRepositoryAsync(aasIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetAssetInformationAasRepositoryApiResponse> GetAssetInformationAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetInformationAasRepository(aasIdentifier);

                FormatGetAssetInformationAasRepository(ref aasIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/asset-information"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/asset-information");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetInformationAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetInformationAasRepositoryApiResponse>();

                        GetAssetInformationAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/asset-information", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetInformationAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier);

                        Events.ExecuteOnGetAssetInformationAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetInformationAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/asset-information", uriBuilderLocalVar.Path, aasIdentifier);
                Events.ExecuteOnErrorGetAssetInformationAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetInformationAasRepositoryApiResponse"/>
        /// </summary>
        public partial class GetAssetInformationAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetAssetInformationAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetInformationAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetInformationAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetInformationAasRepositoryApiResponse(ILogger<GetAssetInformationAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetThumbnailAasRepository(ref string aasIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetThumbnailAasRepository(string aasIdentifier)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void AfterGetThumbnailAasRepositoryDefaultImplementation(IGetThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetThumbnailAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void AfterGetThumbnailAasRepository(ref bool suppressDefaultLog, IGetThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        private void OnErrorGetThumbnailAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetThumbnailAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        partial void OnErrorGetThumbnailAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetThumbnailAasRepositoryApiResponse?> GetThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetThumbnailAasRepositoryAsync(aasIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetThumbnailAasRepositoryApiResponse> GetThumbnailAasRepositoryAsync(string aasIdentifier, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetThumbnailAasRepository(aasIdentifier);

                FormatGetThumbnailAasRepository(ref aasIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/asset-information/thumbnail"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/asset-information/thumbnail");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetThumbnailAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetThumbnailAasRepositoryApiResponse>();

                        GetThumbnailAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/asset-information/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetThumbnailAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier);

                        Events.ExecuteOnGetThumbnailAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetThumbnailAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/asset-information/thumbnail", uriBuilderLocalVar.Path, aasIdentifier);
                Events.ExecuteOnErrorGetThumbnailAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetThumbnailAasRepositoryApiResponse"/>
        /// </summary>
        public partial class GetThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IGetThumbnailAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetThumbnailAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetThumbnailAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetThumbnailAasRepositoryApiResponse(ILogger<GetThumbnailAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostAssetAdministrationShell(AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAdministrationShell"></param>
        /// <returns></returns>
        private void ValidatePostAssetAdministrationShell(AssetAdministrationShell assetAdministrationShell)
        {
            if (assetAdministrationShell == null)
                throw new ArgumentNullException(nameof(assetAdministrationShell));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAdministrationShell"></param>
        private void AfterPostAssetAdministrationShellDefaultImplementation(IPostAssetAdministrationShellApiResponse apiResponseLocalVar, AssetAdministrationShell assetAdministrationShell)
        {
            bool suppressDefaultLog = false;
            AfterPostAssetAdministrationShell(ref suppressDefaultLog, apiResponseLocalVar, assetAdministrationShell);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAdministrationShell"></param>
        partial void AfterPostAssetAdministrationShell(ref bool suppressDefaultLog, IPostAssetAdministrationShellApiResponse apiResponseLocalVar, AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAdministrationShell"></param>
        private void OnErrorPostAssetAdministrationShellDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetAdministrationShell assetAdministrationShell)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostAssetAdministrationShell(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAdministrationShell);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAdministrationShell"></param>
        partial void OnErrorPostAssetAdministrationShell(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssetAdministrationShellApiResponse"/>&gt;</returns>
        public async Task<IPostAssetAdministrationShellApiResponse?> PostAssetAdministrationShellOrDefaultAsync(AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAssetAdministrationShellAsync(assetAdministrationShell, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssetAdministrationShellApiResponse"/>&gt;</returns>
        public async Task<IPostAssetAdministrationShellApiResponse> PostAssetAdministrationShellAsync(AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostAssetAdministrationShell(assetAdministrationShell);

                FormatPostAssetAdministrationShell(assetAdministrationShell);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells");

                    httpRequestMessageLocalVar.Content = (assetAdministrationShell as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetAdministrationShell, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostAssetAdministrationShellApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostAssetAdministrationShellApiResponse>();

                        PostAssetAdministrationShellApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostAssetAdministrationShellDefaultImplementation(apiResponseLocalVar, assetAdministrationShell);

                        Events.ExecuteOnPostAssetAdministrationShell(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostAssetAdministrationShellDefaultImplementation(e, "/shells", uriBuilderLocalVar.Path, assetAdministrationShell);
                Events.ExecuteOnErrorPostAssetAdministrationShell(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostAssetAdministrationShellApiResponse"/>
        /// </summary>
        public partial class PostAssetAdministrationShellApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPostAssetAdministrationShellApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostAssetAdministrationShellApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostAssetAdministrationShellApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostAssetAdministrationShellApiResponse(ILogger<PostAssetAdministrationShellApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.AssetAdministrationShell? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.AssetAdministrationShell>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out MnestixSearcher.Clients.Model.AssetAdministrationShell? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostSubmodelReferenceAasRepository(ref string aasIdentifier, Reference reference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="reference"></param>
        /// <returns></returns>
        private void ValidatePostSubmodelReferenceAasRepository(string aasIdentifier, Reference reference)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (reference == null)
                throw new ArgumentNullException(nameof(reference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="reference"></param>
        private void AfterPostSubmodelReferenceAasRepositoryDefaultImplementation(IPostSubmodelReferenceAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, Reference reference)
        {
            bool suppressDefaultLog = false;
            AfterPostSubmodelReferenceAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, reference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="reference"></param>
        partial void AfterPostSubmodelReferenceAasRepository(ref bool suppressDefaultLog, IPostSubmodelReferenceAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, Reference reference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="reference"></param>
        private void OnErrorPostSubmodelReferenceAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, Reference reference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostSubmodelReferenceAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, reference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="reference"></param>
        partial void OnErrorPostSubmodelReferenceAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, Reference reference);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSubmodelReferenceAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPostSubmodelReferenceAasRepositoryApiResponse?> PostSubmodelReferenceAasRepositoryOrDefaultAsync(string aasIdentifier, Reference reference, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostSubmodelReferenceAasRepositoryAsync(aasIdentifier, reference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSubmodelReferenceAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPostSubmodelReferenceAasRepositoryApiResponse> PostSubmodelReferenceAasRepositoryAsync(string aasIdentifier, Reference reference, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostSubmodelReferenceAasRepository(aasIdentifier, reference);

                FormatPostSubmodelReferenceAasRepository(ref aasIdentifier, reference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/submodel-refs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/submodel-refs");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.Content = (reference as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(reference, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostSubmodelReferenceAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostSubmodelReferenceAasRepositoryApiResponse>();

                        PostSubmodelReferenceAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/submodel-refs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostSubmodelReferenceAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier, reference);

                        Events.ExecuteOnPostSubmodelReferenceAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostSubmodelReferenceAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/submodel-refs", uriBuilderLocalVar.Path, aasIdentifier, reference);
                Events.ExecuteOnErrorPostSubmodelReferenceAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostSubmodelReferenceAasRepositoryApiResponse"/>
        /// </summary>
        public partial class PostSubmodelReferenceAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPostSubmodelReferenceAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostSubmodelReferenceAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostSubmodelReferenceAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostSubmodelReferenceAasRepositoryApiResponse(ILogger<PostSubmodelReferenceAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Reference? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Reference>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Reference? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutAssetAdministrationShellById(ref string aasIdentifier, AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetAdministrationShell"></param>
        /// <returns></returns>
        private void ValidatePutAssetAdministrationShellById(string aasIdentifier, AssetAdministrationShell assetAdministrationShell)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (assetAdministrationShell == null)
                throw new ArgumentNullException(nameof(assetAdministrationShell));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetAdministrationShell"></param>
        private void AfterPutAssetAdministrationShellByIdDefaultImplementation(IPutAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier, AssetAdministrationShell assetAdministrationShell)
        {
            bool suppressDefaultLog = false;
            AfterPutAssetAdministrationShellById(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, assetAdministrationShell);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetAdministrationShell"></param>
        partial void AfterPutAssetAdministrationShellById(ref bool suppressDefaultLog, IPutAssetAdministrationShellByIdApiResponse apiResponseLocalVar, string aasIdentifier, AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetAdministrationShell"></param>
        private void OnErrorPutAssetAdministrationShellByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, AssetAdministrationShell assetAdministrationShell)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutAssetAdministrationShellById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, assetAdministrationShell);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetAdministrationShell"></param>
        partial void OnErrorPutAssetAdministrationShellById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, AssetAdministrationShell assetAdministrationShell);

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IPutAssetAdministrationShellByIdApiResponse?> PutAssetAdministrationShellByIdOrDefaultAsync(string aasIdentifier, AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutAssetAdministrationShellByIdAsync(aasIdentifier, assetAdministrationShell, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetAdministrationShell"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetAdministrationShellByIdApiResponse"/>&gt;</returns>
        public async Task<IPutAssetAdministrationShellByIdApiResponse> PutAssetAdministrationShellByIdAsync(string aasIdentifier, AssetAdministrationShell assetAdministrationShell, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutAssetAdministrationShellById(aasIdentifier, assetAdministrationShell);

                FormatPutAssetAdministrationShellById(ref aasIdentifier, assetAdministrationShell);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.Content = (assetAdministrationShell as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetAdministrationShell, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutAssetAdministrationShellByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutAssetAdministrationShellByIdApiResponse>();

                        PutAssetAdministrationShellByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutAssetAdministrationShellByIdDefaultImplementation(apiResponseLocalVar, aasIdentifier, assetAdministrationShell);

                        Events.ExecuteOnPutAssetAdministrationShellById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutAssetAdministrationShellByIdDefaultImplementation(e, "/shells/{aasIdentifier}", uriBuilderLocalVar.Path, aasIdentifier, assetAdministrationShell);
                Events.ExecuteOnErrorPutAssetAdministrationShellById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutAssetAdministrationShellByIdApiResponse"/>
        /// </summary>
        public partial class PutAssetAdministrationShellByIdApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPutAssetAdministrationShellByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutAssetAdministrationShellByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutAssetAdministrationShellByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutAssetAdministrationShellByIdApiResponse(ILogger<PutAssetAdministrationShellByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutAssetInformationAasRepository(ref string aasIdentifier, AssetInformation assetInformation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetInformation"></param>
        /// <returns></returns>
        private void ValidatePutAssetInformationAasRepository(string aasIdentifier, AssetInformation assetInformation)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (assetInformation == null)
                throw new ArgumentNullException(nameof(assetInformation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetInformation"></param>
        private void AfterPutAssetInformationAasRepositoryDefaultImplementation(IPutAssetInformationAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, AssetInformation assetInformation)
        {
            bool suppressDefaultLog = false;
            AfterPutAssetInformationAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, assetInformation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetInformation"></param>
        partial void AfterPutAssetInformationAasRepository(ref bool suppressDefaultLog, IPutAssetInformationAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, AssetInformation assetInformation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetInformation"></param>
        private void OnErrorPutAssetInformationAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, AssetInformation assetInformation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutAssetInformationAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, assetInformation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="assetInformation"></param>
        partial void OnErrorPutAssetInformationAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, AssetInformation assetInformation);

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetInformation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPutAssetInformationAasRepositoryApiResponse?> PutAssetInformationAasRepositoryOrDefaultAsync(string aasIdentifier, AssetInformation assetInformation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutAssetInformationAasRepositoryAsync(aasIdentifier, assetInformation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="assetInformation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssetInformationAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPutAssetInformationAasRepositoryApiResponse> PutAssetInformationAasRepositoryAsync(string aasIdentifier, AssetInformation assetInformation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutAssetInformationAasRepository(aasIdentifier, assetInformation);

                FormatPutAssetInformationAasRepository(ref aasIdentifier, assetInformation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/asset-information"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/asset-information");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    httpRequestMessageLocalVar.Content = (assetInformation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetInformation, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutAssetInformationAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutAssetInformationAasRepositoryApiResponse>();

                        PutAssetInformationAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/asset-information", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutAssetInformationAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier, assetInformation);

                        Events.ExecuteOnPutAssetInformationAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutAssetInformationAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/asset-information", uriBuilderLocalVar.Path, aasIdentifier, assetInformation);
                Events.ExecuteOnErrorPutAssetInformationAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutAssetInformationAasRepositoryApiResponse"/>
        /// </summary>
        public partial class PutAssetInformationAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPutAssetInformationAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutAssetInformationAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutAssetInformationAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutAssetInformationAasRepositoryApiResponse(ILogger<PutAssetInformationAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutThumbnailAasRepository(ref string aasIdentifier, ref string fileName, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aasIdentifier"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidatePutThumbnailAasRepository(string aasIdentifier, string fileName, System.IO.Stream file)
        {
            if (aasIdentifier == null)
                throw new ArgumentNullException(nameof(aasIdentifier));

            if (fileName == null)
                throw new ArgumentNullException(nameof(fileName));

            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        private void AfterPutThumbnailAasRepositoryDefaultImplementation(IPutThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, string fileName, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterPutThumbnailAasRepository(ref suppressDefaultLog, apiResponseLocalVar, aasIdentifier, fileName, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        partial void AfterPutThumbnailAasRepository(ref bool suppressDefaultLog, IPutThumbnailAasRepositoryApiResponse apiResponseLocalVar, string aasIdentifier, string fileName, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        private void OnErrorPutThumbnailAasRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, string fileName, System.IO.Stream file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutThumbnailAasRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aasIdentifier, fileName, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aasIdentifier"></param>
        /// <param name="fileName"></param>
        /// <param name="file"></param>
        partial void OnErrorPutThumbnailAasRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aasIdentifier, string fileName, System.IO.Stream file);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPutThumbnailAasRepositoryApiResponse?> PutThumbnailAasRepositoryOrDefaultAsync(string aasIdentifier, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutThumbnailAasRepositoryAsync(aasIdentifier, fileName, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="fileName"></param>
        /// <param name="file">file detail</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutThumbnailAasRepositoryApiResponse"/>&gt;</returns>
        public async Task<IPutThumbnailAasRepositoryApiResponse> PutThumbnailAasRepositoryAsync(string aasIdentifier, string fileName, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutThumbnailAasRepository(aasIdentifier, fileName, file);

                FormatPutThumbnailAasRepository(ref aasIdentifier, ref fileName, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/shells/{aasIdentifier}/asset-information/thumbnail"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/shells/{aasIdentifier}/asset-information/thumbnail");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaasIdentifier%7D", Uri.EscapeDataString(aasIdentifier.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fileName"] = ClientUtils.ParameterToString(fileName);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutThumbnailAasRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutThumbnailAasRepositoryApiResponse>();

                        PutThumbnailAasRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/shells/{aasIdentifier}/asset-information/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutThumbnailAasRepositoryDefaultImplementation(apiResponseLocalVar, aasIdentifier, fileName, file);

                        Events.ExecuteOnPutThumbnailAasRepository(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutThumbnailAasRepositoryDefaultImplementation(e, "/shells/{aasIdentifier}/asset-information/thumbnail", uriBuilderLocalVar.Path, aasIdentifier, fileName, file);
                Events.ExecuteOnErrorPutThumbnailAasRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutThumbnailAasRepositoryApiResponse"/>
        /// </summary>
        public partial class PutThumbnailAasRepositoryApiResponse : MnestixSearcher.Clients.Client.ApiResponse, IPutThumbnailAasRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutThumbnailAasRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutThumbnailAasRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutThumbnailAasRepositoryApiResponse(ILogger<PutThumbnailAasRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public MnestixSearcher.Clients.Model.Result? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<MnestixSearcher.Clients.Model.Result>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out MnestixSearcher.Clients.Model.Result? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
