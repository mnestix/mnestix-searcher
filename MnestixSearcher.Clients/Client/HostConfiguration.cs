/*
 * BaSyx AAS Environment Component
 *
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using MnestixSearcher.Clients.Api;
using MnestixSearcher.Clients.Model;

namespace MnestixSearcher.Clients.Client
{
    /// <summary>
    /// Provides hosting configuration for MnestixSearcher.Clients
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AdministrativeInformationJsonConverter());
            _jsonOptions.Converters.Add(new AnnotatedRelationshipElementJsonConverter());
            _jsonOptions.Converters.Add(new AnnotatedRelationshipElementAllOfAnnotationsJsonConverter());
            _jsonOptions.Converters.Add(new AssetAdministrationShellJsonConverter());
            _jsonOptions.Converters.Add(new AssetInformationJsonConverter());
            _jsonOptions.Converters.Add(new Base64UrlEncodedCursorJsonConverter());
            _jsonOptions.Converters.Add(new BasicEventElementJsonConverter());
            _jsonOptions.Converters.Add(new BlobJsonConverter());
            _jsonOptions.Converters.Add(new CapabilityJsonConverter());
            _jsonOptions.Converters.Add(new ConceptDescriptionJsonConverter());
            _jsonOptions.Converters.Add(new DataElementJsonConverter());
            _jsonOptions.Converters.Add(new DataSpecificationIec61360JsonConverter());
            _jsonOptions.Converters.Add(new EmbeddedDataSpecificationJsonConverter());
            _jsonOptions.Converters.Add(new EmbeddedDataSpecificationDataSpecificationContentJsonConverter());
            _jsonOptions.Converters.Add(new EntityJsonConverter());
            _jsonOptions.Converters.Add(new EntityAllOfStatementsJsonConverter());
            _jsonOptions.Converters.Add(new EventElementJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionJsonConverter());
            _jsonOptions.Converters.Add(new FileJsonConverter());
            _jsonOptions.Converters.Add(new KeyJsonConverter());
            _jsonOptions.Converters.Add(new LangStringDefinitionTypeIec61360JsonConverter());
            _jsonOptions.Converters.Add(new LangStringNameTypeJsonConverter());
            _jsonOptions.Converters.Add(new LangStringPreferredNameTypeIec61360JsonConverter());
            _jsonOptions.Converters.Add(new LangStringShortNameTypeIec61360JsonConverter());
            _jsonOptions.Converters.Add(new LangStringTextTypeJsonConverter());
            _jsonOptions.Converters.Add(new LevelTypeJsonConverter());
            _jsonOptions.Converters.Add(new MessageJsonConverter());
            _jsonOptions.Converters.Add(new MultiLanguagePropertyJsonConverter());
            _jsonOptions.Converters.Add(new OperationJsonConverter());
            _jsonOptions.Converters.Add(new OperationRequestJsonConverter());
            _jsonOptions.Converters.Add(new OperationRequestClientTimeoutDurationJsonConverter());
            _jsonOptions.Converters.Add(new OperationRequestClientTimeoutDurationXmlschemaTypeJsonConverter());
            _jsonOptions.Converters.Add(new OperationVariableJsonConverter());
            _jsonOptions.Converters.Add(new PagedResultJsonConverter());
            _jsonOptions.Converters.Add(new PagedResultPagingMetadataJsonConverter());
            _jsonOptions.Converters.Add(new PatchSubmodelByIdValueOnlyRequestInnerJsonConverter());
            _jsonOptions.Converters.Add(new PropertyJsonConverter());
            _jsonOptions.Converters.Add(new PutSubmodelElementByPathSubmodelRepoRequestJsonConverter());
            _jsonOptions.Converters.Add(new QualifierJsonConverter());
            _jsonOptions.Converters.Add(new RangeJsonConverter());
            _jsonOptions.Converters.Add(new ReferenceJsonConverter());
            _jsonOptions.Converters.Add(new ReferenceElementJsonConverter());
            _jsonOptions.Converters.Add(new RelationshipElementJsonConverter());
            _jsonOptions.Converters.Add(new ResourceJsonConverter());
            _jsonOptions.Converters.Add(new ResultJsonConverter());
            _jsonOptions.Converters.Add(new ServiceDescriptionJsonConverter());
            _jsonOptions.Converters.Add(new SpecificAssetIdJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelElementJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelElementCollectionJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelElementCollectionAllOfValueJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelElementListJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelElementListAllOfValueJsonConverter());
            _jsonOptions.Converters.Add(new SubmodelValueOnlyJsonConverter());
            _jsonOptions.Converters.Add(new UploadEnvironmentRequestJsonConverter());
            _jsonOptions.Converters.Add(new ValueListJsonConverter());
            _jsonOptions.Converters.Add(new ValueReferencePairJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AssetAdministrationShellAPIApiEvents>();
            _services.AddTransient<IAssetAdministrationShellAPIApi, AssetAdministrationShellAPIApi>();
            _services.AddSingleton<AssetAdministrationShellRepositoryAPIApiEvents>();
            _services.AddTransient<IAssetAdministrationShellRepositoryAPIApi, AssetAdministrationShellRepositoryAPIApi>();
            _services.AddSingleton<ConceptDescriptionRepositoryAPIApiEvents>();
            _services.AddTransient<IConceptDescriptionRepositoryAPIApi, ConceptDescriptionRepositoryAPIApi>();
            _services.AddSingleton<EnvironmentAPIApiEvents>();
            _services.AddTransient<IEnvironmentAPIApi, EnvironmentAPIApi>();
            _services.AddSingleton<RegistryAndDiscoveryInterfaceApiEvents>();
            _services.AddTransient<IRegistryAndDiscoveryInterfaceApi, RegistryAndDiscoveryInterfaceApi>();
            _services.AddSingleton<SerializationAPIApiEvents>();
            _services.AddTransient<ISerializationAPIApi, SerializationAPIApi>();
            _services.AddSingleton<SubmodelRepositoryAPIApiEvents>();
            _services.AddTransient<ISubmodelRepositoryAPIApi, SubmodelRepositoryAPIApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAssetAdministrationShellAPIApi, AssetAdministrationShellAPIApi>(client));
            builders.Add(_services.AddHttpClient<IAssetAdministrationShellRepositoryAPIApi, AssetAdministrationShellRepositoryAPIApi>(client));
            builders.Add(_services.AddHttpClient<IConceptDescriptionRepositoryAPIApi, ConceptDescriptionRepositoryAPIApi>(client));
            builders.Add(_services.AddHttpClient<IEnvironmentAPIApi, EnvironmentAPIApi>(client));
            builders.Add(_services.AddHttpClient<IRegistryAndDiscoveryInterfaceApi, RegistryAndDiscoveryInterfaceApi>(client));
            builders.Add(_services.AddHttpClient<ISerializationAPIApi, SerializationAPIApi>(client));
            builders.Add(_services.AddHttpClient<ISubmodelRepositoryAPIApi, SubmodelRepositoryAPIApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
